<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SaaS服务功能权限控制是怎么做的</title>
    <url>/SaaS%E6%9C%8D%E5%8A%A1%E5%8A%9F%E8%83%BD%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%E6%98%AF%E6%80%8E%E4%B9%88%E5%81%9A%E7%9A%84/</url>
    <content><![CDATA[<h2><span id="saas-fu-wu-quan-ju-ji-bie-de-gong-neng">SaaS服务全局级别的功能</span><a href="#saas-fu-wu-quan-ju-ji-bie-de-gong-neng" class="header-anchor">#</a></h2><p>前端调用SaaS服务一个全局级别的接口</p>
<pre class="mermaid">sequenceDiagram
    participant User as 用户
    participant Frontend as 前端
    participant Backend as 后端

    User->>Frontend: 点击页面
    Frontend->>Backend: 请求当前功能集
    Backend->>Backend: 返回当前功能集
    alt 用户有权限
        Backend->>Frontend: 返回全局数据
        Frontend->>User: 显示数据
    else 用户无权限
        Backend->>Frontend: 返回错误信息
        Frontend->>User: 显示错误信息
    end</pre>

<h2><span id="saas-fu-wu-yong-hu-ji-bie-de-gong-neng">SaaS服务用户级别的功能</span><a href="#saas-fu-wu-yong-hu-ji-bie-de-gong-neng" class="header-anchor">#</a></h2><p>前端调用SaaS服务一个用户权限的接口</p>
<pre class="mermaid">sequenceDiagram
    participant User as 用户
    participant Frontend as 前端
    participant Backend as 后端

    User->>Frontend: 点击页面
    Frontend->>Backend: 查看用户权限
    Backend->>Backend: 验证用户权限
    alt 用户有权限
        Backend->>Frontend: 返回用户项目数据
        Frontend->>User: 显示数据
    else 用户无权限
        Backend->>Frontend: 返回错误信息
        Frontend->>User: 显示错误信息
    end</pre>


<script type="module"> import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.esm.min.mjs';	mermaid.initialize({startOnLoad: true, flowchart: {curve: 'linear'}}); </script>]]></content>
  </entry>
  <entry>
    <title>java DefaultUncaughtExceptionHandler 详解</title>
    <url>/java-default-uncaught-exception-handler/</url>
    <content><![CDATA[<p>在Java程序运行时，一些非受检异常可能会导致程序崩溃，比如NullPointerException、ArrayIndexOutOfBoundsException等等，这些异常都是由JVM抛出的，如果不对这些异常进行处理，小则线程运行中突然退出，大则整个程序崩溃。理想的场景下，每一个非受检异常都应该被捕获并进行处理，但是在实际开发中，我们往往会忽略一些异常，这些异常可能是由于程序员的疏忽导致的，也可能是由于程序员无法预知的原因导致的，比如第三方库抛出的异常。</p>
<p>为了避免这些异常导致程序崩溃，Java提供了一个全局的异常处理器，即DefaultUncaughtExceptionHandler，它可以捕获所有未被捕获的异常，从而避免程序崩溃。</p>
<p>DefaultUncaught的使用示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UncaughtExceptionHandle</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Thread.setDefaultUncaughtExceptionHandler((t, e) -&gt; log.error(<span class="string">&quot;Uncaught exception: &quot;</span>, e));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述的代码会将未捕获的异常打印到日志中，如果你希望打印至标准输出或标准输出，可以将log替换为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 标准输出</span></span><br><span class="line">System.out.println(<span class="string">&quot;Uncaught exception: &quot;</span> + e);</span><br><span class="line"><span class="comment">// 错误输出</span></span><br><span class="line">System.err.println(<span class="string">&quot;Uncaught exception: &quot;</span> + e);</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>jetty servlet的编码字符集选择</title>
    <url>/java-servlet-encoding-charset/</url>
    <content><![CDATA[<p>记一次中文指标乱码问题，问题也很简单，如下图所示：</p>
<p><img src="/images/20230603/p1.png" alt="Untitled"></p>
<p>从metricbeat开始找原因，发现其实只要是UTF-8的编码格式就都可以解析，最终发现是webServer返回的数据非UTF-8格式，修改方案也很简单。将servlet中的content-type里面的<strong>text&#x2F;plain</strong>修改成<strong>text&#x2F;plain; charset&#x3D;utf-8</strong>就可以了，如下面代码所示:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    response.setContentType(<span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line">    response.setStatus(HttpServletResponse.SC_OK);</span><br><span class="line">    response.getWriter().write(<span class="string">&quot;&lt;h1&gt;哈哈&lt;/h1&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以轻易使用一个demo来复现这个问题，在maven中添加如下依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.4.35.v20201120<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jetty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetty-servlet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.4.35.v20201120<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shoothzj.jetty;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.server.Server;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.servlet.ServletContextHandler;</span><br><span class="line"><span class="keyword">import</span> org.eclipse.jetty.servlet.ServletHolder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleJettyServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Server</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Server</span>(<span class="number">8080</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ServletContextHandler</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletContextHandler</span>(ServletContextHandler.SESSIONS);</span><br><span class="line">        context.setContextPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        server.setHandler(context);</span><br><span class="line"></span><br><span class="line">        context.addServlet(<span class="keyword">new</span> <span class="title class_">ServletHolder</span>(<span class="keyword">new</span> <span class="title class_">HelloDefaultServlet</span>()), <span class="string">&quot;/hello-default&quot;</span>);</span><br><span class="line">        context.addServlet(<span class="keyword">new</span> <span class="title class_">ServletHolder</span>(<span class="keyword">new</span> <span class="title class_">HelloUTF8Servlet</span>()), <span class="string">&quot;/hello-utf8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        server.start();</span><br><span class="line">        server.join();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">HelloDefaultServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">                <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            response.setContentType(<span class="string">&quot;text/plain&quot;</span>);</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_OK);</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;&lt;h1&gt;哈哈&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">HelloUTF8Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">                <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            response.setContentType(<span class="string">&quot;text/plain; charset=UTF-8&quot;</span>);</span><br><span class="line">            response.setStatus(HttpServletResponse.SC_OK);</span><br><span class="line">            response.getWriter().write(<span class="string">&quot;&lt;h1&gt;哈哈&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过curl命令来复现这个问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl localhost:8080/hello-default</span><br><span class="line">&lt;h1&gt;??&lt;/h1&gt;%</span><br><span class="line">curl localhost:8080/hello-utf8</span><br><span class="line">&lt;h1&gt;哈哈&lt;/h1&gt;%</span><br></pre></td></tr></table></figure>

<p>那么servlet里面的数据如何编码，我们可以dive一下，首先servlet里面有一个函数叫**<code>response.setCharacterEncoding();</code>**这个函数可以指定编码格式。其次，servlet还会通过上面的setContentType函数来做一定的推断，比如content-type中携带了charset，就使用content-type中的charset。还有些特定的content-type，比如text&#x2F;json，在没有设置的情况下，servlet容器会假设它使用utf-8编码。在推断不出来，也没有手动设置的情况下，jetty默认的编码是iso-8859-1，这就解释了乱码的问题。</p>
]]></content>
  </entry>
  <entry>
    <title>通用4层获取源IP的负载均衡网关建设</title>
    <url>/loadbalance-layer-four-source-ip/</url>
    <content><![CDATA[<h1><span id="wang-guan-jian-she">网关建设</span><a href="#wang-guan-jian-she" class="header-anchor">#</a></h1><p>今天给大家介绍三种常见的四层负载均衡、网络转发方案，可用于四层的网关建设。</p>
<h2><span id="li-yong-ipvs-shi-xian-xu-yao-hou-duan-fu-wu-neng-lian-tong-wai-bu-wang-luo">利用ipvs实现(需要后端服务能连通外部网络)</span><a href="#li-yong-ipvs-shi-xian-xu-yao-hou-duan-fu-wu-neng-lian-tong-wai-bu-wang-luo" class="header-anchor">#</a></h2><p><img src="/loadbalance-layer-four-source-ip/lb-4-ipvs.png" alt="lb-4-ipvs"></p>
<p>该方案需要后端服务器与前端client网络打通，GatewayIp可以采用主备的方式保证高可用</p>
<p>配置都在GatewayIp上，需要配置的如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipvsadm -A -u <span class="variable">$GatewayIp</span>:<span class="variable">$port</span> -s rr -p 600</span><br><span class="line"><span class="comment"># -u表示为udp协议，-t表示为tcp协议</span></span><br><span class="line"><span class="comment"># rr 为均衡算法，roundroubin的意思，lc则代表最短连接数</span></span><br><span class="line">ipvsadm -a -u <span class="variable">$GatewayIp</span>:<span class="variable">$port</span> -r <span class="variable">$ServerIp</span>:<span class="variable">$port</span> -m</span><br></pre></td></tr></table></figure>

<h2><span id="ipvs-iptables-shi-xian">Ipvs+Iptables实现</span><a href="#ipvs-iptables-shi-xian" class="header-anchor">#</a></h2><p>如果您不希望后端Server与客户端面对面打通，那么您可能会喜欢这种方式，将GatewayIP设置为ServerIp的默认网关，再由Snat转换将报文转换出去，这样子Server就不需要与客户端面对面打通了，图示如下:</p>
<p><img src="/loadbalance-layer-four-source-ip/lb-4-ipvs-iptables.png" alt="lb-4-ipvs-iptables"></p>
<p>配置默认路由也很简单</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip route add 客户端IP网段 via GateWayIp dev eth0</span><br></pre></td></tr></table></figure>
<p>配置iptables</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -m iprange -p udp --dst-range $client_ip_range -o eth1  -j SNAT  --to-source $GateWayIp</span><br></pre></td></tr></table></figure>

<h2><span id="ipvs-iptables-iptunnel-shi-xian">Ipvs+Iptables+Iptunnel实现</span><a href="#ipvs-iptables-iptunnel-shi-xian" class="header-anchor">#</a></h2><p>默认路由有一个限制，就是说Server与Gateway都在一个子网内，有过商用经验的大家都知道DMZ之类的说法，就是说应用服务器和网关服务器在诸如安全组，子网等等上需要隔离。假设你需要将应用服务器和网关放在不同的子网，上面的方案就搞不定啊，这个时候需要使用ip隧道的方式来跨子网，图示如下，仅仅后边红色路线的ip发生了变化，原来的报文被ip隧道Wrap:</p>
<p><img src="/loadbalance-layer-four-source-ip/lb-4-ipvs-iptables-iptunnel.png" alt="lb-4-ipvs-iptables-iptunnel"></p>
<p>配置ip 隧道倒也不难</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip tunnel add $tun_name mode ipip remote $remote_ip local $local_ip ttl 255</span><br></pre></td></tr></table></figure>
<h1><span id="zong-jie">总结</span><a href="#zong-jie" class="header-anchor">#</a></h1><p>以上三种方案均没有单点问题，且都兼容tcp，udp协议。GateWay处的单点问题，通过zk选主、etcd选主，keepalive等 + 浮动IP迁移的方式均能解决。大家可以根据自己的网规网设自由选择</p>
]]></content>
      <tags>
        <tag>LB</tag>
      </tags>
  </entry>
  <entry>
    <title>一些微服务开发规范</title>
    <url>/microservice-dev-standard/</url>
    <content><![CDATA[<h2><span id="xiao-fei-zu-ming-cheng">消费组名称</span><a href="#xiao-fei-zu-ming-cheng" class="header-anchor">#</a></h2><ul>
<li>共享消费者使用微服务名称，比如(DeviceManager)</li>
<li>广播消费者使用微服务名称+唯一标识，比如<ul>
<li>kubernetes部署场景下可以将pod名称的唯一部分作为唯一标识，比如下图的nginx可以使用5d4f5c59f8-7hztx作为唯一标识<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ kubectl get pod</span><br><span class="line">NAME                          READY   STATUS    RESTARTS   AGE</span><br><span class="line">nginx-deployment-5d4f5c59f8-7hztx   1/1     Running   0          2d3h</span><br><span class="line">nginx-deployment-5d4f5c59f8-xvbnm   1/1     Running   0          2d3h</span><br><span class="line">redis-5f67c8d8c9-4g2h3              1/1     Running   0          10h</span><br></pre></td></tr></table></figure></li>
<li>pod的IP地址</li>
<li>UUID</li>
</ul>
</li>
</ul>
<h2><span id="shu-ju-ku-biao">数据库表</span><a href="#shu-ju-ku-biao" class="header-anchor">#</a></h2><ul>
<li>数据库表名使用单数。</li>
<li>数据库的主键，要考虑对应实体物理上是否唯一。</li>
<li>数据库可以分为多个列组合唯一、单列唯一、是否有唯一索引、是否有二级索引。</li>
</ul>
]]></content>
      <tags>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>中间件是开箱即用的吗？为什么要开发中间件adapter？</title>
    <url>/middleware-adapter-paradigm/</url>
    <content><![CDATA[<h2><span id="zhong-jian-jian-zai-hen-duo-xi-tong-zhong-du-cun-zai">中间件在很多系统中都存在</span><a href="#zhong-jian-jian-zai-hen-duo-xi-tong-zhong-du-cun-zai" class="header-anchor">#</a></h2><p>在一个系统里面，或多或少地都会有中间件的存在，总会有数据库吧，其他的如消息队列，缓存，大数据组件。即使是基于公有云构筑的系统，公有云厂商只提供广泛使用的中间件，假如你的系统里面有很多组件没那么泛用，那么就只能自己维护，如<code>ZooKeeper</code>、<code>Etcd</code>、<code>Pulsar</code>、<code>Prometheus</code>、<code>Lvs</code>等</p>
<h2><span id="shi-me-shi-zhong-jian-jian-adapter">什么是中间件adapter</span><a href="#shi-me-shi-zhong-jian-jian-adapter" class="header-anchor">#</a></h2><p>中间件<code>adapter</code>指的是和中间件运行在一起（同一个物理机或同一个容器），使得中间件和商用系统中已有的组件进行对接，最终使得该中间件达到在该系统商用的标准。像Prometheus的众多<code>exporter</code>，就是将中间件和已有的监控系统（Prometheus）进行对接的<code>adpater</code>。</p>
<h2><span id="wei-shi-me-bu-xiu-gai-zhong-jian-jian-yuan-ma-zhi-jie-ji-cheng">为什么不修改中间件源码直接集成</span><a href="#wei-shi-me-bu-xiu-gai-zhong-jian-jian-yuan-ma-zhi-jie-ji-cheng" class="header-anchor">#</a></h2><p>原因可以有很多，这里我列出几点</p>
<h3><span id="yuan-ma-xiu-gai-rong-yi-wei-hu-kun-nan">源码修改容易，维护困难</span><a href="#yuan-ma-xiu-gai-rong-yi-wei-hu-kun-nan" class="header-anchor">#</a></h3><p>很多时候不是社区通用需求，无法合并到社区主干。后续每次中间件版本升级，源码的修改就要重新进行一次。社区大版本代码重构，有的甚至不知道如何修改下去。并且对研发人员的技能要求高。</p>
<h3><span id="yuan-ma-yu-tuan-dui-ji-zhu-zhan-bu-tong-xiu-gai-kun-nan">源码与团队技术栈不同，修改困难</span><a href="#yuan-ma-yu-tuan-dui-ji-zhu-zhan-bu-tong-xiu-gai-kun-nan" class="header-anchor">#</a></h3><p>这是最常见的，像<code>java</code>团队维护<code>erlang</code>写的<code>rabbitmq</code></p>
<h3><span id="he-qi-ta-xi-tong-dui-jie-you-yu-yan-yao-qiu">和其他系统对接，有语言要求</span><a href="#he-qi-ta-xi-tong-dui-jie-you-yu-yan-yao-qiu" class="header-anchor">#</a></h3><p>XX监控系统，只能使用X语言接入，但中间件使用Y语言写的，怎么办？adapter的能力就体现出来了。</p>
<h2><span id="wei-shi-me-zai-shang-yong-xi-tong-zhong-zhong-jian-jian-zuo-bu-dao-kai-xiang-ji-yong">为什么在商用系统中中间件做不到开箱即用</span><a href="#wei-shi-me-zai-shang-yong-xi-tong-zhong-zhong-jian-jian-zuo-bu-dao-kai-xiang-ji-yong" class="header-anchor">#</a></h2><p>在商用系统中，对一个新引入的中间件，往往有如下能力上的诉求，原生的中间件很难满足</p>
<ul>
<li>适配原有的监控系统</li>
<li>适配原有的告警系统</li>
<li>适配原有的证书系统</li>
<li>适配原有的备份系统（如果该中间件有状态）</li>
<li>适配原有的容灾系统（如果该中间件有状态）</li>
<li>自动化能力（适配部署、账号创建、权限策略创建）</li>
<li>对外暴露时封装一层接口</li>
<li>应用程序和中间件的服务发现</li>
</ul>
<p>有时候，业务也会根据业务的需求对中间件做一些能力增强，这部分需求比较定制，这里无法展开讨论了。</p>
<p>我们来逐一讨论上面列出的能力诉求，凡是<code>adapter</code>能实现的功能，对中间件做修改也能实现，只不过因为上一节列出的原因，选择不在中间件处侵入式修改。</p>
<h2><span id="gua-pei-yuan-you-de-jian-kong-xi-tong">适配原有的监控系统</span><a href="#gua-pei-yuan-you-de-jian-kong-xi-tong" class="header-anchor">#</a></h2><p>监控系统获取数据，往往是推拉两种模式，如果该中间件原生不支持和该监控系统对接。我们就可以让<code>adapter</code>先从中间件处取得监控数据，再和监控系统对接</p>
<h2><span id="gua-pei-yuan-you-de-gao-jing-xi-tong">适配原有的告警系统</span><a href="#gua-pei-yuan-you-de-gao-jing-xi-tong" class="header-anchor">#</a></h2><p>如果中间件发生了不可恢复的错误，如写事务文件失败，操作ZooKeeper元数据失败，可以通过<code>adapter</code>来识别中间件是否发生了上述不可恢复的错误，并和告警系统对接，发出告警。</p>
<h2><span id="gua-pei-yuan-you-de-zheng-shu-xi-tong">适配原有的证书系统</span><a href="#gua-pei-yuan-you-de-zheng-shu-xi-tong" class="header-anchor">#</a></h2><p>这一点也很关键，开源的中间件，根据我的了解，几乎没有项目做了动态证书轮换的方案，证书基本都不支持变更。而出色的商用系统是一定要支持证书轮换的。不过很遗憾的是，这些涉及到TLS握手的关键流程，<code>adapter</code>无法干涉这个流程，只能对中间件进行侵入式修改。</p>
<h2><span id="gua-pei-yuan-you-de-bei-fen-xi-tong">适配原有的备份系统</span><a href="#gua-pei-yuan-you-de-bei-fen-xi-tong" class="header-anchor">#</a></h2><p>通过<code>adapter</code>对中间件进行定期备份、按照配置中心的策略备份、备份文件自动上传到文件服务器等。</p>
<h2><span id="gua-pei-yuan-you-de-rong-zai-xi-tong">适配原有的容灾系统</span><a href="#gua-pei-yuan-you-de-rong-zai-xi-tong" class="header-anchor">#</a></h2><p>这个视中间件而定，有些中间件如<code>Pulsar</code>原生支持跨地域容灾的话，我们可能做一做配置就好了。另外一些，像<code>mysql</code>和<code>mongo</code>这种，可能我们还需要通过<code>adapter</code>来进行数据同步。不过这个时候<code>adapter</code>负责的职责就大了，还包括了容灾能力。</p>
<h2><span id="zi-dong-hua-neng-li">自动化能力</span><a href="#zi-dong-hua-neng-li" class="header-anchor">#</a></h2><h3><span id="zi-dong-hua-bu-shu">自动化部署</span><a href="#zi-dong-hua-bu-shu" class="header-anchor">#</a></h3><p>比如<code>ZooKeeper</code>、<code>Kafka</code>、<code>filebeat</code>在安装的时候，要求填写配置文件，我们就可以让<code>adapter</code>来自动化生成配置或更新配置</p>
<h3><span id="zhang-hao-he-ce-lue-de-chuang-jian-geng-xin">账号和策略的创建更新</span><a href="#zhang-hao-he-ce-lue-de-chuang-jian-geng-xin" class="header-anchor">#</a></h3><p>像<code>kubernetes</code>、<code>mysql</code>、<code>mongo</code>，我们可以在安装的时候通过<code>adapter</code>来自动化创建或更新</p>
<h2><span id="dui-wai-bao-lu-shi-feng-zhuang-yi-ceng-jie-kou">对外暴露时封装一层接口</span><a href="#dui-wai-bao-lu-shi-feng-zhuang-yi-ceng-jie-kou" class="header-anchor">#</a></h2><p>封装接口常用于中间件的提供者，出于种种原因，如中间件原本接口能力太大、中间件原本接口未做权限控制、中间件原本接口未适配期望的权限框架等。我们可以用<code>adapter</code>封装实现一层新的接口对外暴露。</p>
<h2><span id="ying-yong-cheng-xu-he-zhong-jian-jian-de-fu-wu-fa-xian">应用程序和中间件的服务发现</span><a href="#ying-yong-cheng-xu-he-zhong-jian-jian-de-fu-wu-fa-xian" class="header-anchor">#</a></h2><h3><span id="ying-yong-cheng-xu-fa-xian-zhong-jian-jian">应用程序发现中间件</span><a href="#ying-yong-cheng-xu-fa-xian-zhong-jian-jian" class="header-anchor">#</a></h3><p>应用程序与中间件的连接，说的简单一点就是如何获取<code>Ip</code>，如果是基于kubernetes的部署，那么不推荐配置<code>Ip</code>，最好是配置域名，因为<code>Ip</code>会跟着容器的生命周期变化。首先，你的应用程序并不会因为中间件的一个容器重启了来重建客户端，往往是通过一个简单重连的方式连接到新的中间件容器继续工作。其次，我们的运维人员也不会每时每刻盯着容器Ip是否变化来进行配置吧。以下图为例，域名的配置要优于Ip的配置。</p>
<p><img src="/middleware-adapter-paradigm/application-discover-middleware.png" alt="application-discover-middleware"></p>
<p>截止到目前，我们只需要一个静态配置，使得应用程序可以连接到中间件。最好这个配置是可以修改的，这样我们还可以继承蓝绿、灰度发布的能力。</p>
<h3><span id="zhong-jian-jian-dao-ye-wu-cheng-xu-de-fa-xian">中间件到业务程序的发现</span><a href="#zhong-jian-jian-dao-ye-wu-cheng-xu-de-fa-xian" class="header-anchor">#</a></h3><p>这个模式常用于负载均衡中间件如<code>Lvs</code>、<code>Nginx</code>自动维护后端列表，我们可以通过<code>adapter</code>来从注册中心获取后端服务的实例信息，并实时更新。</p>
<h2><span id="zong-jie">总结</span><a href="#zong-jie" class="header-anchor">#</a></h2><p>在商用系统中，中间件并没有想象中的那么开箱即用，本文讲述了一些中间件集成到商用系统中需要具备的能力。在对中间件侵入式修改没有技术能力或不想对中间件进行侵入式修改的场景。选用团队常用的、占用资源少的语言来开发中间件<code>adapter</code>应该是更好的选择。</p>
]]></content>
      <tags>
        <tag>middleware</tag>
      </tags>
  </entry>
  <entry>
    <title>分页实践：前后端多种分页方式实现对比</title>
    <url>/pagination-practice/</url>
    <content><![CDATA[<p>在软件开发中，分页没有统一的规范，实现方式也各不相同，有的会返回总页数，有的会返回总条数，有的可以任意翻页。本文对比一下几种常见的分页方式。</p>
<p>总体来说，分页的实现方案分为四种：</p>
<ul>
<li>后端全部返回，由前端分页</li>
<li>limit offset方案</li>
<li>cursor方案</li>
<li>cursor方案与offset结合</li>
</ul>
<h1><span id="hou-duan-quan-bu-fan-hui-you-qian-duan-fen-ye">后端全部返回，由前端分页</span><a href="#hou-duan-quan-bu-fan-hui-you-qian-duan-fen-ye" class="header-anchor">#</a></h1><pre class="mermaid">sequenceDiagram
    participant 前端
    participant 后端
    前端 ->> 后端: 请求资源集数据
    后端 -->> 前端: 返回全部数据</pre>

<table>
<thead>
<tr>
<th>前端功能</th>
<th>支持情况</th>
</tr>
</thead>
<tbody><tr>
<td>显示总页</td>
<td>🙂</td>
</tr>
<tr>
<td>任意页码跳转</td>
<td>🙂</td>
</tr>
<tr>
<td>跳转附近数页</td>
<td>🙂</td>
</tr>
<tr>
<td>大量数据集</td>
<td>😭完全不可用</td>
</tr>
<tr>
<td>实现难度</td>
<td>简单</td>
</tr>
</tbody></table>
<h1><span id="limit-offset-fang-an">limit offset方案</span><a href="#limit-offset-fang-an" class="header-anchor">#</a></h1><pre class="mermaid">sequenceDiagram
    participant 前端
    participant 后端
    前端 ->> 后端: 请求满足条件的资源总数
    后端 -->> 前端: 返回满足条件的资源总数
    前端 ->> 后端: 请求资源集数据、PageNo
    后端 -->> 前端: 部分数据</pre>

<table>
<thead>
<tr>
<th>前端功能</th>
<th>支持情况</th>
</tr>
</thead>
<tbody><tr>
<td>显示总页</td>
<td>🙂</td>
</tr>
<tr>
<td>任意页码跳转</td>
<td>🙂</td>
</tr>
<tr>
<td>跳转附近数页</td>
<td>🙂</td>
</tr>
<tr>
<td>大量数据集</td>
<td>😭海量数据集下性能差</td>
</tr>
<tr>
<td>实现难度</td>
<td>相对简单</td>
</tr>
</tbody></table>
<h1><span id="cursor-fang-an">cursor方案</span><a href="#cursor-fang-an" class="header-anchor">#</a></h1><pre class="mermaid">sequenceDiagram
    participant 前端
    participant 后端
    前端 ->> 后端: 请求满足条件的资源总数
    后端 -->> 前端: 返回满足条件的资源总数
    前端 ->> 后端: 请求资源集数据、cursor、limit
    后端 -->> 前端: 部分数据、prevCursor、nextCursor</pre>

<table>
<thead>
<tr>
<th>前端功能</th>
<th>支持情况</th>
</tr>
</thead>
<tbody><tr>
<td>显示总页</td>
<td>🙂</td>
</tr>
<tr>
<td>任意页码跳转</td>
<td>😭</td>
</tr>
<tr>
<td>跳转附近数页</td>
<td>🙂</td>
</tr>
<tr>
<td>大量数据集</td>
<td>🙂</td>
</tr>
<tr>
<td>实现难度</td>
<td>相对复杂</td>
</tr>
</tbody></table>
<p>如果每一次翻页都返回总页数的话，对性能来讲也是不小的开销。</p>
<p>相对动态的数据来说，如果不一直翻到没有数据为止，也不好确定是否到了最后一页。为了解决这个问题，以及跳转附近数页的问题，可以演进为这样的方案。</p>
<p>假定前端最多显示最近6页，每页50条数据，那么前端可以直接尝试预读300条数据，根据返回的数据来做局部的分页。一言以蔽之：读取更多的数据来进行局部分页。</p>
<p><img src="/pagination-practice/cursor_preload.png" alt="cursor_preload"></p>
<p>这里可以再简化一下前端的实现，添加offset参数，这样子前端只需要判断当前页前后数据条数是否足够，附近页的跳转可以通过携带offset字段请求得到。</p>
<h1><span id="cursor-fang-an-yu-offset-jie-he">cursor方案与offset结合</span><a href="#cursor-fang-an-yu-offset-jie-he" class="header-anchor">#</a></h1><p><img src="/pagination-practice/cursor_offset.png" alt="cursor_offset"></p>
<script type="module"> import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.esm.min.mjs';	mermaid.initialize({startOnLoad: true, flowchart: {curve: 'linear'}}); </script>]]></content>
      <tags>
        <tag>Pagination</tag>
      </tags>
  </entry>
  <entry>
    <title>优雅启停VS重试，谁能更好地保证RPC无损</title>
    <url>/rpc-lossless/</url>
    <content><![CDATA[<h1><span id="bei-jing">背景</span><a href="#bei-jing" class="header-anchor">#</a></h1><p>我们的业务有些时候总是在升级期间<code>rpc</code>业务有一些呼损，想总结一下让<code>rpc</code>调用零呼损的两种方式：重试和优雅启停。我先介绍这两种方式，再描述一下这两种方式的优缺点</p>
<p><img src="/rpc-lossless/rpc-lossless.png" alt="rpc-lossless"></p>
<p>A是一个微服务</p>
<p>B也是一个微服务</p>
<p>蓝色的是常见的注册中心，有<code>zookeeper</code>、<code>eureka</code>等实现。</p>
<h2><span id="chong-shi">重试</span><a href="#chong-shi" class="header-anchor">#</a></h2><p>重试，在发生可重试错误的时候，重试一次。什么是可重试错误呢？就是重试一次，可能会成功。比如400 BadRequest，那出现这种错误，基本上重试也没有用，就不要浪费我们宝贵的服务器资源了。常见的如<code>servicecomb</code>框架就有重试几次、重试间隔这样的参数。值得一提的是，如果你指望通过重试让升级零呼损，那么你的重试次数，要比你的并行升级实例数大才行。</p>
<p>这也很容易理解，比如A服务调用B服务，B服务有5个实例,B1~B5。这个时候，同时升级B1和B2，A第一次调用了B1，接下来重试，如果运气不好，恰好重试到了B2节点，那么业务还是会失败的。如果防异常故障，就得重试三次才行。</p>
<p>如果是防止单数据中心宕机，重试次数大于同时宕机节点数，这个规则可能就没那么靠谱了。现在，企业部署十几个乃至二十几个微服务实例，已经不是什么新闻了，假设分3数据中心部署，总不能重试接近10次吧，这种时候，最好重试策略和数据中心相关，重试的时候，选择另一个az的实例。目前<code>servicecomb</code>还不支持这种功能。</p>
<h2><span id="you-ya-qi-ting">优雅启停</span><a href="#you-ya-qi-ting" class="header-anchor">#</a></h2><h3><span id="you-ya-ting-zhi">优雅停止</span><a href="#you-ya-ting-zhi" class="header-anchor">#</a></h3><p>优雅停止，就是说当微服务快要宕机的时候，先从注册中心进行去注册，然后把发送给微服务的消息，处理完毕后，再彻底关闭。这个方式，可以有效地防止升级期间，发送到老节点的呼损。</p>
<h3><span id="you-ya-qi-dong">优雅启动</span><a href="#you-ya-qi-dong" class="header-anchor">#</a></h3><p>优雅启动，当微服务实例，能够处理<code>rpc</code>请求的时候，再将实例自己注册到注册中心。避免请求发进来，实例却无法处理。</p>
<p>这里有一个要求，就是调用方发现被调用方（即A发现B）的注册中心，要和B注册、去注册的注册中心是一个注册中心。有案例是，发现采用k8s发现，注册、去注册却使用微服务引擎，导致呼损。</p>
<h1><span id="you-lie-dui-bi">优劣对比</span><a href="#you-lie-dui-bi" class="header-anchor">#</a></h1><h2><span id="ke-yu-zhi-jie-dian-sheng-ji-de-chang-jing">可预知节点升级的场景</span><a href="#ke-yu-zhi-jie-dian-sheng-ji-de-chang-jing" class="header-anchor">#</a></h2><p>重试相对于优雅启停，在预知节点升级的场景没那么优雅，重试次数可能还要和并行升级的节点挂钩，非常的不优雅，且难以维护</p>
<h2><span id="bu-ke-yu-zhi-jie-dian-sheng-ji-de-chang-jing">不可预知节点升级的场景</span><a href="#bu-ke-yu-zhi-jie-dian-sheng-ji-de-chang-jing" class="header-anchor">#</a></h2><p>优雅启停无法对不可预知节点升级的场景生效。只有重试能在这个场景发挥作用</p>
<h2><span id="qi-ta-chang-jing">其他场景</span><a href="#qi-ta-chang-jing" class="header-anchor">#</a></h2><p>重试可以很好地处理网络闪断、长链接中断等场景</p>
<h1><span id="zong-jie">总结</span><a href="#zong-jie" class="header-anchor">#</a></h1><p>想要实现<code>rpc</code>调用零呼损，重试和优雅启停都不可或缺，都需要实现。</p>
]]></content>
      <tags>
        <tag>RPC</tag>
      </tags>
  </entry>
  <entry>
    <title>创建自解压的可执行文件</title>
    <url>/self-extracting-executable-file/</url>
    <content><![CDATA[<h1><span id="wei-shi-me-xu-yao-zi-jie-ya-de-ke-zhi-xing-wen-jian">为什么需要自解压的可执行文件</span><a href="#wei-shi-me-xu-yao-zi-jie-ya-de-ke-zhi-xing-wen-jian" class="header-anchor">#</a></h1><p>大部分软件的安装包是一个压缩包，用户需要自己解压，然后再执行安装脚本。常见的两种格式是<code>tar.gz</code>和<code>zip</code>。常见的解压执行脚本如下</p>
<h2><span id="tar-gz">tar.gz</span><a href="#tar-gz" class="header-anchor">#</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">tar -zxvf xxx.tar.gz</span><br><span class="line"><span class="built_in">cd</span> xxx</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure>

<h2><span id="zip">zip</span><a href="#zip" class="header-anchor">#</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">unzip xxx.zip</span><br><span class="line"><span class="built_in">cd</span> xxx</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure>

<p>在有些场景下，为了方便分发、安装，我们需要将多个文件和目录打包并与一个启动脚本结合。这样子就可以实现一键安装，而不需要用户自己解压文件，然后再执行启动脚本。</p>
<p>核心原理是，通过固定分隔符分隔脚本和压缩包部分，脚本通过分隔符将压缩包部分提取出来，然后解压，执行安装脚本，脚本不会超过固定分隔符。解压可以通过临时文件(zip)或流式解压(tar.gz)的方式实现。</p>
<h1><span id="chuang-jian-bao-han-zip-ya-suo-bao-de-zi-jie-ya-ke-zhi-xing-wen-jian">创建包含zip压缩包的自解压可执行文件</span><a href="#chuang-jian-bao-han-zip-ya-suo-bao-de-zi-jie-ya-ke-zhi-xing-wen-jian" class="header-anchor">#</a></h1><h2><span id="gou-zao-yi-ge-zip-ya-suo-bao">构造一个zip压缩包</span><a href="#gou-zao-yi-ge-zip-ya-suo-bao" class="header-anchor">#</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello zip&quot;</span> &gt; temp.txt</span><br><span class="line">zip -r temp.zip temp.txt</span><br><span class="line"><span class="built_in">rm</span> -f temp.txt</span><br></pre></td></tr></table></figure>

<h2><span id="gou-zao-ke-zhi-xing-wen-jian-self-extracting-sh">构造可执行文件 <code>self_extracting.sh</code></span><a href="#gou-zao-ke-zhi-xing-wen-jian-self-extracting-sh" class="header-anchor">#</a></h2><p>以使用<code>__ARCHIVE_BELOW__</code>做分隔符为例，<code>self_extracting.sh</code>里面内容:</p>
<p>推荐把临时文件放在内存文件路径下，这样子可以避免磁盘IO</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">CURRENT_DIR=<span class="string">&quot;<span class="subst">$(dirname <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>&quot;</span></span><br><span class="line"></span><br><span class="line">ARCHIVE_START_LINE=$(awk <span class="string">&#x27;/^__ARCHIVE_BELOW__/ &#123;print NR + 1; exit 0; &#125;&#x27;</span> <span class="variable">$0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">tail</span> -n+<span class="variable">$ARCHIVE_START_LINE</span> <span class="variable">$0</span> &gt; /tmp/temp.zip</span><br><span class="line">unzip /tmp/temp.zip<span class="string">&quot; -d &quot;</span><span class="variable">$CURRENT_DIR</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">rm &quot;</span><span class="variable">$CURRENT_DIR</span>/temp.zip<span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># replace the following line with your own code</span></span><br><span class="line"><span class="string">cat temp.txt</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">exit 0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">__ARCHIVE_BELOW__</span></span><br></pre></td></tr></table></figure>

<p>将zip文件追加到<code>self_extracting.sh</code>文件的尾部</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat temp.zip &gt;&gt; self_extracting.sh</span><br><span class="line">chmod +x self_extracting.sh</span><br></pre></td></tr></table></figure>

<h1><span id="chuang-jian-bao-han-tar-gz-ya-suo-bao-de-zi-jie-ya-ke-zhi-xing-wen-jian">创建包含tar.gz压缩包的自解压可执行文件</span><a href="#chuang-jian-bao-han-tar-gz-ya-suo-bao-de-zi-jie-ya-ke-zhi-xing-wen-jian" class="header-anchor">#</a></h1><h2><span id="gou-zao-yi-ge-tar-gz-ya-suo-bao">构造一个tar.gz压缩包</span><a href="#gou-zao-yi-ge-tar-gz-ya-suo-bao" class="header-anchor">#</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;hello tar.gz&quot;</span> &gt; temp.txt</span><br><span class="line">tar -czf temp.tar.gz temp.txt</span><br><span class="line"><span class="built_in">rm</span> -f temp.txt</span><br></pre></td></tr></table></figure>

<h2><span id="gou-zao-ke-zhi-xing-wen-jian-self-extracting-sh">构造可执行文件 <code>self_extracting.sh</code></span><a href="#gou-zao-ke-zhi-xing-wen-jian-self-extracting-sh" class="header-anchor">#</a></h2><p>以使用<code>__ARCHIVE_BELOW__</code>做分隔符为例，<code>self_extracting.sh</code>里面内容:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">CURRENT_DIR=<span class="string">&quot;<span class="subst">$(dirname <span class="string">&quot;<span class="variable">$0</span>&quot;</span>)</span>&quot;</span></span><br><span class="line"></span><br><span class="line">ARCHIVE_START_LINE=$(awk <span class="string">&#x27;/^__ARCHIVE_BELOW__/ &#123;print NR + 1; exit 0; &#125;&#x27;</span> <span class="variable">$0</span>)</span><br><span class="line"><span class="built_in">tail</span> -n+<span class="variable">$ARCHIVE_START_LINE</span> <span class="variable">$0</span> | tar xz -C <span class="string">&quot;<span class="variable">$CURRENT_DIR</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># replace the following line with your own code</span></span><br><span class="line"><span class="built_in">cat</span> temp.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span> 0</span><br><span class="line"></span><br><span class="line">__ARCHIVE_BELOW__</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Spring单元测试总结</title>
    <url>/spring-unittests/</url>
    <content><![CDATA[<h2><span id="mu-lu">目录</span><a href="#mu-lu" class="header-anchor">#</a></h2><ul>
<li>模块组织</li>
<li>测试手段</li>
<li>依赖组件</li>
</ul>
<h2><span id="dian-xing-spring-dan-yuan-ce-shi-mo-kuai-zu-zhi">典型Spring单元测试模块组织</span><a href="#dian-xing-spring-dan-yuan-ce-shi-mo-kuai-zu-zhi" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- xxx-app</span><br><span class="line">-- xxx-util</span><br><span class="line">-- test-common</span><br></pre></td></tr></table></figure>

<p>test-common尽量减少依赖，仅依赖必须的非spring组件。也可以统一将需要使用的resources文件放到test-common中。由test-common统一管理，避免每个模块测试都需要拷贝必须的文件。所需的maven配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven-resources-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-resources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>process-resources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-resources<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/resources<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>一些典型的配置文件，比如log4j2配置文件，同时，由于test-common不属于测试代码，可能在某些组织下会有更高的要求（如不能存在敏感信息等），如组织有这样的要求，则这类内容不适合放在test-common里统一复用:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">&quot;info&quot;</span> <span class="attr">monitorInterval</span>=<span class="string">&quot;10&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&#x27;%d&#123;yyyy-MM-dd,HH:mm:ss,SSSXXX&#125;(%C:%L):%4p%X[%t#%T]--&gt;%m%n&#x27;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2><span id="ce-shi-shou-duan">测试手段</span><a href="#ce-shi-shou-duan" class="header-anchor">#</a></h2><h3><span id="li-yong-restassured-duan-dao-duan-ce-shi-http-jie-kou">利用RestAssured端到端测试http接口</span><a href="#li-yong-restassured-duan-dao-duan-ce-shi-http-jie-kou" class="header-anchor">#</a></h3><p>添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.rest-assured<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rest-assured<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>为了在SpringBoot测试中使用 <strong><code>RestAssured</code></strong>, 需要配置端口 <strong>webEnvironment &#x3D; SpringBootTest.WebEnvironment.RANDOM_PORT</strong>。如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyRestControllerTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LocalServerPort</span></span><br><span class="line">    <span class="type">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        RestAssured.port = port;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>随后可以使用RestAssured来请求接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RestAssured.given().contentType(ContentType.JSON).body(<span class="string">&quot;&#123;&#125;&quot;</span>).post(<span class="string">&quot;url&quot;</span>).then().statusCode(<span class="number">200</span>);</span><br></pre></td></tr></table></figure>

<h2><span id="yi-lai-zu-jian">依赖组件</span><a href="#yi-lai-zu-jian" class="header-anchor">#</a></h2><h3><span id="mariadb">mariadb</span><a href="#mariadb" class="header-anchor">#</a></h3><p>mariadb可以使用mariadb4j</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.vorburger.mariaDB4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mariaDB4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>书写Extension并使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ch.vorburger.mariadb4j.DB;</span><br><span class="line"><span class="keyword">import</span> ch.vorburger.mariadb4j.DBConfigurationBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.extension.AfterAllCallback;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.extension.BeforeAllCallback;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.extension.ExtensionContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MariaDBExtension</span> <span class="keyword">implements</span> <span class="title class_">BeforeAllCallback</span>, AfterAllCallback &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DB database;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeAll</span><span class="params">(ExtensionContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">DBConfigurationBuilder</span> <span class="variable">configBuilder</span> <span class="operator">=</span> DBConfigurationBuilder.newBuilder();</span><br><span class="line">        configBuilder.setPort(<span class="number">3306</span>);</span><br><span class="line">        database = DB.newEmbeddedDB(configBuilder.build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterAll</span><span class="params">(ExtensionContext context)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (database != <span class="literal">null</span>) &#123;</span><br><span class="line">            database.stop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="ignite">ignite</span><a href="#ignite" class="header-anchor">#</a></h3><p>Ignite可以使用现有的junit5集成</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.github.embedded-middleware<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>embedded-ignite-junit5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以直接使用EmbeddedIgniteExtension，还可以使用EmbeddedIgnitePorts自定义Ignite的关键端口号</p>
]]></content>
  </entry>
  <entry>
    <title>SpringCloud ZooKeeper 详解，以及与Go、Rust等非Java服务的集成</title>
    <url>/springcloud-zookeeper/</url>
    <content><![CDATA[<p>ZooKeeper，是一个开源的分布式协调服务，不仅支持分布式选举、任务分配，还可以用于微服务的注册中心和配置中心。本文，我们将深入探讨ZooKeeper用做微服务注册中心的场景。</p>
<h1><span id="zookeeper-zhong-de-fu-wu-zhu-ce-lu-jing">ZooKeeper中的服务注册路径</span><a href="#zookeeper-zhong-de-fu-wu-zhu-ce-lu-jing" class="header-anchor">#</a></h1><p>SpringCloud ZooKeeper遵循特定的路径结构进行服务注册</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/services/$&#123;spring.application.name&#125;/$&#123;serviceId&#125;</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/services/provider-service/d87a3891-1173-45a0-bdfa-a1b60c71ef4e</span><br></pre></td></tr></table></figure>

<p><code>/services</code>和<code>/$&#123;spring.application.name&#125;</code>是ZooKeeper中的永久节点，<code>/$&#123;serviceId&#125;</code>是临时节点，当服务下线时，ZooKeeper会自动删除该节点。</p>
<p>注：当微服务的最后一个实例下线时，SpringCloud ZooKeeper框架会删除<code>/$&#123;spring.application.name&#125;</code>节点。</p>
<h1><span id="zookeeper-zhong-de-fu-wu-zhu-ce-shu-ju">ZooKeeper中的服务注册数据</span><a href="#zookeeper-zhong-de-fu-wu-zhu-ce-shu-ju" class="header-anchor">#</a></h1><p>下面是一个典型的服务注册内容示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;provider-service&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;d87a3891-1173-45a0-bdfa-a1b60c71ef4e&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span><span class="string">&quot;192.168.0.105&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span><span class="number">8080</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sslPort&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;payload&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@class&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.springframework.cloud.zookeeper.discovery.ZookeeperInstance&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;provider-service&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;provider-service&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;metadata&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;instance_status&quot;</span><span class="punctuation">:</span><span class="string">&quot;UP&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;registrationTimeUTC&quot;</span><span class="punctuation">:</span><span class="number">1695401004882</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;serviceType&quot;</span><span class="punctuation">:</span><span class="string">&quot;DYNAMIC&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;uriSpec&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;parts&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;scheme&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;://&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;address&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;:&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;port&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;variable&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>其中，address、port和uriSpec是最核心的数据。uriSpec中的parts区分了哪些内容是可变的，哪些是固定的。</p>
<h1><span id="springcloud-fu-wu-shi-yong-openfeign-hu-xiang-diao-yong">SpringCloud 服务使用OpenFeign互相调用</span><a href="#springcloud-fu-wu-shi-yong-openfeign-hu-xiang-diao-yong" class="header-anchor">#</a></h1><p>一旦两个微服务都注册到了ZooKeeper，那么它们就可以通过OpenFeign互相调用了。简单的示例如下</p>
<h2><span id="fu-wu-ti-gong-zhe">服务提供者</span><a href="#fu-wu-ti-gong-zhe" class="header-anchor">#</a></h2><h3><span id="chuang-jian-springboot-xiang-mu">创建SpringBoot项目</span><a href="#chuang-jian-springboot-xiang-mu" class="header-anchor">#</a></h3><p>创建SpringBoot项目，并添加<strong>spring-cloud-starter-zookeeper-discovery</strong>和<strong>spring-boot-starter-web</strong>依赖。</p>
<h3><span id="pei-zhi-application-yaml">配置application.yaml</span><a href="#pei-zhi-application-yaml" class="header-anchor">#</a></h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">provider-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="string">localhost:2181</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8082</span></span><br></pre></td></tr></table></figure>

<h3><span id="zhu-ce-dao-zookeeper">注册到ZooKeeper</span><a href="#zhu-ce-dao-zookeeper" class="header-anchor">#</a></h3><p>在启动类上添加<code>@EnableDiscoveryClient</code>注解。</p>
<h3><span id="chuang-jian-yi-ge-jian-dan-de-rest-jie-kou">创建一个简单的REST接口</span><a href="#chuang-jian-yi-ge-jian-dan-de-rest-jie-kou" class="header-anchor">#</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProviderController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello from Provider Service!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2><span id="fu-wu-xiao-fei-zhe">服务消费者</span><a href="#fu-wu-xiao-fei-zhe" class="header-anchor">#</a></h2><h3><span id="chuang-jian-springboot-xiang-mu">创建SpringBoot项目</span><a href="#chuang-jian-springboot-xiang-mu" class="header-anchor">#</a></h3><p>创建SpringBoot项目，并添加<strong>spring-cloud-starter-zookeeper-discovery</strong>、<strong>spring-cloud-starter-openfeign</strong>和<strong>spring-boot-starter-web</strong>依赖。</p>
<h3><span id="pei-zhi-application-yaml">配置application.yaml</span><a href="#pei-zhi-application-yaml" class="header-anchor">#</a></h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">consumer-service</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">zookeeper:</span></span><br><span class="line">      <span class="attr">connect-string:</span> <span class="string">localhost:2181</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure>

<h3><span id="zhu-ce-dao-zookeeper">注册到ZooKeeper</span><a href="#zhu-ce-dao-zookeeper" class="header-anchor">#</a></h3><p>在启动类上添加<code>@EnableDiscoveryClient</code>注解。</p>
<h3><span id="chuang-jian-yi-ge-rest-jie-kou-tong-guo-openfeign-diao-yong-fu-wu-ti-gong-zhe">创建一个REST接口，通过OpenFeign调用服务提供者</span><a href="#chuang-jian-yi-ge-rest-jie-kou-tong-guo-openfeign-diao-yong-fu-wu-ti-gong-zhe" class="header-anchor">#</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProviderClient providerClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getHello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> providerClient.hello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2><span id="yun-xing-xiao-guo">运行效果</span><a href="#yun-xing-xiao-guo" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl localhost:8081/getHello -i</span><br><span class="line">HTTP/1.1 200</span><br><span class="line">Content-Type: text/plain;charset=UTF-8</span><br><span class="line">Content-Length: 28</span><br><span class="line">Date: Wed, 18 Oct 2023 02:40:57 GMT</span><br><span class="line"></span><br><span class="line">Hello from Provider Service!</span><br></pre></td></tr></table></figure>

<h1><span id="fei-java-fu-wu-zai-springcloud-zookeeper-zhong-zhu-ce">非Java服务在SpringCloud ZooKeeper中注册</span><a href="#fei-java-fu-wu-zai-springcloud-zookeeper-zhong-zhu-ce" class="header-anchor">#</a></h1><p>可能有些读者乍一看觉得有点奇怪，为什么要在SpringCloud ZooKeeper中注册非Java服务呢？没有这个应用场景。</p>
<p>当然，这样的场景比较少，常见于大部分项目都是用SpringCloud开发，但有少部分项目因为种种原因，不得不使用其他语言开发，比如Go、Rust等。这时候，我们就需要在SpringCloud ZooKeeper中注册非Java服务了。</p>
<p>对于非JVM语言开发的服务，只需确保它们提供了Rest&#x2F;HTTP接口并正确地注册到ZooKeeper，就可以被SpringCloud的Feign客户端所调用。</p>
<h2><span id="go-fu-wu-zai-springcloud-zookeeper">Go服务在SpringCloud ZooKeeper</span><a href="#go-fu-wu-zai-springcloud-zookeeper" class="header-anchor">#</a></h2><p>example代码组织：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── consumer</span><br><span class="line">│   └── consumer.go</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">└── provider</span><br><span class="line">    └── provider.go</span><br></pre></td></tr></table></figure>

<h3><span id="go-fu-wu-ti-gong-zhe-zai-springcloud-zookeeper">Go服务提供者在SpringCloud ZooKeeper</span><a href="#go-fu-wu-ti-gong-zhe-zai-springcloud-zookeeper" class="header-anchor">#</a></h3><p>注：该代码的质量为demo级别，实际生产环境需要更加严谨的代码，如重连机制、超时机制、更优秀的服务ID生成算法等。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/samuel/go-zookeeper/zk&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	zkServers = <span class="string">&quot;localhost:2181&quot;</span> <span class="comment">// Zookeeper服务器地址</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 初始化gin框架</span></span><br><span class="line">	r := gin.Default()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 添加一个简单的hello接口</span></span><br><span class="line">	r.GET(<span class="string">&quot;/hello&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">		c.String(http.StatusOK, <span class="string">&quot;Hello from Go service!&quot;</span>)</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 注册服务到zookeeper</span></span><br><span class="line">	registerToZookeeper()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 启动gin服务器</span></span><br><span class="line">	r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">registerToZookeeper</span><span class="params">()</span></span> &#123;</span><br><span class="line">	conn, _, err := zk.Connect([]<span class="type">string</span>&#123;zkServers&#125;, time.Second*<span class="number">5</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 检查并创建父级路径</span></span><br><span class="line">	ensurePathExists(conn, <span class="string">&quot;/services&quot;</span>)</span><br><span class="line">	ensurePathExists(conn, <span class="string">&quot;/services/provider-service&quot;</span>)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 构建注册的数据</span></span><br><span class="line">	data, _ := json.Marshal(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">		<span class="string">&quot;name&quot;</span>:        <span class="string">&quot;provider-service&quot;</span>,</span><br><span class="line">		<span class="string">&quot;address&quot;</span>:     <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">		<span class="string">&quot;port&quot;</span>:        <span class="number">8080</span>,</span><br><span class="line">		<span class="string">&quot;sslPort&quot;</span>:     <span class="literal">nil</span>,</span><br><span class="line">		<span class="string">&quot;payload&quot;</span>:     <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;<span class="string">&quot;@class&quot;</span>: <span class="string">&quot;org.springframework.cloud.zookeeper.discovery.ZookeeperInstance&quot;</span>, <span class="string">&quot;id&quot;</span>: <span class="string">&quot;provider-service&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;provider-service&quot;</span>, <span class="string">&quot;metadata&quot;</span>: <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;instance_status&quot;</span>: <span class="string">&quot;UP&quot;</span>&#125;&#125;,</span><br><span class="line">		<span class="string">&quot;serviceType&quot;</span>: <span class="string">&quot;DYNAMIC&quot;</span>,</span><br><span class="line">		<span class="string">&quot;uriSpec&quot;</span>: <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">			<span class="string">&quot;parts&quot;</span>: []<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line">				&#123;<span class="string">&quot;value&quot;</span>: <span class="string">&quot;scheme&quot;</span>, <span class="string">&quot;variable&quot;</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">				&#123;<span class="string">&quot;value&quot;</span>: <span class="string">&quot;://&quot;</span>, <span class="string">&quot;variable&quot;</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">				&#123;<span class="string">&quot;value&quot;</span>: <span class="string">&quot;address&quot;</span>, <span class="string">&quot;variable&quot;</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">				&#123;<span class="string">&quot;value&quot;</span>: <span class="string">&quot;:&quot;</span>, <span class="string">&quot;variable&quot;</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">				&#123;<span class="string">&quot;value&quot;</span>: <span class="string">&quot;port&quot;</span>, <span class="string">&quot;variable&quot;</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">			&#125;,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;)</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 在zookeeper中注册服务</span></span><br><span class="line">	path := <span class="string">&quot;/services/provider-service/&quot;</span> + generateServiceId()</span><br><span class="line">	_, err = conn.Create(path, data, zk.FlagEphemeral, zk.WorldACL(zk.PermAll))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">&quot;register service error: %s&quot;</span>, err)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		log.Println(path)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ensurePathExists</span><span class="params">(conn *zk.Conn, path <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">	exists, _, err := conn.Exists(path)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">&quot;check path error: %s&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> !exists &#123;</span><br><span class="line">		_, err := conn.Create(path, []<span class="type">byte</span>&#123;&#125;, <span class="number">0</span>, zk.WorldACL(zk.PermAll))</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			log.Fatalf(<span class="string">&quot;create path error: %s&quot;</span>, err)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generateServiceId</span><span class="params">()</span></span> <span class="type">string</span> &#123;</span><br><span class="line">	<span class="comment">// 这里简化为使用当前时间生成ID，实际生产环境可能需要更复杂的算法</span></span><br><span class="line">	<span class="keyword">return</span> fmt.Sprintf(<span class="string">&quot;%d&quot;</span>, time.Now().UnixNano())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用效果</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl localhost:8081/getHello -i</span><br><span class="line">HTTP/1.1 200</span><br><span class="line">Content-Type: text/plain;charset=UTF-8</span><br><span class="line">Content-Length: 28</span><br><span class="line">Date: Wed, 18 Oct 2023 02:43:52 GMT</span><br><span class="line"></span><br><span class="line">Hello from Go Service!</span><br></pre></td></tr></table></figure>

<h2><span id="go-fu-wu-xiao-fei-zhe-zai-springcloud-zookeeper">Go服务消费者在SpringCloud ZooKeeper</span><a href="#go-fu-wu-xiao-fei-zhe-zai-springcloud-zookeeper" class="header-anchor">#</a></h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;encoding/json&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;io&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="string">&quot;github.com/samuel/go-zookeeper/zk&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">	zkServers = <span class="string">&quot;localhost:2181&quot;</span> <span class="comment">// Zookeeper服务器地址</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> conn *zk.Conn</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 初始化ZooKeeper连接</span></span><br><span class="line">	initializeZookeeper()</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取服务信息</span></span><br><span class="line">	serviceInfo := getServiceInfo(<span class="string">&quot;/services/provider-service&quot;</span>)</span><br><span class="line">	fmt.Println(<span class="string">&quot;Fetched service info:&quot;</span>, serviceInfo)</span><br><span class="line"></span><br><span class="line">	port := <span class="type">int</span>(serviceInfo[<span class="string">&quot;port&quot;</span>].(<span class="type">float64</span>))</span><br><span class="line"></span><br><span class="line">	resp, err := http.Get(fmt.Sprintf(<span class="string">&quot;http://%s:%d/hello&quot;</span>, serviceInfo[<span class="string">&quot;address&quot;</span>], port))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	body, err := io.ReadAll(resp.Body)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	fmt.Println(<span class="type">string</span>(body))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">initializeZookeeper</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> err <span class="type">error</span></span><br><span class="line">	conn, _, err = zk.Connect([]<span class="type">string</span>&#123;zkServers&#125;, time.Second*<span class="number">5</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">&quot;Failed to connect to ZooKeeper: %s&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getServiceInfo</span><span class="params">(path <span class="type">string</span>)</span></span> <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125; &#123;</span><br><span class="line">	children, _, err := conn.Children(path)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">&quot;Failed to get children of %s: %s&quot;</span>, path, err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(children) == <span class="number">0</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">&quot;No services found under %s&quot;</span>, path)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 这里只获取第一个服务节点的信息作为示例，实际上可以根据负载均衡策略选择一个服务节点</span></span><br><span class="line">	data, _, err := conn.Get(fmt.Sprintf(<span class="string">&quot;%s/%s&quot;</span>, path, children[<span class="number">0</span>]))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">&quot;Failed to get data of %s: %s&quot;</span>, children[<span class="number">0</span>], err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> serviceInfo <span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">	<span class="keyword">if</span> err := json.Unmarshal(data, &amp;serviceInfo); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Fatalf(<span class="string">&quot;Failed to unmarshal data: %s&quot;</span>, err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> serviceInfo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2><span id="rust-fu-wu-zai-springcloud-zookeeper">Rust服务在SpringCloud ZooKeeper</span><a href="#rust-fu-wu-zai-springcloud-zookeeper" class="header-anchor">#</a></h2><p>example代码组织：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── Cargo.lock</span><br><span class="line">├── Cargo.toml</span><br><span class="line">└── src</span><br><span class="line">    └── bin</span><br><span class="line">        ├── consumer.rs</span><br><span class="line">        └── provider.rs</span><br></pre></td></tr></table></figure>

<h3><span id="rust-fu-wu-ti-gong-zhe-zai-springcloud-zookeeper">Rust服务提供者在SpringCloud ZooKeeper</span><a href="#rust-fu-wu-ti-gong-zhe-zai-springcloud-zookeeper" class="header-anchor">#</a></h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"><span class="keyword">use</span> std::time::Duration;</span><br><span class="line"><span class="keyword">use</span> serde_json::Value;</span><br><span class="line"><span class="keyword">use</span> warp::Filter;</span><br><span class="line"><span class="keyword">use</span> zookeeper::&#123;Acl, CreateMode, WatchedEvent, Watcher, ZooKeeper&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> ZK_SERVERS: &amp;<span class="type">str</span> = <span class="string">&quot;localhost:2181&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">mut</span> ZK_CONN: <span class="type">Option</span>&lt;ZooKeeper&gt; = <span class="literal">None</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LoggingWatcher</span>;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Watcher</span> <span class="keyword">for</span> <span class="title class_">LoggingWatcher</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">handle</span>(&amp;<span class="keyword">self</span>, e: WatchedEvent) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;WatchedEvent: &#123;:?&#125;&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[tokio::main]</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">hello</span> = warp::path!(<span class="string">&quot;hello&quot;</span>).<span class="title function_ invoke__">map</span>(|| warp::reply::<span class="title function_ invoke__">html</span>(<span class="string">&quot;Hello from Rust service!&quot;</span>));</span><br><span class="line">    <span class="title function_ invoke__">register_to_zookeeper</span>().<span class="keyword">await</span>;</span><br><span class="line"></span><br><span class="line">    warp::<span class="title function_ invoke__">serve</span>(hello).<span class="title function_ invoke__">run</span>(([<span class="number">127</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>], <span class="number">8083</span>)).<span class="keyword">await</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">register_to_zookeeper</span>() &#123;</span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">        ZK_CONN = <span class="title function_ invoke__">Some</span>(ZooKeeper::<span class="title function_ invoke__">connect</span>(ZK_SERVERS, Duration::<span class="title function_ invoke__">from_secs</span>(<span class="number">5</span>), LoggingWatcher).<span class="title function_ invoke__">unwrap</span>());</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">zk</span> = ZK_CONN.<span class="title function_ invoke__">as_ref</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">path</span> = <span class="string">&quot;/services/provider-service&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> zk.<span class="title function_ invoke__">exists</span>(path, <span class="literal">false</span>).<span class="title function_ invoke__">unwrap</span>().<span class="title function_ invoke__">is_none</span>() &#123;</span><br><span class="line">            zk.<span class="title function_ invoke__">create</span>(path, <span class="built_in">vec!</span>[], Acl::<span class="title function_ invoke__">open_unsafe</span>().<span class="title function_ invoke__">clone</span>(), CreateMode::Persistent).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">service_data</span> = <span class="title function_ invoke__">get_service_data</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">service_path</span> = <span class="built_in">format!</span>(<span class="string">&quot;&#123;&#125;/&#123;&#125;&quot;</span>, path, <span class="title function_ invoke__">generate_service_id</span>());</span><br><span class="line">        zk.<span class="title function_ invoke__">create</span>(&amp;service_path, service_data, Acl::<span class="title function_ invoke__">open_unsafe</span>().<span class="title function_ invoke__">clone</span>(), CreateMode::Ephemeral).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">get_service_data</span>() <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;<span class="type">u8</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">data</span>: HashMap&lt;&amp;<span class="type">str</span>, Value&gt; = HashMap::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    data.<span class="title function_ invoke__">insert</span>(<span class="string">&quot;name&quot;</span>, serde_json::Value::<span class="title function_ invoke__">String</span>(<span class="string">&quot;provider-service&quot;</span>.<span class="title function_ invoke__">to_string</span>()));</span><br><span class="line">    data.<span class="title function_ invoke__">insert</span>(<span class="string">&quot;address&quot;</span>, serde_json::Value::<span class="title function_ invoke__">String</span>(<span class="string">&quot;127.0.0.1&quot;</span>.<span class="title function_ invoke__">to_string</span>()));</span><br><span class="line">    data.<span class="title function_ invoke__">insert</span>(<span class="string">&quot;port&quot;</span>, serde_json::Value::<span class="title function_ invoke__">Number</span>(<span class="number">8083</span>.<span class="title function_ invoke__">into</span>()));</span><br><span class="line">    serde_json::<span class="title function_ invoke__">to_vec</span>(&amp;data).<span class="title function_ invoke__">unwrap</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">generate_service_id</span>() <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">    <span class="built_in">format!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, chrono::Utc::<span class="title function_ invoke__">now</span>().<span class="title function_ invoke__">timestamp_nanos</span>())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="rust-fu-wu-xiao-fei-zhe-zai-springcloud-zookeeper">Rust服务消费者在SpringCloud ZooKeeper</span><a href="#rust-fu-wu-xiao-fei-zhe-zai-springcloud-zookeeper" class="header-anchor">#</a></h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"><span class="keyword">use</span> std::time::Duration;</span><br><span class="line"><span class="keyword">use</span> zookeeper::&#123;WatchedEvent, Watcher, ZooKeeper&#125;;</span><br><span class="line"><span class="keyword">use</span> reqwest;</span><br><span class="line"><span class="keyword">use</span> serde_json::Value;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> ZK_SERVERS: &amp;<span class="type">str</span> = <span class="string">&quot;localhost:2181&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LoggingWatcher</span>;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Watcher</span> <span class="keyword">for</span> <span class="title class_">LoggingWatcher</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">handle</span>(&amp;<span class="keyword">self</span>, e: WatchedEvent) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;WatchedEvent: &#123;:?&#125;&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[tokio::main]</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">provider_data</span> = <span class="title function_ invoke__">fetch_provider_data_from_zookeeper</span>().<span class="keyword">await</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">response</span> = <span class="title function_ invoke__">request_provider</span>(&amp;provider_data).<span class="keyword">await</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Response from provider: &#123;&#125;&quot;</span>, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">fetch_provider_data_from_zookeeper</span>() <span class="punctuation">-&gt;</span> HashMap&lt;<span class="type">String</span>, Value&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">zk</span> = ZooKeeper::<span class="title function_ invoke__">connect</span>(ZK_SERVERS, Duration::<span class="title function_ invoke__">from_secs</span>(<span class="number">5</span>), LoggingWatcher).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">children</span> = zk.<span class="title function_ invoke__">get_children</span>(<span class="string">&quot;/services/provider-service&quot;</span>, <span class="literal">false</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    <span class="keyword">if</span> children.<span class="title function_ invoke__">is_empty</span>() &#123;</span><br><span class="line">        <span class="built_in">panic!</span>(<span class="string">&quot;No provider services found!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// For simplicity, we just take the first child (i.e., service instance). </span></span><br><span class="line">    <span class="comment">// In a real-world scenario, load balancing strategies would determine which service instance to use.</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">data</span> = zk.<span class="title function_ invoke__">get_data</span>(&amp;<span class="built_in">format!</span>(<span class="string">&quot;/services/provider-service/&#123;&#125;&quot;</span>, children[<span class="number">0</span>]), <span class="literal">false</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    serde_json::<span class="title function_ invoke__">from_slice</span>(&amp;data.<span class="number">0</span>).<span class="title function_ invoke__">unwrap</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">request_provider</span>(provider_data: &amp;HashMap&lt;<span class="type">String</span>, Value&gt;) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">address</span> = provider_data.<span class="title function_ invoke__">get</span>(<span class="string">&quot;address&quot;</span>).<span class="title function_ invoke__">unwrap</span>().<span class="title function_ invoke__">as_str</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">port</span> = provider_data.<span class="title function_ invoke__">get</span>(<span class="string">&quot;port&quot;</span>).<span class="title function_ invoke__">unwrap</span>().<span class="title function_ invoke__">as_i64</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">url</span> = <span class="built_in">format!</span>(<span class="string">&quot;http://&#123;&#125;:&#123;&#125;/hello&quot;</span>, address, port);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">response</span> = reqwest::<span class="title function_ invoke__">get</span>(&amp;url).<span class="keyword">await</span>.<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    response.<span class="title function_ invoke__">text</span>().<span class="keyword">await</span>.<span class="title function_ invoke__">unwrap</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>微服务广播模式实践</title>
    <url>/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%B9%BF%E6%92%AD%E6%A8%A1%E5%BC%8F%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<p>微服务广播模式，指的是在微服务多实例部署的场景下，将消息广播到多个微服务实例的一种模式。</p>
<p><img src="/images/20230601/p1.png" alt="Untitled"></p>
<p>广播模式，一般用来维护微服务的内存数据，根据数据类型的不同，有助于解决两类问题。通常广播模式会使用支持发布订阅的消息中间件实现（如Redis、Kafka、Pulsar等），本文也基于消息中间件进行讨论。</p>
<h2><span id="li-yong-guang-bo-mo-shi-wei-hu-yi-zhi-de-huan-cun">利用广播模式维护一致的缓存</span><a href="#li-yong-guang-bo-mo-shi-wei-hu-yi-zhi-de-huan-cun" class="header-anchor">#</a></h2><p>这应该是广播模式利用最多的一种场景，假想一个拥有海量用户的电商网站、或是一个亿级设备连接的IoT平台。势必会存在一些缓存数据，像是用户的购物车信息，或是设备的密钥缓存。如果没有广播模式，可能会存在这样的问题</p>
<p><img src="/images/20230601/p2.png" alt="Untitled"></p>
<p>当用户更新了它的购物车之后，微服务实例1的数据发生了更新，数据库的数据也成功更新。但是微服务实例2中的缓存数据未能更新，那么如果用户的请求均衡到了实例2，就会发生意想不到的后果。</p>
<p>这种情况下我们可以让微服务1在广播通道中发送一个缓存的invalidate消息，将微服务实例2中该用户的缓存清零，使得微服务实例2在下一次处理该用户的请求时，从数据库中读取最新的消息。</p>
<p>使用该模式需要注意的点：</p>
<ul>
<li>每个微服务实例应该使用不同的消费组，可以通过微服务的IP、主机名、UUID等拼装成订阅组名称，这才称得上广播之名</li>
<li>微服务消费消息的时候，应从Latest开始消费，避免从Earliest开始消费无用的缓存清理消息</li>
<li>由于每一次微服务重启都会产生一个新的消费组，需要注意消费组的老化，可以通过消息中间件自带的不活跃消费组老化能力兜底，建议通过gracefulExit、监听kill信号等机制来主动删除消费组信息</li>
</ul>
<p>为什么说消费组老化比较重要呢，因为很多监控系统都会根据消费组的积压来做告警，很容易产生误告警。</p>
<h2><span id="li-yong-guang-bo-mo-shi-wei-hu-nei-cun-zhong-de-shu-ju">利用广播模式维护内存中的数据</span><a href="#li-yong-guang-bo-mo-shi-wei-hu-nei-cun-zhong-de-shu-ju" class="header-anchor">#</a></h2><p>这种模式相对比较少见，常见于key的基数不是很大，能够将数据完整地存储在内存中，比如电商平台的企业卖家个数、物联网平台的用户个数等，并且对数据的一致性要求不是很高（因为广播模式情况下，对于两个微服务实例来说没有一致性保障）。像Apache Pulsar设计的TableView，在我看来，就是做这个事的一个最佳实践。Pulsar内部大量使用了topic存储数据，就是采用这个方式。</p>
<p>使用该模式需要注意的点：</p>
<ul>
<li>同上，需要使用不同的消费组名称</li>
<li>微服务消费消息的时候，应该从Earliest开始消费，保证所有微服务内存中的消息视图一致</li>
<li>同上，需要注意消费组的老化</li>
</ul>
<h2><span id="wei-shi-me-xu-yao-xiao-fei-zu-lao-hua-zuo-wei-bao-di-shou-duan">为什么需要消费组老化作为保底手段</span><a href="#wei-shi-me-xu-yao-xiao-fei-zu-lao-hua-zuo-wei-bao-di-shou-duan" class="header-anchor">#</a></h2><p>因为在极端场景下，无论是graceful的代码，还是监听kill信号的代码，都不能保证代码百分百地被执行。需要兜底。</p>
<h2><span id="kafka-xiao-fei-zu-lao-hua">Kafka消费组老化</span><a href="#kafka-xiao-fei-zu-lao-hua" class="header-anchor">#</a></h2><p>Kafka通过<strong>offsets.retention.minutes</strong>参数控制消费组中offsets保留时间，在此时间内如果没有提交offset，offsets将会被删除。Kafka判定消息组中没有在线的消费者（如empty状态），且没有offsets时，将会删除此消费组。</p>
<h2><span id="pulsar-xiao-fei-zu-lao-hua">Pulsar消费组老化</span><a href="#pulsar-xiao-fei-zu-lao-hua" class="header-anchor">#</a></h2><p>pulsar的消费组老化策略更加灵活，可以配置到namespace级别。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin/pulsar-admin namespaces | grep expiration</span><br><span class="line">    get-subscription-expiration-time      Get subscription expiration time for </span><br><span class="line">      Usage: get-subscription-expiration-time [options] tenant/namespace</span><br><span class="line">    set-subscription-expiration-time      Set subscription expiration time for </span><br><span class="line">      Usage: set-subscription-expiration-time [options] tenant/namespace</span><br><span class="line">            Subscription expiration time in minutes</span><br><span class="line">    remove-subscription-expiration-time      Remove subscription expiration </span><br><span class="line">      Usage: remove-subscription-expiration-time [options] tenant/namespace</span><br></pre></td></tr></table></figure>

<p>这里注意要合理地配置消费组的老化时间，在pulsar的当前版本（2.11版本）下，catch up读，也就是说消费组平时积压量不大。如果将消费组的老化时间配置大于等于消息的老化时间，会出现消费组老化不了的现象。</p>
<p>当然，由于消费组和消息老化都是定时任务，预估时间时，要考虑一定的buffer。</p>
<p>这里让我们稍稍dive一下原理，消费组的老化是通过判断Cursor游标的LastActive time来判断能否老化的。如果该消费组的游标位置到达了消息老化区域，被老化掉了，消费组的游标位置就会强制更新到一个可用的位置，这个时候会更新游标的LastActive time到当前时间，周而复始，导致消费组无法老化。举个🌰</p>
<p>假设消费组的老化时间为4h，消息的老化时间为3h，就可能会发生这样的事情</p>
<p><img src="/images/20230601/p3.png" alt="Untitled"></p>
<h2><span id="zong-jie">总结</span><a href="#zong-jie" class="header-anchor">#</a></h2><p>广播模式在微服务架构中起到了重要的角色，尤其是在需要在微服务实例之间同步数据的场景中，它具有显著的优势。它能够帮助维护内存数据的缓存一致性。希望本篇文章能提供您全面的广播模式的知识。</p>
]]></content>
  </entry>
  <entry>
    <title>打造可商用的Java程序之可维护性</title>
    <url>/%E6%89%93%E9%80%A0%E5%8F%AF%E5%95%86%E7%94%A8%E7%9A%84Java%E7%A8%8B%E5%BA%8F%E4%B9%8B%E5%8F%AF%E7%BB%B4%E6%8A%A4%E6%80%A7/</url>
    <content><![CDATA[<h2><span id="zai-zhu-han-shu-zhong-bu-huo-wei-chu-li-de-yi-chang">在主函数中捕获未处理的异常</span><a href="#zai-zhu-han-shu-zhong-bu-huo-wei-chu-li-de-yi-chang" class="header-anchor">#</a></h2><p>在主函数中捕获未处理的异常，防止程序崩溃，同时记录日志，方便排查问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UncaughtExceptionHandle</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Thread.setDefaultUncaughtExceptionHandler((t, e) -&gt; log.error(<span class="string">&quot;Uncaught exception: &quot;</span>, e));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>提升网络协议服务器的定位能力</title>
    <url>/%E6%8F%90%E5%8D%87%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%AE%9A%E4%BD%8D%E8%83%BD%E5%8A%9B/</url>
    <content><![CDATA[<p>近期，我再次涉足于协议服务器相关的工作领域，致力于定位并解决各种问题。简单总结一些心得给大家。如果想要定位出协议服务器的问题，那么这些能力可能至关重要。</p>
<p>注：我这里比较偏向协议本身的问题，不涉及一些通用的网络问题（如网络吞吐量上不去、响应时间长等等）</p>
<h2><span id="dui-cpu-he-nei-cun-de-tong-yong-fen-xi-neng-li">对CPU和内存的通用分析能力</span><a href="#dui-cpu-he-nei-cun-de-tong-yong-fen-xi-neng-li" class="header-anchor">#</a></h2><p>首先，网络协议服务器本质上也是一个应用程序。因此，需要具备一些关于CPU和内存的通用分析能力。PU&#x2F;内存火焰图，内存dump分析，锁分析，以及远程调试（研发态手段）这些手段都要具备</p>
<h2><span id="ri-zhi-he-wang-luo-lian-jie-de-guan-lian">日志和网络连接的关联</span><a href="#ri-zhi-he-wang-luo-lian-jie-de-guan-lian" class="header-anchor">#</a></h2><p>为了有效地定位网络问题，日志需要精确到毫秒级别。没有毫秒级别的精度，定位网络问题就会变得极其困难。所以golang的logrus默认只有秒级别，我觉得不太好，用rfc3339就很好。</p>
<p>在打印日志时，我们不能太过随意。例如，“connection lost”这样的日志，在调试阶段可能看似无大碍，但当真正的业务量和连接数大幅增加时，这种模糊的日志信息就会让人束手无策。</p>
<p>理想的日志至少应包含网络地址信息，这样我们可以根据网络地址和时间点来查阅日志。如果有抓包的话，那就更好了，可以从中获取大量信息。</p>
<p>当然，我们并不需要在所有的日志中都包含网络地址信息。例如，一旦完成了用户身份的鉴定，我们就可以打印用户的身份信息，这样更方便与后续的业务流程进行整合。如果需要查询网络地址信息，可以回溯到建立连接时的日志。举个🌰</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2023-05-30 23:59:01.000 [INFO] 127.0.0.1:62345 connected</span><br><span class="line">2023-05-30 23:59:02.000 [INFO] 127.0.0.1:62345 authed, username is Wolverine</span><br><span class="line">2023-05-30 23:59:03.000 [INFO] Wolverine killed magneto</span><br></pre></td></tr></table></figure>

<p>假设一条数据链上有大量的消息呢？在现代的网络环境中，一条TCP链接可以轻易达到5M bit&#x2F;s以上的数据流。即使我们提供了时间点信息，仍然很难找到具有问题的报文（在同一秒内可能有上千条报文）。在这种情况下，就需要引入会话的ID信息。许多TCP协议会携带这种信息，换句话说，支持IO复用的协议都会有这种信息（比如MQTT的messageId，Kafka的correlationId等）。此类信息应该被正确地打印在日志中。</p>
<h2><span id="zhen-dui-te-zheng-zhi-de-gen-zong-neng-li">针对特征值的跟踪能力</span><a href="#zhen-dui-te-zheng-zhi-de-gen-zong-neng-li" class="header-anchor">#</a></h2><p>你可能已经在调试日志中包含了非常详尽的信息，然而在实际环境中，这可能并没有太大用处。</p>
<p>原因是一旦全面开启debug日志，性能消耗会大幅增加。除非你的系统性能冗余极大，否则根本无法正常运行。</p>
<p>为此，我们可以提升debug的能力，针对特定的特征值开启debug，例如网络地址、mqtt的clientId、消息中间件的topic等。应用程序仅针对这些特征值打印详细的日志，这样的开销就相对较小，而且这种方法已经在生产环境中被我多次验证。</p>
<h2><span id="jiang-wang-luo-bao-wen-yu-ye-wu-trace-guan-lian-qi-lai">将网络报文与业务trace关联起来</span><a href="#jiang-wang-luo-bao-wen-yu-ye-wu-trace-guan-lian-qi-lai" class="header-anchor">#</a></h2><p>在网络协议服务器中，我们需要将网络报文与业务trace关联起来。这种关联能力的实现可以大大提高我们定位业务端到端问题的效率和准确性。 理想情况下，我们应该能够根据网络报文来查找相关的业务trace，反之亦然，根据业务trace来查找对应的网络报文。但这些手段都需要业务端的配合，比如在报文中携带traceId，或者在业务trace中携带网络地址信息。</p>
<p>以mqtt协议为例，可以在payload中带上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;traceId&quot;: &quot;xxxx&quot;,</span><br><span class="line">    &quot;data&quot;: &quot;xxxx&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>traceId</code>就是我们为业务trace设定的唯一标识符，而<code>data</code>则是实际的业务数据。通过在网络报文中携带这些信息，我们就可以轻松地将网络报文与其对应的业务trace关联起来。</p>
<p>然而，这种方法在研发和测试环境中实现相对容易，但在生产环境中可能会遇到更多的困难。首先，对于在网络报文中携带<code>traceId</code>这一做法，业界并未形成统一的规范和实践。这导致在生产环境，极难做到。</p>
<p>更具挑战性的是，如果你面对的是一个端到端的复杂系统，将traceId从系统的入口传递到出口可能会遇到许多难以预见的问题。例如系统不支持这类数据的专递，这就封死了这条路。</p>
<h2><span id="cha-kan-yuan-shi-bao-wen-de-neng-li">查看原始报文的能力</span><a href="#cha-kan-yuan-shi-bao-wen-de-neng-li" class="header-anchor">#</a></h2><p>查看原始报文的能力极其重要，特别是在协议栈的实现尚不成熟的情况下。如果无法查看原始报文，定位问题就会变得非常困难。我曾说过：“如果拿到了原始报文，还是无法复现问题，那我们的研发能力在哪里？”虽然这句话可能有些极端，但它准确地强调了抓包的重要性。</p>
<p>我们可以从抓包看出网络的连通性、网络的延迟、网络的吞吐量、报文的格式、报文的正确性等等。如果途径了多个网元，那么是谁的错？（一般来说，看抓包，谁先发RST，就从谁身上找原因）</p>
<p>虽然抓包的命令比较简单<em>tcpdump port 8080 -i eth0 -s0 -w my.pcap</em>就抓了，但实际想做成，最大的阻力是这两个，TLS和复杂的现网环境</p>
<p>在旧版本的TLS密钥交换算法下，只要有私钥和密码，就可以顺利解包，但现在的tls，都支持前向加密，什么叫前向加密呢？简单地来说，就是给你私钥和密码，你也解不出来。有tls debuginfo和ebpf能解决这两个问题，tls debug-info的原理是将密钥交换时的密钥输出持久化到某个地方，然后拿这个去解，实际很少见有人用这个方案。ebpf一需要linux内核高版本，同时还需要开启功能，安装kernel-debug-info，门槛也比较高。</p>
<p>现网环境，像抓包嗅探的这种工具，有时候可能是禁止上传的，或者即使能上传成功，也需要很长的时间。</p>
<p>也许我们可以通过“应用层抓包”来解决上述的问题，在网络层，我们支持受限的抓包能力，比如可以抓针对某个特征值（比如网络地址、messageId）的包，因为我们在应用层，可使用的过滤条件更多，更精细，输出到某个路径，这个报文的组装，完全在应用网络层，虽然看不到物理层的一些信息，但对于应用程序来说，除非我是做nat设备的，一般用不到这些信息。继续用这个报文来分析问题。实现应用层抓包，也要注意对内存的占用等等，不能因为这个功能，把整个进程搞崩溃。</p>
<h2><span id="ying-yong-ceng-zhua-bao-de-yi-xie-si-kao">应用层抓包的一些思考</span><a href="#ying-yong-ceng-zhua-bao-de-yi-xie-si-kao" class="header-anchor">#</a></h2><h3><span id="zhua-bao-di-dian-de-xuan-ze">抓包地点的选择</span><a href="#zhua-bao-di-dian-de-xuan-ze" class="header-anchor">#</a></h3><p>在应用层抓包，第一步就是确定抓包的地点。由于我们是在应用层进行操作，因此抓包地点一般位于应用程序与网络协议栈的交接处。例如，你可以在数据包刚被应用接收，还未被处理之前进行抓包，或者在数据包即将被应用发送出去，还未进入网络协议栈之前进行抓包。</p>
<h3><span id="guo-lu-tiao-jian-de-she-ding">过滤条件的设定</span><a href="#guo-lu-tiao-jian-de-she-ding" class="header-anchor">#</a></h3><p>设定过滤条件是抓包的关键，因为在实际环境中，数据流量可能非常大，如果没有过滤条件，抓包的数据量可能会非常庞大，对应用和系统的性能产生影响。在应用层，我们可以设置更多更精细的过滤条件，如网络地址、端口、协议类型、特定的字段等。这些过滤条件可以帮助我们更精确地定位问题，减少无效的数据。</p>
<h3><span id="shu-ju-cun-chu-wen-ti">数据存储问题</span><a href="#shu-ju-cun-chu-wen-ti" class="header-anchor">#</a></h3><p>将抓到的数据存储起来也是很重要的一步。可以选择将数据存储到内存或者硬盘。需要注意的是，如果选择存储到内存，要考虑到内存的大小，避免因为抓包数据过大导致内存溢出。如果选择存储到硬盘，要考虑到硬盘的读写速度和容量，避免因为抓包数据过大导致硬盘满载。</p>
<h2><span id="zong-jie">总结</span><a href="#zong-jie" class="header-anchor">#</a></h2><p>本文首先阐述了网络协议服务器的一些问题定位能力，包括CPU内存分析能力、日志和网络连接的关联能力、针对特征值的跟踪能力，以及查看原始报文的能力，也讨论了将网络报文与业务trace有效关联的重要性和实现挑战。强调了抓包的重要性和对于解密TLS报文的挑战。为了解决网络层抓包遇到的困难，我们可以考虑应用层抓包方案。最后，我们讨论了应用层抓包的一些关键问题，包括抓包地点的选择、过滤条件的设定和数据存储问题。</p>
]]></content>
  </entry>
  <entry>
    <title>敏感信息打印大全</title>
    <url>/%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%89%93%E5%8D%B0%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h2><span id="java">Java</span><a href="#java" class="header-anchor">#</a></h2><h2><span id="apache-http-client">Apache http client</span><a href="#apache-http-client" class="header-anchor">#</a></h2><h3><span id="wire-log">Wire log</span><a href="#wire-log" class="header-anchor">#</a></h3><p>Apache http client会打印请求和响应的wire log，包含请求和响应的header和body，打印在debug级别。</p>
<p>Apache http client的日志都通过<code>org.apache.http.wire</code>这个logger打印，可以通过配置这个logger来控制wire log的打印。</p>
<p>注：Apache http client默认通过apache common logging来打印日志，可以通过配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>来使用slf4j来打印日志。</p>
]]></content>
  </entry>
  <entry>
    <title>线程锁导致的kafka客户端超时问题</title>
    <url>/%E7%BA%BF%E7%A8%8B%E9%94%81%E5%AF%BC%E8%87%B4%E7%9A%84kafka%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2><span id="wen-ti-bei-jing">问题背景</span><a href="#wen-ti-bei-jing" class="header-anchor">#</a></h2><p>有一个环境的kafka client发送数据有部分超时，拓扑图也非常简单</p>
<p><img src="/images/20230708/p1.png" alt="Untitled"></p>
<h2><span id="ding-wei-li-cheng">定位历程</span><a href="#ding-wei-li-cheng" class="header-anchor">#</a></h2><p>我们先对客户端的环境及JVM情况进行了排查，从JVM所在的虚拟机到kafka server的网络正常，垃圾回收（GC）时间也在预期范围内，没有出现异常。</p>
<p>紧接着，我们把目光转向了kafka 服务器，进行了一些基础的检查，同时也查看了kafka处理请求的超时日志，其中我们关心的metadata和produce请求都没有超时。</p>
<p>问题就此陷入了僵局，虽然也搜到了一些kafka server会对连上来的client反解导致超时的问题（ <a href="https://github.com/apache/kafka/pull/10059">https://github.com/apache/kafka/pull/10059</a>），但通过一些简单的分析，我们确定这并非是问题所在。</p>
<p>同时，我们在环境上也发现一些异常情况，当时觉得不是核心问题&#x2F;解释不通，没有深入去看</p>
<ul>
<li>问题JVM线程数较高，已经超过10000，这个线程数量虽然确实较高，但并不会对1个4U的容器产生什么实质性的影响。</li>
<li>负责指标上报的线程CPU较高，大约占用了1&#x2F;4 ~ 1&#x2F;2 的CPU核，这个对于4U的容器来看问题也不大</li>
</ul>
<p>当排查陷入僵局，我们开始考虑其他可能的调查手段。我们尝试抓包来找线索，这里的抓包是SASL鉴权+SSL加密的，非常难读，只能靠长度和响应时间勉强来推断报文的内容。</p>
<p>在这个过程中，我们发现了一个非常重要的线索，客户端竟然发起了超时断链，并且超时的那条消息，实际服务端是有响应回复的。</p>
<p>随后我们将kafka client的trace级别日志打开，这里不禁感叹kafka client日志打的相对较少，发现的确有<strong>log.debug(“Disconnecting from node {} due to request timeout.”, nodeId)</strong>;的日志打印。</p>
<p>与网络相关的流程：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 这里发出了请求</span></span><br><span class="line">    client.send(request, time.milliseconds());</span><br><span class="line">    <span class="keyword">while</span> (client.active()) &#123;</span><br><span class="line">        List&lt;ClientResponse&gt; responses = client.poll(Long.MAX_VALUE, time.milliseconds());</span><br><span class="line">        <span class="keyword">for</span> (ClientResponse response : responses) &#123;</span><br><span class="line">            <span class="keyword">if</span> (response.requestHeader().correlationId() == request.correlationId()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (response.wasDisconnected()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Connection to &quot;</span> + response.destination() + <span class="string">&quot; was disconnected before the response was read&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (response.versionMismatch() != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> response.versionMismatch();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> response;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Client was shutdown before response was read&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (DisconnectException e) &#123;</span><br><span class="line">    <span class="keyword">if</span> (client.active())</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;Client was shutdown before response was read&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个poll方法，不是简单的poll方法，而在poll方法中会进行超时判断，查看poll方法中调用的handleTimedOutRequests方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;ClientResponse&gt; <span class="title function_">poll</span><span class="params">(<span class="type">long</span> timeout, <span class="type">long</span> now)</span> &#123;</span><br><span class="line">    ensureActive();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!abortedSends.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">// If there are aborted sends because of unsupported version exceptions or disconnects,</span></span><br><span class="line">        <span class="comment">// handle them immediately without waiting for Selector#poll.</span></span><br><span class="line">        List&lt;ClientResponse&gt; responses = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        handleAbortedSends(responses);</span><br><span class="line">        completeResponses(responses);</span><br><span class="line">        <span class="keyword">return</span> responses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">metadataTimeout</span> <span class="operator">=</span> metadataUpdater.maybeUpdate(now);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.selector.poll(Utils.min(timeout, metadataTimeout, defaultRequestTimeoutMs));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        log.error(<span class="string">&quot;Unexpected error during I/O&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// process completed actions</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">updatedNow</span> <span class="operator">=</span> <span class="built_in">this</span>.time.milliseconds();</span><br><span class="line">    List&lt;ClientResponse&gt; responses = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    handleCompletedSends(responses, updatedNow);</span><br><span class="line">    handleCompletedReceives(responses, updatedNow);</span><br><span class="line">    handleDisconnections(responses, updatedNow);</span><br><span class="line">    handleConnections();</span><br><span class="line">    handleInitiateApiVersionRequests(updatedNow);</span><br><span class="line">    <span class="comment">// 关键的超时判断</span></span><br><span class="line">    handleTimedOutRequests(responses, updatedNow);</span><br><span class="line">    completeResponses(responses);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> responses;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由此我们推断，问题可能在于客户端hang住了一段时间，从而导致超时断链。我们通过工具Arthas深入跟踪了Kafka的相关代码，甚至发现一些简单的操作（如A.field）也需要数秒的时间。这进一步确认了我们的猜想：问题可能出在JVM。JVM可能在某个时刻出现问题，导致系统hang住，但这并非由GC引起。</p>
<p><img src="/images/20230708/p2.png" alt="Untitled"></p>
<p>为了解决这个问题，我们又检查了监控线程CPU较高的问题。我们发现线程的执行热点是从”sun.management.ThreadImpl”中的”getThreadInfo”方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;metrics-1@746&quot; prio=5 tid=0xf nid=NA runnable</span><br><span class="line">  java.lang.Thread.State: RUNNABLE</span><br><span class="line">    at sun.management.ThreadImpl.getThreadInfo(Native Method)</span><br><span class="line">	  at sun.management.ThreadImpl.getThreadInfo(ThreadImpl.java:185)</span><br><span class="line">	  at sun.management.ThreadImpl.getThreadInfo(ThreadImpl.java:149)</span><br></pre></td></tr></table></figure>

<p>进一步发现，在某些版本的JDK8中，读取线程信息是需要加锁的。</p>
<p>至此，问题的根源已经清晰明了：过高的线程数以及线程监控时JVM全局锁的存在导致了这个问题。您可以使用如下的demo来复现这个问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.management.ManagementFactory;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.ThreadInfo;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.ThreadMXBean;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLockSimple</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">15_000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">200_000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ScheduledExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newSingleThreadScheduledExecutor();</span><br><span class="line">        executorService.scheduleAtFixedRate(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;take &quot;</span> + <span class="string">&quot; &quot;</span> + System.currentTimeMillis());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1</span>, <span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="type">ThreadMXBean</span> <span class="variable">threadMXBean</span> <span class="operator">=</span> ManagementFactory.getThreadMXBean();</span><br><span class="line">        <span class="type">ScheduledExecutorService</span> <span class="variable">metricsService</span> <span class="operator">=</span> Executors.newSingleThreadScheduledExecutor();</span><br><span class="line">        metricsService.scheduleAtFixedRate(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">                ThreadInfo[] threadInfoList = threadMXBean.getThreadInfo(threadMXBean.getAllThreadIds());</span><br><span class="line">                System.out.println(<span class="string">&quot;threads count &quot;</span> + threadInfoList.length + <span class="string">&quot; cost :&quot;</span> + (System.currentTimeMillis() - start));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">1</span>, <span class="number">1</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了解决这个问题，我们有以下几个可能的方案：</p>
<ul>
<li>将不合理的线程数往下降，可能存在线程泄露的场景</li>
<li>升级jdk到jdk11或者jdk17（推荐）</li>
<li>将Thread相关的监控临时关闭</li>
</ul>
<p>这个问题的解决方案应根据实际情况进行选择，希望对你有所帮助。</p>
]]></content>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>网络通信超时之后该不该重启客户端</title>
    <url>/%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E8%B6%85%E6%97%B6%E4%B9%8B%E5%90%8E%E8%AF%A5%E4%B8%8D%E8%AF%A5%E9%87%8D%E5%90%AF%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
    <content><![CDATA[<p>我写这篇文章来论证“超时之后要不要重启客户端”、“如何重启客户端”。简而言之，重启客户端还是为了让系统能够达到自愈，是比较高的可靠性要求。如果你的软件没有这么高的可靠性要求，像是人机交互程序等对可靠性要求较低的场景，可以选择不考虑这个功能。毕竟实现这个功能的时间至少够300倍你重新点击按钮&#x2F;重启的时间了。</p>
<p>如果是一些串口协议，通过传输的间隙来判断报文的间隔，比如modbus协议，3.5个时间内不发送，就计算做一个协议报文的开始，那么故障时的报文毫无疑问会处理失败（因为存在CRC校验，奇偶校验等）。等待故障结束，又3.5个时间后，就会恢复正常。</p>
<p>如果能确保网络通信报文不会遭到篡改、也没有宇宙射线&#x2F;太阳黑子修改你的比特位的场景下，笔者认为没有特别大的必要对客户端进行重启操作，因为不见得重启后就比之前更好，这种超时通常是由服务端处理时间长导致的。没做到建链限制的情况下，贸然重启，还可能会引起建链的波峰。</p>
<p>但是，在实际复杂的网络环境下，如<strong>网络报文遭到篡改</strong>、<strong>部分字节丢失</strong>等的情况下，一切就大不一样了，不重启客户端就无法自愈。这其中的关键在于，切分报文是否正确。</p>
<p>比如基于TCP的网络协议，这也是本文重点讨论的场景，假设应用协议采用最常见的LengthBasedFrame分包方式，这种协议，通常根据前0~4个字节来判断协议的总长度，比如前面的字节是<strong>00000014</strong>，那这个报文长度就是<code>1*16 + 4 = 20</code>长度。这种时候，一旦发生了报文篡改&#x2F;丢包，会导致通信端计算报文长度出错，一直在傻等，无法自愈。</p>
<p>比如上面的例子一旦发生篡改，将4篡改5，那么就会导致客户端&#x2F;服务器一直在等待不存在的第21个字节，这种情况下，如果不做超时重建，那么这条链路就会一直处于等待状态，无法自愈。</p>
<p>综上所述，实际复杂的网络环境下出现通信超时，这条链路可能会无法自愈。这种情况下，笔者推荐对针对tcp链路做超时重建，业内的一些例子像是：bookkeeper client没有做，kafka client做了。至于重建的触发条件，比如一次超时就重建、多次超时之后才重建、仅当心跳报文超时才重建，这些就交给读者自己把握了。如果区别不大，笔者倾向于一次超时就重建，逻辑简单清晰。</p>
]]></content>
      <tags>
        <tag>Code</tag>
      </tags>
  </entry>
  <entry>
    <title>bookkeeper 持久化文件解析</title>
    <url>/bookkeeper/bookkeeper-persistent-file/</url>
    <content><![CDATA[<h1><span id="entry-log-file">Entry Log File</span><a href="#entry-log-file" class="header-anchor">#</a></h1><h2><span id="bei-jing">背景</span><a href="#bei-jing" class="header-anchor">#</a></h2><p>测试环境上出现了一些entryLog解析异常的问题，想分析一下磁盘上.log文件的格式，分析分析我们的文件是否有问题</p>
<h2><span id="jie-xi-dai-ma-di-zhi">解析代码地址</span><a href="#jie-xi-dai-ma-di-zhi" class="header-anchor">#</a></h2><p><a href="https://github.com/protocol-laboratory/bookkeeper-codec-java/blob/main/src/main/java/com/github/protocol/EntryLogReader.java">https://github.com/protocol-laboratory/bookkeeper-codec-java/blob/main/src/main/java/com/github/protocol/EntryLogReader.java</a></p>
<h2><span id="zheng-wen">正文</span><a href="#zheng-wen" class="header-anchor">#</a></h2><p>我们采用的配置是singleEntryLog模式，就是说很多ledger的信息都会放在一个log文件内部。</p>
<p>插一句话：这种log文件，其实和LSM相似，属于不可变的数据结构，这种数据结构，得益于不可变，所以内容可以安排的非常紧凑，不像B树结构，需要预留一定空间给原地更新，随机插入等。</p>
<p><img src="/bookkeeper/bookkeeper-persistent-file/bookkeeper-entry-log-format.png" alt="bookkeeper-entry-log-format"></p>
<p>如上图所示，接下来，我们沿着解析的流程，解读每个部分的详细格式</p>
<h3><span id="jie-xi-tou-bu">解析头部</span><a href="#jie-xi-tou-bu" class="header-anchor">#</a></h3><p>首先，我们解析文件的头部字段，bookkeeper的设计中，文件头部预留了1024字节，目前只使用了20个字节<br>前四个字节是<strong>BKLO</strong>的文件魔数<br>然后紧跟着的4个字节是bk文件的版本号，这里我们仅分析版本号1<br>然后8字节的long类型代表<strong>ledgersMap</strong>的开始位置，称为<strong>ledgersMapOffset</strong>。<br>然后4字节的int类型代表<strong>ledgersMap</strong>的总长度。</p>
<h3><span id="jie-xi-ledgermap-bu-fen">解析ledgerMap部分</span><a href="#jie-xi-ledgermap-bu-fen" class="header-anchor">#</a></h3><p>最前面四个字节，代表这部分的大小</p>
<p>然后开始的ledgerId和entryId分别为-1，-2，随后是一个ledger的count大小，后面的ledgerId和size才是有效值</p>
<p>随后的部分非常紧凑，由一个个ledgerId，size组成</p>
<p>读取完ledgerMap，可以知道，这个文件包含了多少ledger，总大小是多少？</p>
<p>注：size代表这一段ledger占用的磁盘空间大小</p>
<h3><span id="jie-xi-body-nei-rong">解析body内容</span><a href="#jie-xi-body-nei-rong" class="header-anchor">#</a></h3><p>body内容也非常紧凑.<br>最前面4个字节，代表这个entry的大小。<br>然后8个字节，ledgerId<br>然后8个字节，entryId<br>剩下的内容，就是pulsar写数据的编码，不再属于bookkeeper的格式范畴了</p>
<h1><span id="txn-log-file">Txn Log File</span><a href="#txn-log-file" class="header-anchor">#</a></h1><h2><span id="jie-xi-dai-ma-di-zhi">解析代码地址</span><a href="#jie-xi-dai-ma-di-zhi" class="header-anchor">#</a></h2><p><a href="https://github.com/protocol-laboratory/bookkeeper-codec-java/blob/main/src/main/java/com/github/protocol/TxnLogReader.java">https://github.com/protocol-laboratory/bookkeeper-codec-java/blob/main/src/main/java/com/github/protocol/TxnLogReader.java</a></p>
<h2><span id="jian-shu">简述</span><a href="#jian-shu" class="header-anchor">#</a></h2><p>bookkeeper中的journal log，和大部分基于LSM的数据结构一样，是用来保证文件一定被写入的。会在数据写入的时候，写入journal log，崩溃恢复的时候从journal log里面恢复。</p>
<p><img src="/bookkeeper/bookkeeper-persistent-file/bookkeeper-txn-log-format.png" alt="bookkeeper-txn-log-format"></p>
<h3><span id="jie-xi-tou-bu">解析头部</span><a href="#jie-xi-tou-bu" class="header-anchor">#</a></h3><p>首先，我们解析文件的头部字段<br>前四个字节是BKLG的文件魔数<br>然后紧跟着的4个字节是bk文件的版本号</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> TxnHeader <span class="title function_">readHeader</span><span class="params">(FileChannel fileChannel)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ByteBuf</span> <span class="variable">headers</span> <span class="operator">=</span> Unpooled.buffer(HEADER_SIZE);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">read</span> <span class="operator">=</span> fileChannel.read(headers.internalNioBuffer( index: <span class="number">0</span>, HEADER_SIZE));</span><br><span class="line">    headers.writerIndex(read);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">byte</span>[] bklgByte = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4</span>];</span><br><span class="line">    headers.readBytes(bklgByte, dstIndex: <span class="number">0</span>, length: <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">headerVersion</span> <span class="operator">=</span> headers.readInt();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TxnHeader</span>(headerVersion);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="jie-xi-nei-rong">解析内容</span><a href="#jie-xi-nei-rong" class="header-anchor">#</a></h3><p>内容非常紧凑，由ledgerId，entryId和内容组成。ledgerId一定大于0，entryId在小于0的情况下代表特殊的数据。如</p>
<ul>
<li>-0x1000即4096 代表ledger的masterKey</li>
<li>-0x2000即8192 代表ledger是否被fence</li>
<li>-0x4000即16384 代表ledger的force</li>
<li>-0x8000即32768 代表ledger的显示LAC</li>
</ul>
<h2><span id="hui-fang-liu-cheng">回放流程</span><a href="#hui-fang-liu-cheng" class="header-anchor">#</a></h2><p>当bookkeeper启动的时候，他会从data路径下取得lastMark文件，该文件一定为16个字节，前八个字节代表落盘的最新journal log文件，后八个字节代表文件的位置。会从这个位置开始回放<br>值得一提的是，lastId文件，代表下一个dataLog该使用什么文件名</p>
]]></content>
      <tags>
        <tag>bookkeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>calcite parser代码生成详解</title>
    <url>/calcite/calcite-parser-code-generate/</url>
    <content><![CDATA[<h1><span id="calcite-parser-dai-ma-sheng-cheng-xiang-jie">calcite parser代码生成详解</span><a href="#calcite-parser-dai-ma-sheng-cheng-xiang-jie" class="header-anchor">#</a></h1><p>本文代码均已上传到<a href="https://gitee.com/shoothzj/calcite-examples">gitee</a><br>calcite的parser代码生成分为如下两个步骤</p>
<p><img src="/calcite/calcite-parser-code-generate/calcite-parser-code-generate-process.png" alt="calcite-parser-code-generate-process"></p>
<h2><span id="sheng-cheng-parse-jj">生成Parse.jj</span><a href="#sheng-cheng-parse-jj" class="header-anchor">#</a></h2><p>文件目录如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├── pom.xml</span><br><span class="line">└── src</span><br><span class="line">    ├── main</span><br><span class="line">    │   ├── codegen</span><br><span class="line">    │   │   ├── config.fmpp</span><br><span class="line">    │   │   ├── includes</span><br><span class="line">    │   │   │   ├── compoundIdentifier.ftl</span><br><span class="line">    │   │   │   └── parserImpls.ftl</span><br><span class="line">    │   │   └── templates</span><br><span class="line">    │   │       └── Parser.jj</span><br></pre></td></tr></table></figure>

<p>添加calcite dependency</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.calcite<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>calcite-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>配置<code>drill-fmpp-maven-plugin</code>插件如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.drill.tools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>drill-fmpp-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">config</span>&gt;</span>src/main/codegen/config.fmpp<span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">output</span>&gt;</span>$&#123;project.build.directory&#125;/generated-sources/fmpp<span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">templates</span>&gt;</span>src/main/codegen/templates<span class="tag">&lt;/<span class="name">templates</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>generate-fmpp-sources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>validate<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>generate<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>codegen 模块的文件都拷贝自对应版本的<strong>calclite</strong> <strong>core&#x2F;src&#x2F;main&#x2F;codegen</strong>路径 <a href="https://github.com/apache/calcite/tree/main/core/src/main/codegen">https://github.com/apache/calcite/tree/main/core/src/main/codegen</a></p>
<p>然后把<a href="https://github.com/apache/calcite/blob/main/core/src/main/codegen/default_config.fmpp">https://github.com/apache/calcite/blob/main/core/src/main/codegen/default_config.fmpp</a> 中的parser属性与config.fmpp中的parser属性合并。就可以通过<strong>mvn package</strong>命令生成Parser.jj了。当然，如果有定制化修改的需求，也可以在这个阶段修改config.fmpp</p>
<p><img src="/calcite/calcite-parser-code-generate/calcite-parser-code-generator-fmpp.png" alt="calcite-parser-code-generator-fmpp"></p>
<h2><span id="parser-jj-sheng-cheng-java-dai-ma">Parser.jj生成java代码</span><a href="#parser-jj-sheng-cheng-java-dai-ma" class="header-anchor">#</a></h2><p>文件目录如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├── pom.xml</span><br><span class="line">├── src</span><br><span class="line">│   ├── main</span><br><span class="line">│   │   ├── codegen</span><br><span class="line">│   │   │   └── Parser.jj</span><br></pre></td></tr></table></figure>

<p>Parser.jj就是我们上一步生成的Parser.jj，如果有什么想要的定制化修改，也可以在这个步骤改入到Parser.jj中。</p>
<p>添加calcite dependency</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.calcite<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>calcite-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>配置<code>javacc-maven-plugin</code>如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javacc-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>javacc<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>javacc<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>$&#123;project.basedir&#125;/src/main/codegen<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/Parser.jj<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>生成代码</p>
<p><img src="/calcite/calcite-parser-code-generate/calcite-parser-code-generator-javacc.png" alt="calcite-parser-code-generator-javacc"></p>
<h2><span id="wu-parser-jj-ding-zhi-hua-xiu-gai-yi-bu-sheng-cheng">无Parser.jj定制化修改，一步生成</span><a href="#wu-parser-jj-ding-zhi-hua-xiu-gai-yi-bu-sheng-cheng" class="header-anchor">#</a></h2><p>如果不需要对Parser.jj进行定制化修改，那么可以通过连续运行两个插件来生成代码，这里给出pom文件样例，不再赘述</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.drill.tools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>drill-fmpp-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">config</span>&gt;</span>src/main/codegen/config.fmpp<span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">output</span>&gt;</span>$&#123;project.build.directory&#125;/generated-sources/fmpp<span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">templates</span>&gt;</span>src/main/codegen/templates<span class="tag">&lt;/<span class="name">templates</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>generate-fmpp-sources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>validate<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>generate<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javacc-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>javacc<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>javacc<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/generated-sources/fmpp<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/Parser.jj<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">lookAhead</span>&gt;</span>2<span class="tag">&lt;/<span class="name">lookAhead</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">isStatic</span>&gt;</span>false<span class="tag">&lt;/<span class="name">isStatic</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>javacc-test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-test-sources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>javacc<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/generated-test-sources/fmpp<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/generated-test-sources/javacc<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/Parser.jj<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">isStatic</span>&gt;</span>false<span class="tag">&lt;/<span class="name">isStatic</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ignoreCase</span>&gt;</span>true<span class="tag">&lt;/<span class="name">ignoreCase</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">unicodeInput</span>&gt;</span>true<span class="tag">&lt;/<span class="name">unicodeInput</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>calcite</tag>
      </tags>
  </entry>
  <entry>
    <title>异步网络请求编码</title>
    <url>/code/async-network-code/</url>
    <content><![CDATA[<p>本文介绍常见的异步网络请求编码手法。尽管像golang这些的语言，支持协程，可以使得Programmer以同步的方式编写代码，大大降低编码者的心智负担。但网络编程中，批量又非常常见，这就导致即使在Golang中，也不得不进行协程的切换来满足批量的诉求，在Golang中往往对外以callback的方式暴露接口。</p>
<p>无论是callback、还是返回future、还是返回Mono&#x2F;Flux，亦或是从channel中读取，这是不同的异步编程范式，编码的时候，可以从项目整体、团队编码风格、个人喜好来依次考虑。本文将以callback为主，但移植到其他异步编码范式，并不困难。</p>
<p>使用callback模式后，对外的方法签名类似:</p>
<p>go</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span></span> Get(ctx context.Context, req *Request, callback <span class="function"><span class="keyword">func</span><span class="params">(resp *Response, err <span class="type">error</span>)</span></span>) <span class="type">error</span></span><br></pre></td></tr></table></figure>

<p>java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">get</span><span class="params">(Request req, Callback callback)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2><span id="wang-luo-bian-cheng-zhong-de-pi-liang">网络编程中的批量</span><a href="#wang-luo-bian-cheng-zhong-de-pi-liang" class="header-anchor">#</a></h2><p>对于网络请求来说，批量可以提高性能。 批量处理是指将多个请求或任务组合在一起，作为单一的工作单元进行处理。批量尽量对用户透明，用户只需要简单地对批量进行配置，而不需要关心批量的实现细节。</p>
<p>常见的批量相关配置</p>
<ul>
<li>batch interval: 批量的时间间隔，比如每隔1s，批量一次</li>
<li>batch size: 批量的最大大小，比如每次最多批量100个请求</li>
</ul>
<p>批量可以通过定时任务实现，也可以做一些优化，比如队列中无请求时，暂停定时任务，有请求时，启动定时任务。</p>
<h2><span id="bian-ma-xi-jie">编码细节</span><a href="#bian-ma-xi-jie" class="header-anchor">#</a></h2><p>整体流程大概如下图所示：</p>
<p><img src="/code/async-network-code/async-network-code.png" alt="async-network-code"></p>
<h3><span id="yi-ding-yao-xian-ba-qing-qiu-fang-dao-dui-lie-x2f-map-zhong">一定要先把请求放到队列&#x2F;map中</span><a href="#yi-ding-yao-xian-ba-qing-qiu-fang-dao-dui-lie-x2f-map-zhong" class="header-anchor">#</a></h3><p>避免网络请求响应过快，导致callback还没注册上，就已经收到响应了。</p>
<h3><span id="dui-lie-zhong-de-xiao-xi-yi-ding-yao-you-chao-shi-ji-zhi">队列中的消息一定要有超时机制</span><a href="#dui-lie-zhong-de-xiao-xi-yi-ding-yao-you-chao-shi-ji-zhi" class="header-anchor">#</a></h3><p>避免由于丢包等原因，导致请求一直没有响应，而导致队列中的请求越来越多，最终内存溢出。</p>
<h3><span id="wait-dui-lie-sheng-ming-zhou-qi-yu-di-ceng-wang-luo-client-sheng-ming-zhou-qi-yi-zhi">wait队列生命周期与底层网络client生命周期一致</span><a href="#wait-dui-lie-sheng-ming-zhou-qi-yu-di-ceng-wang-luo-client-sheng-ming-zhou-qi-yi-zhi" class="header-anchor">#</a></h3><p>wait队列中请求一定是依附于client的，一旦client重建，队列也需要重建，并触发callback、future的失败回调。</p>
]]></content>
      <tags>
        <tag>Code</tag>
      </tags>
  </entry>
  <entry>
    <title>后端开发实体命名</title>
    <url>/code/backend-dev-entity-naming/</url>
    <content><![CDATA[<p>对于一个资源实体来说，在解决方案里，常见的操作场景有：</p>
<ul>
<li>由外部&#x2F;客户发起的增删改查、列表查询，访问协议一般为HTTP协议。</li>
<li>由系统内部组件发起的增删改查、列表查询，协议可能为HTTP协议，也可能是RPC协议如gRPC等。</li>
<li>由资源实体的owner服务跟数据库进行实体读写。</li>
<li>由资源实体的owner服务将变更广播到消息中间件里。</li>
</ul>
<p>可以将实体命名如下：<br><img src="/code/backend-dev-entity-naming/naming.png" alt="naming"></p>
<p>实体类详细说明：</p>
<ul>
<li>CreateXxxReq 创建资源请求，包含除资源id之外的所有字段，有些变种里面可能会包含id字段。</li>
<li>UpdateXxxReq 更新资源请求，包含除资源id之外支持更新的所有字段。</li>
<li>XxxResp 资源响应，可用于Crate、Update接口的返回，包含所有字段。</li>
<li>ListXxxsResp 资源列表响应，包含资源列表。</li>
<li>List<briefxxxresp> 资源列表响应，包含资源列表，每个资源包含部分字段，一般是id、name、createdTime、updatedTime等。</briefxxxresp></li>
</ul>
<p>出于复杂性的考虑，可以将XxxNotify类跟InnerXxx进行简化合并，转化为:</p>
<p><img src="/naming-omit-notify.png" alt="naming-omit-notify"></p>
<p>swagger&#x2F;openapi里，operationId可使用如下</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>operationId</th>
</tr>
</thead>
<tbody><tr>
<td>创建资源</td>
<td>CreateXxx</td>
</tr>
<tr>
<td>删除资源</td>
<td>DeleteXxx</td>
</tr>
<tr>
<td>更新资源</td>
<td>UpdateXxx</td>
</tr>
<tr>
<td>查询单个资源</td>
<td>ShowXxx</td>
</tr>
<tr>
<td>查询资源列表</td>
<td>ListXxx</td>
</tr>
<tr>
<td>内部创建资源</td>
<td>CreateInnerXxx</td>
</tr>
<tr>
<td>内部删除资源</td>
<td>DeleteInnerXxx</td>
</tr>
<tr>
<td>内部更新资源</td>
<td>UpdateInnerXxx</td>
</tr>
<tr>
<td>内部查询单个资源</td>
<td>ShowInnerXxx</td>
</tr>
<tr>
<td>内部查询资源列表</td>
<td>ListInnerXxx</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>openapi</tag>
      </tags>
  </entry>
  <entry>
    <title>现代编程语言中的异常处理</title>
    <url>/code/code-error-process/</url>
    <content><![CDATA[<p>在软件开发中，健壮的异常处理是编写高质量代码的关键。本文将探讨现代编程语言中的通用异常处理方法，帮助你优雅地处理异常并写出健壮的代码。我们将不拘泥于某种语言，而是讨论一些普遍适用的策略。</p>
<h1><span id="yi-chang-lian-gai-shu">异常链概述</span><a href="#yi-chang-lian-gai-shu" class="header-anchor">#</a></h1><p>现代编程语言通常将异常视为一条单向链表，链表中的节点包含根本原因和相关的上下文信息。例如：</p>
<pre class="mermaid">graph TD
    C --> D[MicroServiceError, call user service failed]
    B --> C[DatabaseError, select * from user failed]
    A --> B[HttpError, http://localhost:6379 failed]
    A[SocketError, localhost, 6379 connect failed]</pre>

<p>异常就这么向外传播也不错，但是抽象是会泄露的，正常的时候顺风顺水，异常就需要判断一下，比如一个很常见的需求，文件已存在异常，就当做成功处理，用Java来写就是这样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (exception <span class="keyword">instanceof</span> FileAlreadyExistsException) &#123;</span><br><span class="line">    log.info(<span class="string">&quot;file already exists&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> exception;<span class="comment">// or wrap it</span></span><br></pre></td></tr></table></figure>

<p>综上来看，我们对现代编程语言的需求就是，能组织异常链，判断异常是否是某类异常，把异常用字符串的形式打印出来。</p>
<p>当我们在构筑一个library的时候，应该尽可能保持完整的异常链，除非你认为这个异常在library内可以处理，比如上面的情况。并且应该在项目的README，或者项目的某个文件中，详细地列出本library可能抛出的异常，以及异常的含义。</p>
<p>我们在<code>opengemini-client-go</code>中就有这样的例子，我们在<code>errors.go</code>中定义了所有可能的异常，以及异常的含义。</p>
<p>有些时候，我们构筑的不是library，出于隐藏内部实现或者是向终端用户隐藏逻辑上的低级错误，我们会对异常进行处理，比如常见的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (exception <span class="keyword">instanceof</span> DuplicateKeyException) &#123;</span><br><span class="line">    log.info(<span class="string">&quot;duplicate key&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(<span class="string">&quot;already exists&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// many if else</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(<span class="string">&quot;unknown error&quot;</span>); <span class="comment">// or just internal error</span></span><br></pre></td></tr></table></figure>

<p>题外话，由于Java只能判断本级的异常类型，你会经常看到<code>getCause</code>的代码，比如Apache Pulsar项目中的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (exception.getCause() != <span class="literal">null</span></span><br><span class="line">                    &amp;&amp; exception.getCause() <span class="keyword">instanceof</span> PulsarClientException.InvalidServiceURL) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MalformedURLException</span>(exception.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>包括层次一多，甚至可以看到递归代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Throwable <span class="title function_">mapToBkException</span><span class="params">(Throwable ex)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> CompletionException || ex <span class="keyword">instanceof</span> ExecutionException) &#123;</span><br><span class="line">            <span class="keyword">return</span> mapToBkException(ex.getCause());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> MetadataStoreException.NotFoundException) &#123;</span><br><span class="line">            <span class="type">BKException</span> <span class="variable">bke</span> <span class="operator">=</span> BKException.create(BKException.Code.NoSuchLedgerExistsOnMetadataServerException);</span><br><span class="line">            bke.initCause(ex);</span><br><span class="line">            <span class="keyword">return</span> bke;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> MetadataStoreException.AlreadyExistsException) &#123;</span><br><span class="line">            <span class="type">BKException</span> <span class="variable">bke</span> <span class="operator">=</span> BKException.create(BKException.Code.LedgerExistException);</span><br><span class="line">            bke.initCause(ex);</span><br><span class="line">            <span class="keyword">return</span> bke;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> MetadataStoreException.BadVersionException) &#123;</span><br><span class="line">            <span class="type">BKException</span> <span class="variable">bke</span> <span class="operator">=</span> BKException.create(BKException.Code.MetadataVersionException);</span><br><span class="line">            bke.initCause(ex);</span><br><span class="line">            <span class="keyword">return</span> bke;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> MetadataStoreException.AlreadyClosedException) &#123;</span><br><span class="line">            <span class="type">BKException</span> <span class="variable">bke</span> <span class="operator">=</span> BKException.create(BKException.Code.LedgerClosedException);</span><br><span class="line">            bke.initCause(ex);</span><br><span class="line">            <span class="keyword">return</span> bke;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ex;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>Go在这里易用性做的不错，支持了<code>errors.Is</code>和<code>errors.As</code>，可以判断异常链中是否包含某个异常，也可以直接获取异常链中的异常。不过如果异常链里面有两个一模一样类型的异常，你想精准取到其中一个就比较困难，不过这在实际场景中非常少见。</p>
<p>这里，我们说异常链发生了变更，那么什么时候打印日志也比较明确了，当异常链发生变更的时候打印，保证完整的堆栈信息用于问题分析。这也可以保证在一条链的过程中，有且仅有一次打印日志。</p>
<p>在异常链发生终止，比如转化为http content，或者是print到console的时候，要不要打印日志呢？这个问题有些见人见智，这取决于你的用户在report问题的时候，会不会携带http content或者是console output，如果不会，那么你就需要打印日志，如果会，那么你就不需要打印日志。</p>
<p>Java里面，比起将底层的error抛出，我们更倾向于定义一个符合本library抽象层级的异常，并在方法的签名中只返回这个异常，一方面使得下层library的异常如果发生变化，本library依然是编译兼容的，另一方面也更符合抽象层级。</p>
<p>但是在Go里面，事情就更复杂一些，我愿意称之为类型的细化具备传染性，一旦你将某个方法的签名不返回interface，而是返回一个具体的类型，比如</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span></span> CallService() (Result, *ServiceError) &#123;</span><br><span class="line">    <span class="keyword">if</span> failed &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, &amp;ServiceError&#123;Code: <span class="number">500</span>, Message: <span class="string">&quot;service error&quot;</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后有一个方法调用了它</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    err := MakeFriend()</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="built_in">panic</span>(err)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Client)</span></span> MakeFriend() (Result, <span class="type">error</span>) &#123;</span><br><span class="line">    err := io.Read(<span class="string">&quot;friend_list.txt&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> CallService()    </span><br></pre></td></tr></table></figure>

<p>这下就麻烦了，当*ServiceError转化为error, nil的ServiceError指针转化为error的时候就不是nil了，这很致命，是的，这非常致命。即使CallService()成功了，main函数还是会panic。</p>
<p>把这个叫做传染性还是比较准确的，异步的代码、鸿蒙的ets都具备一样的性质，他们会不断向上传播，我对这个词还是比较满意。</p>
<p>综上，Go里面，我们可以构筑具体的异常，但是在不能确保上层一直都是用这个细化类型的情况下，接口还是返回error interface。</p>
<p>漫谈了许多，我简单做一个总结</p>
<ul>
<li>现代编程语言的异常是一条链</li>
<li>现代编程语言应该具备构筑异常链，判断异常是否是某类异常，异常打印的能力</li>
<li>设计符合抽象层级的异常</li>
<li>构筑一个library的时候，尽可能保持完整的异常链，在项目的README，或者项目的某个文件中，详细地列出本library可能抛出的异常，以及异常的含义</li>
<li>在异常链发生变更的时候进行日志打印</li>
</ul>
<script type="module"> import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.esm.min.mjs';	mermaid.initialize({startOnLoad: true, flowchart: {curve: 'linear'}}); </script>]]></content>
      <tags>
        <tag>Code</tag>
      </tags>
  </entry>
  <entry>
    <title>错误码国际化总结</title>
    <url>/code/error-msg-i18n/</url>
    <content><![CDATA[<h1><span id="cuo-wu-xin-xi-wu-mo-ban-bian-liang">错误信息无模板变量</span><a href="#cuo-wu-xin-xi-wu-mo-ban-bian-liang" class="header-anchor">#</a></h1><p>假设我们的错误信息返回如下</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">&#123;&quot;error_code&quot;: &quot;IEEE.754&quot;, &quot;error_msg&quot;: &quot;IEE 754 error&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>无模板变量的错误信息国际化，可以直接在前端对整体字符串根据错误码进行静态国际化。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// catch the error code first</span></span><br><span class="line"><span class="keyword">const</span> error_code = body.<span class="property">error_code</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> error_msg_map = &#123;</span><br><span class="line">    <span class="string">&quot;IEEE.754&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;en&quot;</span>: <span class="string">&quot;IEE 754 error&quot;</span>,</span><br><span class="line">        <span class="string">&quot;zh&quot;</span>: <span class="string">&quot;IEE 754 错误&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> error_msg = error_msg_map[error_code][lang]</span><br></pre></td></tr></table></figure>

<h1><span id="cuo-wu-xin-xi-bao-han-mo-ban-bian-liang">错误信息包含模板变量</span><a href="#cuo-wu-xin-xi-bao-han-mo-ban-bian-liang" class="header-anchor">#</a></h1><p>假设我们的错误信息返回如下</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">&#123;&quot;error_code&quot;: &quot;IEEE.754&quot;, &quot;error_msg&quot;: &quot;IEE 754 NbN error, do you mean Nan?&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>包含模板变量的错误信息国际化，可以在前端通过正则表达式提取，并代入到中文字符串模板中实现。如示例代码</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// catch the error code first</span></span><br><span class="line"><span class="keyword">const</span> error_code = body.<span class="property">code</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> error_msg_capture_map = &#123;</span><br><span class="line">    <span class="string">&quot;IEEE.754&quot;</span>: <span class="string">&quot;/IEE 754 (\w+) error, do you mean (\w+)?/&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> error_msg_template_map = &#123;</span><br><span class="line">    <span class="string">&quot;IEEE.754&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;en&quot;</span>: <span class="string">&quot;IEE 754 &#123;&#123;var1&#125;&#125; error, do you mean &#123;&#123;var2&#125;&#125;?&quot;</span>,</span><br><span class="line">        <span class="string">&quot;zh&quot;</span>: <span class="string">&quot;IEE 754 &#123;&#123;var1&#125;&#125; 错误，你是指 &#123;&#123;var2&#125;&#125; 吗？&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> matches = error_msg_capture_map[error_code].<span class="title function_">exec</span>(body.<span class="property">error_msg</span>);</span><br><span class="line"><span class="keyword">const</span> variables = matches.<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> error_msg = error_msg_template_map[error_code][lang];</span><br><span class="line">variables.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, index</span>) =&gt;</span> &#123;</span><br><span class="line">    error_msg = error_msg.<span class="title function_">replace</span>(<span class="string">`&#123;&#123;var<span class="subst">$&#123;index + <span class="number">1</span>&#125;</span>&#125;&#125;`</span>, value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Code</tag>
      </tags>
  </entry>
  <entry>
    <title>文件编解码代码设计</title>
    <url>/code/file-codec-design/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#gai-shu">概述</a></li>
<li><a href="#java">Java</a></li>
</ul>
<!-- tocstop -->

</div>

<h1><span id="gai-shu">概述</span><a href="#gai-shu" class="header-anchor">#</a></h1><p>我们以xyz文件格式为例，来说明文件编解码的代码设计。xyz文件格式内容如下：</p>
<ul>
<li>header部分：文件头，包含文件版本号、文件类型、文件大小等信息</li>
<li>body部分：文件主体</li>
</ul>
<p>通用设计大概如下</p>
<pre class="mermaid">classDiagram
    class XyzHeader {
        + byte[] content
    }
    class XyzBody {
        + byte[] content
    }
    class Xyz{
        + XyzHeader header
        + XyzBody body
    }
    class XyzReader {
        + Xyz read(fileName: string)
        + void process(String fileName, XyzProcessor processor)
        - XyzHeader readHeader()
        - XyzBody readBody()
    }
    class XyzProcessor {
        <<interface>>
        + void processHeader(XyzHeader header)
        + void processBody(XyzBody body)
    }
    class XyzReadCollectProcessor {
        Xyz getXyz()
    }
    Xyz --> XyzHeader: contains
    Xyz --> XyzBody: contains
    XyzReader --> Xyz: reads
    XyzReader --> XyzProcessor: processes
    XyzReadCollectProcessor --|> XyzProcessor: implements</interface></pre>

<h1><span id="java">Java</span><a href="#java" class="header-anchor">#</a></h1><p>使用<code>java.io.RandomAccessFile</code>和<code>java.nio.channels.FileChannel</code>来实现文件读取，使用<code>io.netty.buffer.ByteBuf</code>来读写文件。</p>
<p>核心代码举例:</p>
<p>XyzReader:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XyzHeader</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] content;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XyzBody</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">byte</span>[] content;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Xyz</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> XyzHeader header;</span><br><span class="line">    <span class="keyword">private</span> XyzBody body;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">XyzProcessor</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">processHeader</span><span class="params">(XyzHeader header)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">processBody</span><span class="params">(XyzBody body)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XyzReadCollectProcessor</span> <span class="keyword">implements</span> <span class="title class_">XyzProcessor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Xyz</span> <span class="variable">xyz</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Xyz</span>();</span><br><span class="line">    <span class="keyword">public</span> Xyz <span class="title function_">getXyz</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> xyz;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XyzReader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Xyz <span class="title function_">read</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> XyzHeader <span class="title function_">readHeader</span><span class="params">(FileChannel fileChannel)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> XyzBody <span class="title function_">readBody</span><span class="params">(FileChannel fileChannel)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<script type="module"> import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.esm.min.mjs';	mermaid.initialize({startOnLoad: true, flowchart: {curve: 'linear'}}); </script>]]></content>
      <tags>
        <tag>Codec</tag>
      </tags>
  </entry>
  <entry>
    <title>多语言SDK设计</title>
    <url>/code/multi-lang-client-sdk-design/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#duo-yu-yan-sdk-she-ji-de-chang-jian-wen-ti">多语言SDK设计的常见问题</a><ul>
<li><a href="#ri-zhi-da-yin-de-she-ji-ce-lue">日志打印的设计策略</a></li>
<li><a href="#shi-fou-xu-yao-shi-yong-xian-shi-de-start-connect-fang-fa">是否需要使用显式的<code>start</code>&#x2F;<code>connect</code>方法？</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

</div>

<h1><span id="duo-yu-yan-sdk-she-ji-de-chang-jian-wen-ti">多语言SDK设计的常见问题</span><a href="#duo-yu-yan-sdk-she-ji-de-chang-jian-wen-ti" class="header-anchor">#</a></h1><h2><span id="ri-zhi-da-yin-de-she-ji-ce-lue">日志打印的设计策略</span><a href="#ri-zhi-da-yin-de-she-ji-ce-lue" class="header-anchor">#</a></h2><p>在SDK的关键节点，比如初始化完成、连接建立或者连接断开，都可以打印日志。如果是PerRequest的日志，一般默认不会打印INFO级别的日志。</p>
<p>SDK应该避免仅仅打印错误日志然后忽略异常；相反，它应该提供机制让调用者能够捕获并处理异常信息。这种做法有助于保持错误处理的透明性，并允许调用者根据需要采取适当的响应措施。正如<strong>David J. Wheeler</strong>所说”Put the control in the hands of those who know how to handle the information, not those who know how to manage the computers, because encapsulated details will eventually leak out.”把控制权放到那些知道如何处理信息的人手中，而不是放在那些知道如何管理计算机的人手中，因为封装的细节最终都会暴露。</p>
<h2><span id="shi-fou-xu-yao-shi-yong-xian-shi-de-start-x2f-connect-fang-fa">是否需要使用显式的<code>start</code>&#x2F;<code>connect</code>方法？</span><a href="#shi-fou-xu-yao-shi-yong-xian-shi-de-start-x2f-connect-fang-fa" class="header-anchor">#</a></h2><p>像go这样的语言，一般来说不太在意特定的时间内，某个协程是否处于阻塞等待连接的状态。而在java这样的语言，特别是在采用响应式编程模型的场景下，通常需要通过异步操作来管理连接的建立。这可以通过显式的start&#x2F;connect方法来或者是异步的工厂方法来实现。</p>
]]></content>
      <tags>
        <tag>Code</tag>
        <tag>SDK</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub Actions 参考大全</title>
    <url>/code/github-actions-reference/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#tong-yong-github-actions">通用 GitHub Actions</a><ul>
<li><a href="#commit-lint">commit lint</a></li>
<li><a href="#line-lint">line lint</a></li>
</ul>
</li>
<li><a href="#go">Go</a><ul>
<li><a href="#golangci-lint">golangci-lint</a></li>
<li><a href="#go-mod-check">go mod check</a></li>
<li><a href="#go-unit-tests">go unit tests</a></li>
</ul>
</li>
<li><a href="#java-github-actions">Java GitHub Actions</a><ul>
<li><a href="#maven-checkstyle">maven checkstyle</a></li>
<li><a href="#maven-spotbugs">maven spotbugs</a></li>
<li><a href="#maven-unit-tests">maven unit tests</a></li>
</ul>
</li>
<li><a href="#typescript-github-actions">TypeScript GitHub Actions</a><ul>
<li><a href="#npm-build-test">npm build test</a></li>
<li><a href="#prettier">prettier</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

</div>

<h1><span id="tong-yong-github-actions">通用 GitHub Actions</span><a href="#tong-yong-github-actions" class="header-anchor">#</a></h1><h2><span id="commit-lint">commit lint</span><a href="#commit-lint" class="header-anchor">#</a></h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">commit</span> <span class="string">lint</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">commitlint:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">wagoid/commitlint-github-action@v5</span></span><br></pre></td></tr></table></figure>

<h2><span id="line-lint">line lint</span><a href="#line-lint" class="header-anchor">#</a></h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">line</span> <span class="string">lint</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">line</span> <span class="string">lint</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">linelint</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">fernandrone/linelint@master</span></span><br></pre></td></tr></table></figure>

<h1><span id="go">Go</span><a href="#go" class="header-anchor">#</a></h1><h2><span id="golangci-lint">golangci-lint</span><a href="#golangci-lint" class="header-anchor">#</a></h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">go</span> <span class="string">ci</span> <span class="string">Lint</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">golangci:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">lint</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-go@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">go-version:</span> <span class="string">&#x27;1.21&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">golangci-lint</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">golangci/golangci-lint-action@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">version:</span> <span class="string">latest</span></span><br><span class="line">          <span class="attr">args:</span> <span class="string">--timeout</span> <span class="string">3m0s</span></span><br></pre></td></tr></table></figure>

<h2><span id="go-mod-check">go mod check</span><a href="#go-mod-check" class="header-anchor">#</a></h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">go</span> <span class="string">mod</span> <span class="string">check</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">go_mod_check:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">Go</span> <span class="string">Mod</span> <span class="string">Check</span> <span class="string">Action</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">shoothzj/go-mod-check-action@main</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">prohibitIndirectDepUpdate:</span> <span class="string">&#x27;true&#x27;</span></span><br></pre></td></tr></table></figure>

<h2><span id="go-unit-tests">go unit tests</span><a href="#go-unit-tests" class="header-anchor">#</a></h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">go</span> <span class="string">unit</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">go_unit_test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-go@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">go-version:</span> <span class="string">&#x27;1.21&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">setup</span> <span class="string">OpenGemini</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">shoothzj/setup-opengemini-action@main</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Run</span> <span class="string">coverage</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">go</span> <span class="string">test</span> <span class="string">./...</span> <span class="string">-coverpkg=./padmin/...</span> <span class="string">-race</span> <span class="string">-coverprofile=coverage.out</span> <span class="string">-covermode=atomic</span></span><br></pre></td></tr></table></figure>

<h1><span id="java-github-actions">Java GitHub Actions</span><a href="#java-github-actions" class="header-anchor">#</a></h1><h2><span id="maven-checkstyle">maven checkstyle</span><a href="#maven-checkstyle" class="header-anchor">#</a></h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">java</span> <span class="string">checkstyle</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">java_checkstyle:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Maven</span> <span class="string">Central</span> <span class="string">Repository</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-java@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">java-version:</span> <span class="string">&#x27;17&#x27;</span></span><br><span class="line">          <span class="attr">distribution:</span> <span class="string">&#x27;temurin&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">checkstyle</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">mvn</span> <span class="string">-B</span> <span class="string">clean</span> <span class="string">checkstyle:check</span></span><br></pre></td></tr></table></figure>

<h2><span id="maven-spotbugs">maven spotbugs</span><a href="#maven-spotbugs" class="header-anchor">#</a></h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">java</span> <span class="string">spotbugs</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">java_spotbugs:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Maven</span> <span class="string">Central</span> <span class="string">Repository</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-java@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">java-version:</span> <span class="string">&#x27;17&#x27;</span></span><br><span class="line">          <span class="attr">distribution:</span> <span class="string">&#x27;temurin&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">spotbugs</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">mvn</span> <span class="string">-B</span> <span class="string">-DskipTests</span> <span class="string">clean</span> <span class="string">verify</span> <span class="string">spotbugs:spotbugs</span></span><br></pre></td></tr></table></figure>

<h2><span id="maven-unit-tests">maven unit tests</span><a href="#maven-unit-tests" class="header-anchor">#</a></h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">java</span> <span class="string">unit</span> <span class="string">tests</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">java_unit_tests:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Maven</span> <span class="string">Central</span> <span class="string">Repository</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-java@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">java-version:</span> <span class="string">&#x27;17&#x27;</span></span><br><span class="line">          <span class="attr">distribution:</span> <span class="string">&#x27;temurin&#x27;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">unit</span> <span class="string">tests</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">mvn</span> <span class="string">-B</span> <span class="string">clean</span> <span class="string">test</span></span><br></pre></td></tr></table></figure>

<h1><span id="typescript-github-actions">TypeScript GitHub Actions</span><a href="#typescript-github-actions" class="header-anchor">#</a></h1><h2><span id="npm-build-test">npm build test</span><a href="#npm-build-test" class="header-anchor">#</a></h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">npm</span> <span class="string">build</span> <span class="string">test</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">npm_buid_test:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">latest</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">setup</span> <span class="string">pulsar</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">shoothzj/setup-pulsar-action@main</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">test</span></span><br></pre></td></tr></table></figure>

<h2><span id="prettier">prettier</span><a href="#prettier" class="header-anchor">#</a></h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">prettier</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="attr">pull_request:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">prettier:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">latest</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">--save-dev</span> <span class="string">prettier</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">--global</span> <span class="string">prettier</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">prettier</span> <span class="string">--check</span> <span class="string">&#x27;**/*.ts&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>GitHub Actions</tag>
      </tags>
  </entry>
  <entry>
    <title>多语言编程 各大Http库配置指南</title>
    <url>/code/multi-lang-http-client-config/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#go">Go</a><ul>
<li><a href="#go-biao-zhun-ku">Go标准库</a><ul>
<li><a href="#timeout">timeout</a></li>
<li><a href="#connection-timeout">connection timeout</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#java">Java</a><ul>
<li><a href="#biao-zhun-ku-jdk17">标准库(jdk17+)</a><ul>
<li><a href="#timeout-1">timeout</a></li>
<li><a href="#connectiontimeout">connectionTimeout</a></li>
</ul>
</li>
<li><a href="#reactor-netty">Reactor Netty</a><ul>
<li><a href="#timeout-2">timeout</a></li>
<li><a href="#connectiontimeout-1">connectionTimeout</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<!-- tocstop -->

</div>

<h1><span id="go">Go</span><a href="#go" class="header-anchor">#</a></h1><h2><span id="go-biao-zhun-ku">Go标准库</span><a href="#go-biao-zhun-ku" class="header-anchor">#</a></h2><h3><span id="timeout">timeout</span><a href="#timeout" class="header-anchor">#</a></h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">client := http.Client&#123;</span><br><span class="line">    Timeout: timeout,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="connection-timeout">connection timeout</span><a href="#connection-timeout" class="header-anchor">#</a></h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">client := http.Client&#123;</span><br><span class="line">    Transport: &amp;http.Transport&#123;</span><br><span class="line">        Dial: (&amp;net.Dialer&#123;</span><br><span class="line">            Timeout: timeout,</span><br><span class="line">        &#125;).Dial,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1><span id="java">Java</span><a href="#java" class="header-anchor">#</a></h1><h2><span id="biao-zhun-ku-jdk17">标准库(jdk17+)</span><a href="#biao-zhun-ku-jdk17" class="header-anchor">#</a></h2><h3><span id="timeout">timeout</span><a href="#timeout" class="header-anchor">#</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> HttpRequest.newBuilder()</span><br><span class="line">    .uri(URI.create(<span class="string">&quot;http://example.com&quot;</span>))</span><br><span class="line">    .timeout(Duration.ofSeconds(<span class="number">10</span>))</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure>

<h3><span id="connectiontimeout">connectionTimeout</span><a href="#connectiontimeout" class="header-anchor">#</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HttpClient.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> HttpClient.newBuilder()</span><br><span class="line">.connectTimeout(Duration.ofSeconds(<span class="number">10</span>))</span><br><span class="line">.version(HttpClient.Version.HTTP_1_1);</span><br></pre></td></tr></table></figure>

<h2><span id="reactor-netty">Reactor Netty</span><a href="#reactor-netty" class="header-anchor">#</a></h2><h3><span id="timeout">timeout</span><a href="#timeout" class="header-anchor">#</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HttpClient</span> <span class="variable">client</span> <span class="operator">=</span> HttpClient.create().responseTimeout(Duration.ofSeconds(<span class="number">10</span>));</span><br></pre></td></tr></table></figure>

<h3><span id="connectiontimeout">connectionTimeout</span><a href="#connectiontimeout" class="header-anchor">#</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">HttpClient</span> <span class="variable">client</span> <span class="operator">=</span> HttpClient.create().option(ChannelOption.CONNECT_TIMEOUT_MILLIS, <span class="number">5000</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Code</tag>
      </tags>
  </entry>
  <entry>
    <title>多语言编程 TLS配置参数设计</title>
    <url>/code/multi-lang-paradigm-tls-config-design/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#bei-jing">背景</a></li>
<li><a href="#tong-yong-can-shu">通用参数</a></li>
<li><a href="#go">Go</a></li>
<li><a href="#java">Java</a></li>
<li><a href="#javascript">JavaScript</a></li>
<li><a href="#kotlin">Kotlin</a></li>
<li><a href="#python">Python</a></li>
<li><a href="#rust">Rust</a></li>
</ul>
<!-- tocstop -->

</div>

<h1><span id="bei-jing">背景</span><a href="#bei-jing" class="header-anchor">#</a></h1><p>TLS(Transport Layer Security)是一种安全协议，用于在两个通信应用程序之间提供保密性和数据完整性。TLS是SSL(Secure Sockets Layer)的继任者。</p>
<p>不同的编程语言处理TLS配置的方式各有千秋, 本文针对TLS配置参数的设计进行探讨。</p>
<p>代码配置中，建议使用反映状态的参数名。</p>
<h1><span id="tong-yong-can-shu">通用参数</span><a href="#tong-yong-can-shu" class="header-anchor">#</a></h1><ul>
<li>tlsEnable: 是否启用TLS</li>
</ul>
<h1><span id="go">Go</span><a href="#go" class="header-anchor">#</a></h1><p>推荐使用方式一</p>
<p>方式一：</p>
<ul>
<li>tlsConfig *tls.Config: Go标准库的内置TLS结构体</li>
</ul>
<p>方式二：</p>
<p>由于Go不支持加密的私钥文件，推荐使用文件内容，而不是文件路径，避免敏感信息泄露。</p>
<ul>
<li>tlsCertContent []byte: 证书文件内容</li>
<li>tlsPrivateKeyContent []byte: 私钥文件内容</li>
<li>tlsMinVersion uint16: TLS最低版本</li>
<li>tlsMaxVersion uint16: TLS最高版本</li>
<li>tlsCipherSuites []uint16: TLS加密套件列表</li>
</ul>
<h1><span id="java">Java</span><a href="#java" class="header-anchor">#</a></h1><p>Java的TLS参数基本上都是基于keystore和truststore来配置的。一般常见设计如下参数：</p>
<ul>
<li>keyStorePath: keystore文件路径</li>
<li>keyStorePassword: keystore密码</li>
<li>trustStorePath: truststore文件路径</li>
<li>trustStorePassword: truststore密码</li>
<li>tlsVerificationDisabled: 是否禁用TLS校验</li>
<li>tlsHostnameVerificationDisabled: 是否禁用TLS主机名校验，仅部分框架支持。</li>
<li>tlsVersions: TLS版本列表</li>
<li>tlsCipherSuites: TLS加密套件列表</li>
</ul>
<h1><span id="javascript">JavaScript</span><a href="#javascript" class="header-anchor">#</a></h1><p>JavaScript可以使用标准库里的tls.SecureContextOptions</p>
<h1><span id="kotlin">Kotlin</span><a href="#kotlin" class="header-anchor">#</a></h1><p>kotlin的Tls与Java相同：</p>
<ul>
<li>keyStorePath: keystore文件路径</li>
<li>keyStorePassword: keystore密码</li>
<li>trustStorePath: truststore文件路径</li>
<li>trustStorePassword: truststore密码</li>
<li>tlsVerificationDisabled: 是否禁用TLS校验</li>
<li>tlsHostnameVerificationDisabled: 是否禁用TLS主机名校验，仅部分框架支持。</li>
<li>tlsVersions: TLS版本列表</li>
<li>tlsCipherSuites: TLS加密套件列表</li>
</ul>
<h1><span id="python">Python</span><a href="#python" class="header-anchor">#</a></h1><p>推荐使用方式一</p>
<p>方式一</p>
<ul>
<li>ssl.SSLContext: Python标准库的内置TLS结构体</li>
</ul>
<p>方式二</p>
<p>Python可以使用文件路径以及加密的私钥文件。</p>
<ul>
<li>tlsCertPath: 证书文件路径</li>
<li>tlsPrivateKeyPath: 私钥文件路径</li>
<li>tlsPrivateKeyPassword: 私钥密码</li>
<li>tlsMinVersion: TLS最低版本</li>
<li>tlsMaxVersion: TLS最高版本</li>
<li>tlsCipherSuites: TLS加密套件列表</li>
</ul>
<h1><span id="rust">Rust</span><a href="#rust" class="header-anchor">#</a></h1><p>由于常见的Rust TLS实现不支持加密的私钥文件，推荐使用文件内容，而不是文件路径，避免敏感信息泄露。 一般常见如下设计参数:</p>
<ul>
<li>tls_cert_content Vec<u8>: 证书内容</u8></li>
<li>tsl_private_key_content Vec<u8>: 私钥内容</u8></li>
<li>tls_versions: TLS版本列表</li>
<li>tls_cipher_suites: TLS加密套件列表</li>
<li>tls_verification_disabled: 是否禁用TLS校验</li>
</ul>
]]></content>
      <tags>
        <tag>Code</tag>
        <tag>多语言编程</tag>
      </tags>
  </entry>
  <entry>
    <title>多语言编程 返回多个不同类型的方法样例</title>
    <url>/code/multi-lang-return-obj-example/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#bei-jing">背景</a></li>
<li><a href="#c">C</a></li>
<li><a href="#c">C++</a></li>
<li><a href="#go">Go</a></li>
<li><a href="#java">Java</a></li>
<li><a href="#javascript">Javascript</a></li>
<li><a href="#kotlin">Kotlin</a><ul>
<li><a href="#shi-yong-any-lei-xing">使用Any类型</a></li>
<li><a href="#shi-yong-sealedclass">使用SealedClass</a></li>
</ul>
</li>
<li><a href="#python">Python</a></li>
<li><a href="#ruby">Ruby</a></li>
<li><a href="#rust">Rust</a></li>
<li><a href="#scala">Scala</a></li>
<li><a href="#typescript">TypeScript</a></li>
</ul>
<!-- tocstop -->

</div>

<h1><span id="bei-jing">背景</span><a href="#bei-jing" class="header-anchor">#</a></h1><p>你可能会在一些场景下碰到需要返回多个不同类型的方法。比如协议解析读取报文时，更具体地像kubernetes在开始解析Yaml的时候，怎么知道这个类型是属于Deployment还是Service？</p>
<h1><span id="c">C</span><a href="#c" class="header-anchor">#</a></h1><p>C语言通常通过使用Struct（结构体）和Union（联合体）的方式来实现这个功能，如下文例子</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">    MONKEY,</span><br><span class="line">    COW,</span><br><span class="line">    UNKNOWN</span><br><span class="line">&#125; AnimalType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span>* description;</span><br><span class="line">&#125; Monkey;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span>* description;</span><br><span class="line">&#125; Cow;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    AnimalType type;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        Monkey monkey;</span><br><span class="line">        Cow cow;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125; Animal;</span><br><span class="line"></span><br><span class="line">Animal <span class="title function_">createAnimal</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* animalType)</span> &#123;</span><br><span class="line">    Animal animal;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(animalType, <span class="string">&quot;Monkey&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        animal.type = MONKEY;</span><br><span class="line">        animal.monkey.description = <span class="string">&quot;I am a monkey!&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(animalType, <span class="string">&quot;Cow&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        animal.type = COW;</span><br><span class="line">        animal.cow.description = <span class="string">&quot;I am a cow!&quot;</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        animal.type = UNKNOWN;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> animal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    Animal animal1 = createAnimal(<span class="string">&quot;Monkey&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (animal1.type == MONKEY) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, animal1.monkey.description);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Animal animal2 = createAnimal(<span class="string">&quot;Cow&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (animal2.type == COW) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, animal2.cow.description);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Animal animal3 = createAnimal(<span class="string">&quot;Dog&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (animal3.type == UNKNOWN) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Unknown animal type\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1><span id="c">C++</span><a href="#c" class="header-anchor">#</a></h1><p>在C++中，我们可以使用基类指针来指向派生类的对象。可以使用动态类型识别（RTTI）来在运行时确定对象的类型</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdexcept&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> std::string <span class="title">toString</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monkey</span> : <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">std::string <span class="title">toString</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I am a monkey!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cow</span> : <span class="keyword">public</span> Animal &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">std::string <span class="title">toString</span><span class="params">()</span> <span class="type">const</span> <span class="keyword">override</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I am a cow!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Animal* <span class="title">createAnimal</span><span class="params">(<span class="type">const</span> std::string&amp; animalType)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (animalType == <span class="string">&quot;Monkey&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Monkey</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (animalType == <span class="string">&quot;Cow&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Cow</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;Unknown animal type: &quot;</span> + animalType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Animal* animal1 = <span class="built_in">createAnimal</span>(<span class="string">&quot;Monkey&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Monkey* monkey = <span class="built_in">dynamic_cast</span>&lt;Monkey*&gt;(animal1)) &#123;</span><br><span class="line">            std::cout &lt;&lt; monkey-&gt;<span class="built_in">toString</span>() &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> animal1;</span><br><span class="line"></span><br><span class="line">        Animal* animal2 = <span class="built_in">createAnimal</span>(<span class="string">&quot;Cow&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (Cow* cow = <span class="built_in">dynamic_cast</span>&lt;Cow*&gt;(animal2)) &#123;</span><br><span class="line">            std::cout &lt;&lt; cow-&gt;<span class="built_in">toString</span>() &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> animal2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">catch</span> (<span class="type">const</span> std::runtime_error&amp; e) &#123;</span><br><span class="line">        std::cerr &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1><span id="go">Go</span><a href="#go" class="header-anchor">#</a></h1><p>Go的常见处理方式，是返回一个接口或者**interface{}**类型。调用者使用Go语言类型断言来检查具体的类型</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Animal <span class="keyword">interface</span> &#123;</span><br><span class="line">	String() <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Monkey <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(m Monkey)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;I am a monkey!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Cow <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Cow)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;I am a cow!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createAnimal</span><span class="params">(typeName <span class="type">string</span>)</span></span> (Animal, <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="keyword">switch</span> typeName &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="string">&quot;Monkey&quot;</span>:</span><br><span class="line">		<span class="keyword">return</span> Monkey&#123;&#125;, <span class="literal">nil</span></span><br><span class="line">	<span class="keyword">case</span> <span class="string">&quot;Cow&quot;</span>:</span><br><span class="line">		<span class="keyword">return</span> Cow&#123;&#125;, <span class="literal">nil</span></span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;Unknown animal type: %s&quot;</span>, typeName)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	animal1, err := createAnimal(<span class="string">&quot;Monkey&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> monkey, ok := animal1.(Monkey); ok &#123;</span><br><span class="line">		fmt.Println(monkey)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	animal2, err := createAnimal(<span class="string">&quot;Cow&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> cow, ok := animal2.(Cow); ok &#123;</span><br><span class="line">		fmt.Println(cow)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1><span id="java">Java</span><a href="#java" class="header-anchor">#</a></h1><p>Java语言的常见处理方式，是返回Object类型或者一个基础类型。然后由调用方在进行instance of判断。或者Java17之后，可以使用模式匹配的方式来简化转型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiTypeReturnExample</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Monkey</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;I am a monkey!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Cow</span> &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;I am a cow!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">createAnimal</span><span class="params">(String type)</span> <span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Monkey&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Monkey</span>();</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Cow&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Cow</span>();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unknown animal type: &quot;</span> + type);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">animal1</span> <span class="operator">=</span> createAnimal(<span class="string">&quot;Monkey&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// java8 写法，后面如果明确用做精确的类型，需要强制转换</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (animal1 <span class="keyword">instanceof</span> Monkey) &#123;</span><br><span class="line">            System.out.println(animal1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">animal2</span> <span class="operator">=</span> createAnimal(<span class="string">&quot;Cow&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (animal2 <span class="keyword">instanceof</span> Cow) &#123;</span><br><span class="line">            System.out.println(animal2);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// java17 写法，不需要强制转换</span></span><br><span class="line">        <span class="keyword">if</span> (createAnimal(<span class="string">&quot;Monkey&quot;</span>) <span class="keyword">instanceof</span> Monkey animal3) &#123;</span><br><span class="line">            System.out.println(animal3);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (createAnimal(<span class="string">&quot;Cow&quot;</span>) <span class="keyword">instanceof</span> Cow animal4) &#123;</span><br><span class="line">            System.out.println(animal4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1><span id="javascript">Javascript</span><a href="#javascript" class="header-anchor">#</a></h1><p>动态类型语言，使用instanceof运算符判断</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;I am an animal&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monkey</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;I am a monkey&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cow</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;I am a cow&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createAnimal</span>(<span class="params">animalType</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (animalType) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;Monkey&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Monkey</span>();</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;Cow&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Cow</span>();</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Unknown animal type: <span class="subst">$&#123;animalType&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> animal1 = <span class="title function_">createAnimal</span>(<span class="string">&#x27;Monkey&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (animal1 <span class="keyword">instanceof</span> <span class="title class_">Monkey</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(animal1.<span class="title function_">toString</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> animal2 = <span class="title function_">createAnimal</span>(<span class="string">&#x27;Cow&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (animal2 <span class="keyword">instanceof</span> <span class="title class_">Cow</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(animal2.<span class="title function_">toString</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> animal3 = <span class="title function_">createAnimal</span>(<span class="string">&#x27;Dog&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(error.<span class="property">message</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1><span id="kotlin">Kotlin</span><a href="#kotlin" class="header-anchor">#</a></h1><p>Kotlin可以使用Sealed Class(密封类)和Any类型两种方式。使用Any的场景，与Java返回Object类似。Sealed Class更加安全、更方便一些。</p>
<h2><span id="shi-yong-any-lei-xing">使用Any类型</span><a href="#shi-yong-any-lei-xing" class="header-anchor">#</a></h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monkey</span>: <span class="type">Animal</span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I am a monkey!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cow</span>: <span class="type">Animal</span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I am a cow!&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">createAnimal</span><span class="params">(type: <span class="type">String</span>)</span></span>: Any &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">when</span> (type) &#123;</span><br><span class="line">        <span class="string">&quot;Monkey&quot;</span> -&gt; Monkey()</span><br><span class="line">        <span class="string">&quot;Cow&quot;</span> -&gt; Cow()</span><br><span class="line">        <span class="keyword">else</span> -&gt; <span class="keyword">throw</span> IllegalArgumentException(<span class="string">&quot;Unknown animal type: <span class="variable">$type</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> animal1 = createAnimal(<span class="string">&quot;Monkey&quot;</span>)</span><br><span class="line">    <span class="keyword">when</span> (animal1) &#123;</span><br><span class="line">        <span class="keyword">is</span> Monkey -&gt; println(animal1)</span><br><span class="line">        <span class="keyword">is</span> Cow -&gt; println(animal1)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> animal2 = createAnimal(<span class="string">&quot;Cow&quot;</span>)</span><br><span class="line">    <span class="keyword">when</span> (animal2) &#123;</span><br><span class="line">        <span class="keyword">is</span> Monkey -&gt; println(animal2)</span><br><span class="line">        <span class="keyword">is</span> Cow -&gt; println(animal2)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2><span id="shi-yong-sealedclass">使用SealedClass</span><a href="#shi-yong-sealedclass" class="header-anchor">#</a></h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Monkey</span>(<span class="keyword">val</span> info: String = <span class="string">&quot;I am a monkey!&quot;</span>) : Animal()</span><br><span class="line">    <span class="keyword">data</span> <span class="keyword">class</span> <span class="title class_">Cow</span>(<span class="keyword">val</span> info: String = <span class="string">&quot;I am a cow!&quot;</span>) : Animal()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">createAnimal</span><span class="params">(type: <span class="type">String</span>)</span></span>: Animal &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">when</span> (type) &#123;</span><br><span class="line">        <span class="string">&quot;Monkey&quot;</span> -&gt; Animal.Monkey()</span><br><span class="line">        <span class="string">&quot;Cow&quot;</span> -&gt; Animal.Cow()</span><br><span class="line">        <span class="keyword">else</span> -&gt; <span class="keyword">throw</span> IllegalArgumentException(<span class="string">&quot;Unknown animal type: <span class="variable">$type</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> animal1 = createAnimal(<span class="string">&quot;Monkey&quot;</span>)</span><br><span class="line">    <span class="keyword">when</span> (animal1) &#123;</span><br><span class="line">        <span class="keyword">is</span> Animal.Monkey -&gt; println(animal1.info)</span><br><span class="line">        <span class="keyword">is</span> Animal.Cow -&gt; println(animal1.info)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> animal2 = createAnimal(<span class="string">&quot;Cow&quot;</span>)</span><br><span class="line">    <span class="keyword">when</span> (animal2) &#123;</span><br><span class="line">        <span class="keyword">is</span> Animal.Monkey -&gt; println(animal2.info)</span><br><span class="line">        <span class="keyword">is</span> Animal.Cow -&gt; println(animal2.info)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1><span id="python">Python</span><a href="#python" class="header-anchor">#</a></h1><p>Python是动态类型的语言，可以简单基于一些条件返回不同类型的对象，然后在接收到返回值之后使用type()函数或isinstance()函数来确定其类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I am an animal&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monkey</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I am a monkey&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cow</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I am a cow&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_animal</span>(<span class="params">animal_type</span>):</span><br><span class="line">    <span class="keyword">if</span> animal_type == <span class="string">&quot;Monkey&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> Monkey()</span><br><span class="line">    <span class="keyword">elif</span> animal_type == <span class="string">&quot;Cow&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> Cow()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Unknown animal type: <span class="subst">&#123;animal_type&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    animal1 = create_animal(<span class="string">&quot;Monkey&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(animal1, Monkey):</span><br><span class="line">        <span class="built_in">print</span>(animal1)</span><br><span class="line"></span><br><span class="line">    animal2 = create_animal(<span class="string">&quot;Cow&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(animal2, Cow):</span><br><span class="line">        <span class="built_in">print</span>(animal2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h1><span id="ruby">Ruby</span><a href="#ruby" class="header-anchor">#</a></h1><p>Ruby也较为简单，在方法内部直接返回不同类型的对象。然后，可以使用<strong>is_a</strong>方法或<strong>class</strong>方法来确定返回对象的实际类型。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">to_s</span></span><br><span class="line">    <span class="string">&quot;I am an animal&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monkey</span> &lt; <span class="title class_ inherited__">Animal</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">to_s</span></span><br><span class="line">    <span class="string">&quot;I am a monkey&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cow</span> &lt; <span class="title class_ inherited__">Animal</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">to_s</span></span><br><span class="line">    <span class="string">&quot;I am a cow&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_animal</span>(<span class="params">animal_type</span>)</span><br><span class="line">  <span class="keyword">case</span> animal_type</span><br><span class="line">  <span class="keyword">when</span> <span class="string">&quot;Monkey&quot;</span></span><br><span class="line">    <span class="title class_">Monkey</span>.new</span><br><span class="line">  <span class="keyword">when</span> <span class="string">&quot;Cow&quot;</span></span><br><span class="line">    <span class="title class_">Cow</span>.new</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">raise</span> <span class="string">&quot;Unknown animal type: <span class="subst">#&#123;animal_type&#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  animal1 = create_animal(<span class="string">&quot;Monkey&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> animal1.is_a? <span class="title class_">Monkey</span></span><br><span class="line">    puts animal1</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  animal2 = create_animal(<span class="string">&quot;Cow&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> animal2.is_a? <span class="title class_">Cow</span></span><br><span class="line">    puts animal2</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>

<h1><span id="rust">Rust</span><a href="#rust" class="header-anchor">#</a></h1><p>在Rust中，可以使用enum（枚举）来创建一个持有多种不同类型的数据结构。然后使用match语句来做模式匹配。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fmt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    Monkey,</span><br><span class="line">    Cow,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">fmt</span>::Display <span class="keyword">for</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">fmt</span>(&amp;<span class="keyword">self</span>, f: &amp;<span class="keyword">mut</span> fmt::Formatter&lt;<span class="symbol">&#x27;_</span>&gt;) <span class="punctuation">-&gt;</span> fmt::<span class="type">Result</span> &#123;</span><br><span class="line">        <span class="keyword">match</span> <span class="keyword">self</span> &#123;</span><br><span class="line">            Animal::Monkey =&gt; <span class="built_in">write!</span>(f, <span class="string">&quot;I am a monkey!&quot;</span>),</span><br><span class="line">            Animal::Cow =&gt; <span class="built_in">write!</span>(f, <span class="string">&quot;I am a cow!&quot;</span>),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">create_animal</span>(animal_type: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;Animal, <span class="type">String</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">match</span> animal_type &#123;</span><br><span class="line">        <span class="string">&quot;Monkey&quot;</span> =&gt; <span class="title function_ invoke__">Ok</span>(Animal::Monkey),</span><br><span class="line">        <span class="string">&quot;Cow&quot;</span> =&gt; <span class="title function_ invoke__">Ok</span>(Animal::Cow),</span><br><span class="line">        _ =&gt; <span class="title function_ invoke__">Err</span>(<span class="built_in">format!</span>(<span class="string">&quot;Unknown animal type: &#123;&#125;&quot;</span>, animal_type)),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">match</span> <span class="title function_ invoke__">create_animal</span>(<span class="string">&quot;Monkey&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(animal) =&gt; <span class="keyword">match</span> animal &#123;</span><br><span class="line">            Animal::Monkey =&gt; <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, animal),</span><br><span class="line">            _ =&gt; (),</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, e),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">match</span> <span class="title function_ invoke__">create_animal</span>(<span class="string">&quot;Cow&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(animal) =&gt; <span class="keyword">match</span> animal &#123;</span><br><span class="line">            Animal::Cow =&gt; <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, animal),</span><br><span class="line">            _ =&gt; (),</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, e),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">match</span> <span class="title function_ invoke__">create_animal</span>(<span class="string">&quot;Dog&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(_) =&gt; (),</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, e),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1><span id="scala">Scala</span><a href="#scala" class="header-anchor">#</a></h1><p>scala中，可以使用sealed trait和case class来创建一个能够返回多种不同类型的方法。Sealed trait可以定义一个有限的子类集合，可以确保类型安全</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="class"><span class="keyword">trait</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">info</span></span>: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Monkey</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> info: <span class="type">String</span> = <span class="string">&quot;I am a monkey!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Cow</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> info: <span class="type">String</span> = <span class="string">&quot;I am a cow!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MultiTypeReturnExample</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">createAnimal</span></span>(animalType: <span class="type">String</span>): <span class="type">Animal</span> = &#123;</span><br><span class="line">    animalType <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;Monkey&quot;</span> =&gt; <span class="type">Monkey</span>()</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;Cow&quot;</span> =&gt; <span class="type">Cow</span>()</span><br><span class="line">      <span class="keyword">case</span> _ =&gt; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">IllegalArgumentException</span>(<span class="string">s&quot;Unknown animal type: <span class="subst">$animalType</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">val</span> animal1 = createAnimal(<span class="string">&quot;Monkey&quot;</span>)</span><br><span class="line">      animal1 <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Monkey</span>() =&gt; println(animal1.info)</span><br><span class="line">        <span class="keyword">case</span> _ =&gt;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">val</span> animal2 = createAnimal(<span class="string">&quot;Cow&quot;</span>)</span><br><span class="line">      animal2 <span class="keyword">match</span> &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Cow</span>() =&gt; println(animal2.info)</span><br><span class="line">        <span class="keyword">case</span> _ =&gt;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> e: <span class="type">IllegalArgumentException</span> =&gt; println(e.getMessage)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1><span id="typescript">TypeScript</span><a href="#typescript" class="header-anchor">#</a></h1><p>总得来说，和javascript区别不大</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">abstract</span> <span class="title function_">toString</span>(): <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Monkey</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">toString</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;I am a monkey&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cow</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">toString</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;I am a cow&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createAnimal</span>(<span class="params">animalType: <span class="built_in">string</span></span>): <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (animalType) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;Monkey&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Monkey</span>();</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;Cow&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Cow</span>();</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Unknown animal type: <span class="subst">$&#123;animalType&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> animal1 = <span class="title function_">createAnimal</span>(<span class="string">&#x27;Monkey&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (animal1 <span class="keyword">instanceof</span> <span class="title class_">Monkey</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(animal1.<span class="title function_">toString</span>());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> animal2 = <span class="title function_">createAnimal</span>(<span class="string">&#x27;Cow&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (animal2 <span class="keyword">instanceof</span> <span class="title class_">Cow</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(animal2.<span class="title function_">toString</span>());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> animal3 = <span class="title function_">createAnimal</span>(<span class="string">&#x27;Dog&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(error.<span class="property">message</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Code</tag>
        <tag>多语言编程</tag>
      </tags>
  </entry>
  <entry>
    <title>从ASCII到Unicode，以及UTF-8、UTF-16、UTF-32</title>
    <url>/code/unicode/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#unicode-qi-yuan">Unicode起源</a><ul>
<li><a href="#ascii">ASCII</a></li>
<li><a href="#ascii-bu-gou-yong-liao">ASCII不够用了</a></li>
</ul>
</li>
<li><a href="#unicode-jie-shao">Unicode介绍</a></li>
<li><a href="#utf-32-32-bit-unicode-transformation-format">UTF-32（32-bit Unicode Transformation Format）</a></li>
<li><a href="#utf-16-16-bit-unicode-transformation-format">UTF-16（16-bit Unicode Transformation Format）</a></li>
<li><a href="#utf-8-8-bit-unicode-transformation-format">UTF-8（8-bit Unicode Transformation Format）</a></li>
<li><a href="#kuo-zhan-zhi-shi">扩展知识</a><ul>
<li><a href="#jdk17-zhong-ying-wen-zi-fu-ji-nei-cun-zhan-yong-liang-jiang-di-liao-yi-ban">JDK17中英文字符集内存占用量降低了一半</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

</div>

<h1><span id="unicode-qi-yuan">Unicode起源</span><a href="#unicode-qi-yuan" class="header-anchor">#</a></h1><h2><span id="ascii">ASCII</span><a href="#ascii" class="header-anchor">#</a></h2><p>ASCII（American Standard Code for Information Interchange）是一种字符编码标准，它使用7位二进制数来表示128个字符，包括大小写字母、数字、标点符号、控制字符等。ASCII编码是由美国国家标准协会（ANSI）制定的，于1963年发布，是最早的字符编码标准之一。</p>
<h2><span id="ascii-bu-gou-yong-liao">ASCII不够用了</span><a href="#ascii-bu-gou-yong-liao" class="header-anchor">#</a></h2><p>随着计算机不仅仅用于英文，而是用于全球各种语言，ASCII编码已经不能满足需求，针对不同语言的编码方案也应运而生，这其中诞生了很多编码方案，比如GB2312、BIG5、ISO-8859等，这些字符集典型的就是将ASCII的最高位利用起来，将7位扩展到8位，这样就可以表示256个字符。比如ISO-8859-1就是将ASCII的最高位利用起来，表示了拉丁字母。ISO-8859-5表示了西里尔字母。</p>
<p>这些字符集各自不包含全部的字符，而且不兼容，这就导致了字符集混乱。这导致在一个文件中混用多种字符成为了不可能完成的事情。而Unicode改变了这一切，它的愿景就是Unicode官网中说到的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Everyone in the world should be able to use their own language on phones and computers.</span><br></pre></td></tr></table></figure>

<p>在早期，Unicode曾想过固定使用16位来表示字符，这就是UCS-2编码，也是UTF-16的前身，后面发现固定16位字符还是不够用，这才发展成了我们现在熟知的Unicode。</p>
<h1><span id="unicode-jie-shao">Unicode介绍</span><a href="#unicode-jie-shao" class="header-anchor">#</a></h1><p>Unicode是一个文本编码标准。Unicode通过一个唯一的数字来定义每个字符，不管平台、程序或语言。这个数字叫做码点（code point）。Unicode码点是从0x000000到0x10FFFF（十六进制），书写上通常使用U+打头，跟上至少4位十六进制数（不足则补0），如U+0041（字母A）、U+1F600（emoji 😀），理论上，Unicode可以定义1114112个字符。</p>
<p>Unicode的码点跟字符是怎么对应的呢？Unicode将这些码点分成了若干个区段，每个区段称为一个平面（plane），每个平面包含65536（对应低位的0x0000~0xffff）个码点。Unicode总共有17个平面，编号从0到16。Unicode的码点分布如下：</p>
<table>
<thead>
<tr>
<th>平面编号</th>
<th>码点区间</th>
<th>英文缩写</th>
<th>英文名</th>
<th>中文名</th>
</tr>
</thead>
<tbody><tr>
<td>0 号平面</td>
<td>U+000000 - U+00FFFF</td>
<td>BMP</td>
<td>Basic Multilingual Plane</td>
<td>基本多文种平面</td>
</tr>
<tr>
<td>1 号平面</td>
<td>U+010000 - U+01FFFF</td>
<td>SMP</td>
<td>Supplementary Multilingual Plane</td>
<td>多文种补充平面</td>
</tr>
<tr>
<td>2 号平面</td>
<td>U+020000 - U+02FFFF</td>
<td>SIP</td>
<td>Supplementary Ideographic Plane</td>
<td>表意文字补充平面</td>
</tr>
<tr>
<td>3 号平面</td>
<td>U+030000 - U+03FFFF</td>
<td>TIP</td>
<td>Tertiary Ideographic Plane</td>
<td>表意文字第三平面</td>
</tr>
<tr>
<td>4 号平面 ~ 13 号平面</td>
<td>U+040000 - U+0DFFFF</td>
<td>&#x2F;</td>
<td>已分配，但尚未使用</td>
<td>&#x2F;</td>
</tr>
<tr>
<td>14 号平面</td>
<td>U+0E0000 - U+0EFFFF</td>
<td>SSP</td>
<td>Supplementary Special-purpose Plane</td>
<td>特别用途补充平面</td>
</tr>
<tr>
<td>15 号平面</td>
<td>U+0F0000 - U+0FFFFF</td>
<td>PUA-A</td>
<td>Private Use Area-A</td>
<td>保留作为私人使用区 (A区)</td>
</tr>
<tr>
<td>16 号平面</td>
<td>U+100000 - U+10FFFF</td>
<td>PUA-B</td>
<td>Private Use Area-B</td>
<td>保留作为私人使用区 (B区)</td>
</tr>
</tbody></table>
<p>中文、英文均在0号平面，详细的分配可以参考Unicode的<a href="https://www.unicode.org/roadmaps/index.html">RoadMap</a>。</p>
<p>那么Unicode先定义了码点和字符之间的对应关系，但是如何存储在磁盘上，如何在网络中传输，这就引入了编码方式，编码方式决定了Unicode的码点如何转换为字节流。这就是Unicode定义的三种编码方式：UTF-32、UTF-16、UTF-8。</p>
<h1><span id="utf-32-32-bit-unicode-transformation-format">UTF-32（32-bit Unicode Transformation Format）</span><a href="#utf-32-32-bit-unicode-transformation-format" class="header-anchor">#</a></h1><p>在介绍完Unicode之后，UTF-32是最简单、最容易想到的一种编码方式，直接将Unicode的码点以32位整数的方式存储起来。其中Rust的字符类型<code>char</code>，就使用32位值来表示Unicode字符。</p>
<p>但是这种方式也有很显然的缺点，就是浪费空间，实际Unicode的范围，只需要21位就可以表示了，变长编码就应运而生。</p>
<h1><span id="utf-16-16-bit-unicode-transformation-format">UTF-16（16-bit Unicode Transformation Format）</span><a href="#utf-16-16-bit-unicode-transformation-format" class="header-anchor">#</a></h1><p>这里我想给大家讲一个背景知识，编码方案的扩展，通常会尝试去兼容旧的编码方案，这使得新的编辑器可以打开旧的文件，如果没有用到新的字符，那么新的文件也可以被旧的编辑器打开。这使得演进更加平滑，更易落地。</p>
<p>那就不得不先说一下UCS-2编码方案，如前所述，UCS-2想通过固定16位来表示字符，虽然它最终失败了，但是也影响了很多的系统，比如Windows、Jdk。</p>
<p>UTF-16编码就以兼容UCS-2编码、变长为两个目标，UTF-16的编码规则</p>
<ul>
<li>① 对于码点小于等于U+FFFF的字符，直接使用16位表示，兼容UCS-2</li>
<li>② 对于码点小于等于U+10FFFF的字符，使用两个16位表示</li>
</ul>
<blockquote>
<p>这个补丁机制也常被人称作是surrogate。</p>
</blockquote>
<p>对于变长编码来说，对于文件中的任意一个字符，怎么能判断出来这是场景①的字符，还是场景②的第一个字符？抑或是场景②的第二个字符？</p>
<p>Unicode给出的答案是，通过在BMP中舍弃U+D800到U+DFFF的码点，这个区间被称为代理对（surrogate pair），这个区间的码点不会被分配给字符，这样就可以通过这个区间来判断是场景①还是场景②。如果读取的时候，发现前两个字节是D8到DB，那么就是场景②的第一个字符；如果是DC到DF，那么就是场景②的第二个字符；否则就是场景①的字符。</p>
<ul>
<li>高代理（High-half surrogates）：范围是0xD800~0xDBFF，二进制范围为1101 1000 0000 ~ 1101 1111 1111，这也代表着高代理的前六位一定是110110。</li>
<li>低代理（Low-half surrogates）：范围是0xDC00~0xDFFF，二进制范围为1101 1100 0000 ~ 1101 1111 1111，这也代表着低代理的前六位一定是110111。</li>
</ul>
<p>那么聪明的读者应该分析出来了，使用两个16位表示，由于存在代理对的固定部分，剩余的有效位还剩下20位。这20位恰好可以覆盖从U+010000到U+10FFFF的码点范围。由于U+0000-U+FFFF已经在场景①中覆盖，通过将码点减去0x10000，范围就变成了0x000000~0x0FFFFF，恰好是20位整数。</p>
<h1><span id="utf-8-8-bit-unicode-transformation-format">UTF-8（8-bit Unicode Transformation Format）</span><a href="#utf-8-8-bit-unicode-transformation-format" class="header-anchor">#</a></h1><p>UTF-8的编码规则</p>
<ul>
<li>① 对于码点小于等于U+007F的字符，直接使用8位表示，兼容ASCII。</li>
<li>② 对于码点小于等于U+07FF的字符，使用两个8位表示，其中有效位为11位。</li>
<li>③ 对于码点小于等于U+FFFF的字符，使用三个8位表示，其中有效位为16位。</li>
<li>④ 对于码点小于等于U+10FFFF的字符，使用四个8位表示，其中有效位为21位。</li>
<li>⑤ 使用n个字节（n&gt;1）来表示一个字符时，第一个字节的前n位都是1，第n+1位是0，后面的字节的前两位都是10</li>
</ul>
<p>那么对于一个字节，就可以通过首位是不是1，来判断是1个字节还是n个字节，再通过第二个字节判断是否是首位，最后通过首位来判断字节的个数。</p>
<p>由于UTF-8的有效位最大可达21位，这也就使得UTF-8不用像UTF-16那样减去0x10000。</p>
<p>通过兼容ASCII，最短只用1个字节，这使得UTF-8成为了堪称最流行的编码方式，如果不需要兼容UCS-2，那么几乎可以说UTF-8是最好的选择，堪称当前事实上的标准。值得一提的是，UTF-8的主要设计者，也是Unix的创始人之一，Go语言的设计者之一，<strong>Ken Thompson</strong>。</p>
<h1><span id="kuo-zhan-zhi-shi">扩展知识</span><a href="#kuo-zhan-zhi-shi" class="header-anchor">#</a></h1><h2><span id="jdk17-zhong-ying-wen-zi-fu-ji-nei-cun-zhan-yong-liang-jiang-di-liao-yi-ban">JDK17中英文字符集内存占用量降低了一半</span><a href="#jdk17-zhong-ying-wen-zi-fu-ji-nei-cun-zhan-yong-liang-jiang-di-liao-yi-ban" class="header-anchor">#</a></h2><p>读者可能会觉得JDK17中中文字符内存占用降低一半是从UTF-16切换到UTF-8导致的，但实则不然，对于JDK来说，切换一种编码方式可谓是伤筋动骨，JDK17通过了JEP254提案，通过添加一个标志位，如果字符串的字符都是ISO-8859-1&#x2F;Latin-1字符，那么就使用一个字节进行存储。</p>
]]></content>
      <tags>
        <tag>Unicode</tag>
      </tags>
  </entry>
  <entry>
    <title>业务配置中心的实现</title>
    <url>/config/business-config-center-impl/</url>
    <content><![CDATA[<h1><span id="qian-yan">前言</span><a href="#qian-yan" class="header-anchor">#</a></h1><p>之前在InfoQ的《华为云物联网四年配置中心实践》文章中分享了业务配置中心。</p>
<p>本文讲述业务配置中心（下文简述为配置中心）的关键技术和实现方式。华为云物联网平台按照本文的实现方式实现了一个业务配置中心，该配置中心2020年1月上线，平稳运行至今。</p>
<h1><span id="gai-nian">概念</span><a href="#gai-nian" class="header-anchor">#</a></h1><h2><span id="yun-wei-pei-zhi">运维配置</span><a href="#yun-wei-pei-zhi" class="header-anchor">#</a></h2><p>和用户无关，通常为集群界级别的配置，程序只会进行读取，如数据库配置、邮箱服务器配置、网卡配置、子网地址配置等。</p>
<h2><span id="ye-wu-pei-zhi">业务配置</span><a href="#ye-wu-pei-zhi" class="header-anchor">#</a></h2><p>作为SaaS 服务，每个用户在上面都有一些业务配置。如用户的证书配置、用户服务器的流控配置等，这些业务配置相对<strong>运维配置</strong>来说更加复杂，且可能会有唯一性限制，如按用户 id 唯一。这部分配置数据一般由用户操作触发，代码动态写入，并且通知到各个微服务实例。通常，我们希望这些配置能在界面展示，且支持人为修改。上述逻辑如果由各微服务自己实现，会存在大量重复代码，并且质量无法保证。我们希望由一个公共组件来统一实现这个能力。开源或体量较小的项目就不会选择依赖一个配置中心，而是直接通过连接数据库或etcd来解决问题</p>
<h2><span id="env">env</span><a href="#env" class="header-anchor">#</a></h2><p>代表一个部署环境。</p>
<h2><span id="cluster">cluster</span><a href="#cluster" class="header-anchor">#</a></h2><p>代表环境下的集群。常见于单环境下蓝绿发布，蓝集群、绿集群、金丝雀集群等。</p>
<h2><span id="pei-zhi">配置</span><a href="#pei-zhi" class="header-anchor">#</a></h2><p>配置名称，如用户证书配置、用户流控配置等。</p>
<h2><span id="key">Key</span><a href="#key" class="header-anchor">#</a></h2><p>配置的唯一键，如用户id。</p>
<h2><span id="value">Value</span><a href="#value" class="header-anchor">#</a></h2><p>配置唯一键对应的值。</p>
<h1><span id="pei-zhi-zhong-xin-she-ji-geng-gai">配置中心设计梗概</span><a href="#pei-zhi-zhong-xin-she-ji-geng-gai" class="header-anchor">#</a></h1><h2><span id="ye-wu-pei-zhi-te-dian">业务配置特点</span><a href="#ye-wu-pei-zhi-te-dian" class="header-anchor">#</a></h2><ul>
<li>虽然业务配置写入可能存在并发，但并发量不大，频率较低。</li>
<li>业务配置常常以用户为id，单集群用户量有限，一般不超过5万。</li>
</ul>
<h2><span id="pei-zhi-zhong-xin-yao-jie-jue-de-wen-ti">配置中心要解决的问题</span><a href="#pei-zhi-zhong-xin-yao-jie-jue-de-wen-ti" class="header-anchor">#</a></h2><p><img src="/config/business-config-center-impl/business-config-center-impl1.png" alt="business-config-center-impl1"></p>
<h2><span id="she-ji-yao-dian">设计要点</span><a href="#she-ji-yao-dian" class="header-anchor">#</a></h2><ul>
<li>单配置要求有配置id，每个id上通过version的乐观并发控制来解决多版本冲突问题</li>
<li>通知不追求可靠，应用程序和配置中心断链无法接收通知的场景下，通过定期同步数据来保证数据的可靠</li>
<li>支持Schema的变更，因Schema变更不频繁，也采用version的乐观并发控制来解决多版本冲突问题</li>
</ul>
<h2><span id="tong-zhi-shi-fou-bao-han-xiao-xi-nei-rong">通知是否包含消息内容</span><a href="#tong-zhi-shi-fou-bao-han-xiao-xi-nei-rong" class="header-anchor">#</a></h2><p>我认为应该只通知Key，具体的数值让应用程序再去配置中心查询。仅通知Key实现简洁易懂。同时通知Key&amp;Value需要多考虑定期同步和通知两条通道并发，可能引起的竞态冲突。</p>
<h1><span id="pei-zhi-zhong-xin-ye-wu-liu-cheng">配置中心业务流程</span><a href="#pei-zhi-zhong-xin-ye-wu-liu-cheng" class="header-anchor">#</a></h1><p>本小节描述业务配置中心的所有业务流程，并试图从交互中抽象出与具体实现无关的接口</p>
<h2><span id="pei-zhi-de-zeng-shan-gai-cha">配置的增删改查</span><a href="#pei-zhi-de-zeng-shan-gai-cha" class="header-anchor">#</a></h2><p><img src="/config/business-config-center-impl/business-config-center-impl2.png" alt="business-config-center-impl2"></p>
<h2><span id="pei-zhi-zhi-de-zeng-shan-gai-cha">配置值的增删改查</span><a href="#pei-zhi-zhi-de-zeng-shan-gai-cha" class="header-anchor">#</a></h2><p><img src="/config/business-config-center-impl/business-config-center-impl3.png" alt="business-config-center-impl3"></p>
<h2><span id="ding-qi-tong-bu">定期同步</span><a href="#ding-qi-tong-bu" class="header-anchor">#</a></h2><p>分布式场景下，通知有可能无法送达，如程序陷入网络中断（或长gc），通知消息送达超时，待程序恢复后，数据不再准确。因此需要对数据做定期同步，提高可靠性。</p>
<p><img src="/config/business-config-center-impl/business-config-center-impl4.png" alt="business-config-center-impl4"></p>
<p>同步过程中，仅仅请求交互id和version，避免传输大量数据。应用程序接收到需要同步的数据后：</p>
<ul>
<li>删除操作，触发删除通知，从本地缓存中移除数据。</li>
<li>添加、修改操作，向配置中心查询最新数据，触发通知并写入本地缓存。</li>
</ul>
<h2><span id="fu-wu-qi-dong">服务启动</span><a href="#fu-wu-qi-dong" class="header-anchor">#</a></h2><p>服务启动也可看做是一个同步的流程，只是需要同步大量的数据添加。为了避免向配置中心频繁大量的请求，引入批量操作来减轻压力</p>
<p><img src="/config/business-config-center-impl/business-config-center-impl5.png" alt="business-config-center-impl5"></p>
<h2><span id="xian-zhi">限制</span><a href="#xian-zhi" class="header-anchor">#</a></h2><p>该配置中心设计思路依赖客户端可把数据全量放入到内存中，如用户量太大，则不适合采用这种模式。</p>
<p>注：一个节省内存的思路是，内存中只放置全量的id和version，数据只有当用到的时候再去查询。这个思路要求配置中心持久化一些老旧数据以供以下场景的查询使用</p>
<ul>
<li><p>业务流程中，需要使用该配置值的。</p>
</li>
<li><p>回调业务程序修改的时候，需要提供旧值的。</p>
</li>
</ul>
<p>除此之外没有任何区别。</p>
<h1><span id="ye-wu-pei-zhi-chou-xiang-shi-xian">业务配置抽象实现</span><a href="#ye-wu-pei-zhi-chou-xiang-shi-xian" class="header-anchor">#</a></h1><p>从上述描述的业务场景，我们抽象出业务配置中心的交互接口和抽象实现。接口的Swagger Yaml已上传到Github：<a href="https://gist.github.com/Shoothzj/68c9c2ecae72cc2a125184e95b0a741e">https://gist.github.com/Shoothzj/68c9c2ecae72cc2a125184e95b0a741e</a></p>
<h2><span id="pei-zhi-xiang-guan-jie-kou">配置相关接口</span><a href="#pei-zhi-xiang-guan-jie-kou" class="header-anchor">#</a></h2><ul>
<li>提供env、cluster、配置名称、配置Schema、配置版本号添加配置</li>
<li>提供env、cluster、配置名称删除配置</li>
<li>提供env、cluster、配置名称、新Schema、新Version来修改配置</li>
<li>提供env、cluster、配置名称来查询配置</li>
</ul>
<h2><span id="pei-zhi-zhi-xiang-guan-jie-kou">配置值相关接口</span><a href="#pei-zhi-zhi-xiang-guan-jie-kou" class="header-anchor">#</a></h2><ul>
<li>提供env、cluster、配置名称、Key、Value来添加配置值</li>
<li>提供env、cluster、Key、ValueVersion（可选）来删除配置值</li>
<li>提供env、cluster、Key、Value、ValueVersion（可选）修改配置值</li>
<li>提供env、cluster、Key查询配置值</li>
<li>根据env、cluster、应用程序当前的配置数据来做定期同步</li>
<li>根据Key列表批量查询配置值</li>
</ul>
<h2><span id="tong-zhi-xiang-guan-jie-kou">通知相关接口</span><a href="#tong-zhi-xiang-guan-jie-kou" class="header-anchor">#</a></h2><ul>
<li>通知某env某cluster下，配置项中的一个Key发生变化，新增、修改或是删除。可选方式有HTTP长链接（Inspired by Apollo）、Mqtt、WebSocket等。</li>
</ul>
<h2><span id="pei-zhi-zhong-xin-cun-chu-ceng-chou-xiang-shi-xian">配置中心存储层抽象实现</span><a href="#pei-zhi-zhong-xin-cun-chu-ceng-chou-xiang-shi-xian" class="header-anchor">#</a></h2><p>配置中心存储层需要存储<strong>配置</strong>和<strong>配置值</strong>数据，支持UpdateByVersion，且需要捕捉数据的变化，用来通知到应用程序</p>
<h2><span id="fu-wu-fa-xian-chou-xiang-shi-xian">服务发现抽象实现</span><a href="#fu-wu-fa-xian-chou-xiang-shi-xian" class="header-anchor">#</a></h2><p>为了使应用程序连接到配置中心，需要一个发现机制可以让应用程序感知到配置中心的地址。高可用的方式很多，如K8s发现、ZooKeeper、Etcd、ServiceComb、业务环境变量注入ELB地址（ELB后端挂载配置中心的地址）等。</p>
<h2><span id="chou-xiang-zong-jie">抽象总结</span><a href="#chou-xiang-zong-jie" class="header-anchor">#</a></h2><p><img src="/config/business-config-center-impl/business-config-center-impl6.png" alt="business-config-center-impl6"></p>
<p>根据这个抽象，我们可以进行关键技术点选型，来实现业务配置中心。</p>
<h1><span id="pei-zhi-zhong-xin-shi-xian">配置中心实现</span><a href="#pei-zhi-zhong-xin-shi-xian" class="header-anchor">#</a></h1><h2><span id="hua-wei-yun-wu-lian-wang-pei-zhi-zhong-xin-shi-xian">华为云物联网配置中心实现</span><a href="#hua-wei-yun-wu-lian-wang-pei-zhi-zhong-xin-shi-xian" class="header-anchor">#</a></h2><p><img src="/config/business-config-center-impl/business-config-center-impl7.png" alt="business-config-center-impl7"></p>
<ul>
<li>env+cluster+config组成数据表的名称</li>
<li>一个key、value对应一行数据</li>
</ul>
<h2><span id="ling-yi-chong-shi-xian-fang-shi">另一种实现方式</span><a href="#ling-yi-chong-shi-xian-fang-shi" class="header-anchor">#</a></h2><p>只要实现上述接口和抽象能力，都可以实现业务配置中心，也可以这么实现</p>
<p><img src="/config/business-config-center-impl/business-config-center-impl8.png" alt="business-config-center-impl8"></p>
<ul>
<li>env+cluster+config+key 组合成etcd的key</li>
<li>一个key、value对应一个键值对</li>
</ul>
<h2><span id="you-yi-chong-shi-xian-fang-shi">又一种实现方式</span><a href="#you-yi-chong-shi-xian-fang-shi" class="header-anchor">#</a></h2><p>当然也可以</p>
<p><img src="/config/business-config-center-impl/business-config-center-impl9.png" alt="business-config-center-impl9"></p>
<ul>
<li>env+cluster+config+key 组合成RocksDB的key</li>
<li>一个key、value对应一个键值对</li>
</ul>
]]></content>
      <tags>
        <tag>config</tag>
      </tags>
  </entry>
  <entry>
    <title>开发一个filebeat output websocket插件</title>
    <url>/filebeat/filebeat-output-websocket/</url>
    <content><![CDATA[<p>开发一个filebeat的<code>websocket</code>插件， 代码仓地址: <a href="https://github.com/shoothzj/beats_output_websocket">https://github.com/shoothzj/beats_output_websocket</a></p>
<h2><span id="yin-ru-dui-beat-de-yi-lai">引入对<code>beat</code>的依赖</span><a href="#yin-ru-dui-beat-de-yi-lai" class="header-anchor">#</a></h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">go get github.com/elastic/beats/v7</span><br></pre></td></tr></table></figure>

<h2><span id="ding-yi-zai-filebeat-zhong-de-pei-zhi-wen-jian">定义在filebeat中的配置文件</span><a href="#ding-yi-zai-filebeat-zhong-de-pei-zhi-wen-jian" class="header-anchor">#</a></h2><p><code>filebeat</code>通常以配置文件的方式加载插件。让我们定义一下必须的配置，就像<code>elasticsearch</code>中的连接地址等等一样。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">output.websocket:</span></span><br><span class="line">  <span class="comment"># worker</span></span><br><span class="line">  <span class="comment"># 用于工作的websocket客户端数量</span></span><br><span class="line">  <span class="attr">workers:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># 日志批量的最大大小</span></span><br><span class="line">  <span class="attr">batch_size:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># 重试的最大次数，0代表不重试</span></span><br><span class="line">  <span class="attr">retry_limit:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># conn</span></span><br><span class="line">  <span class="comment"># ws/wss</span></span><br><span class="line">  <span class="attr">schema:</span> <span class="string">&quot;ws&quot;</span></span><br><span class="line">  <span class="comment"># websocket连接地址</span></span><br><span class="line">  <span class="attr">addr:</span> <span class="string">&quot;localhost:8080&quot;</span></span><br><span class="line">  <span class="comment"># websocket路径</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&quot;/echo&quot;</span></span><br><span class="line">  <span class="comment"># websocket心跳间隔，用于保活</span></span><br><span class="line">  <span class="attr">ping_interval:</span> <span class="number">30</span></span><br></pre></td></tr></table></figure>

<h3><span id="go-wen-jian-zhong-de-pei-zhi">go文件中的配置</span><a href="#go-wen-jian-zhong-de-pei-zhi" class="header-anchor">#</a></h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> clientConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="comment">// Number of worker goroutines publishing log events</span></span><br><span class="line">	Workers <span class="type">int</span> <span class="string">`config:&quot;workers&quot; validate:&quot;min=1&quot;`</span></span><br><span class="line">	<span class="comment">// Max number of events in a batch to send to a single client</span></span><br><span class="line">	BatchSize <span class="type">int</span> <span class="string">`config:&quot;batch_size&quot; validate:&quot;min=1&quot;`</span></span><br><span class="line">	<span class="comment">// Max number of retries for single batch of events</span></span><br><span class="line">	RetryLimit <span class="type">int</span> <span class="string">`config:&quot;retry_limit&quot;`</span></span><br><span class="line">	<span class="comment">// Schema WebSocket Schema</span></span><br><span class="line">	Schema <span class="type">string</span> <span class="string">`config:&quot;schema&quot;`</span></span><br><span class="line">	<span class="comment">// Addr WebSocket Addr</span></span><br><span class="line">	Addr <span class="type">string</span> <span class="string">`config:&quot;addr&quot;`</span></span><br><span class="line">	<span class="comment">// Path WebSocket Path</span></span><br><span class="line">	Path <span class="type">string</span> <span class="string">`config:&quot;path&quot;`</span></span><br><span class="line">	<span class="comment">// PingInterval WebSocket PingInterval</span></span><br><span class="line">	PingInterval <span class="type">int</span> <span class="string">`config:&quot;ping_interval&quot;`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2><span id="chu-shi-hua-jia-zai-cha-jian">初始化加载插件</span><a href="#chu-shi-hua-jia-zai-cha-jian" class="header-anchor">#</a></h2><h3><span id="jia-zai-cha-jian">加载插件</span><a href="#jia-zai-cha-jian" class="header-anchor">#</a></h3><p>在某个init函数中注册插件</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	outputs.RegisterType(<span class="string">&quot;websocket&quot;</span>, newWsOutput)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在<code>newWsOutput</code>中卸载配置，并提供配置给<code>WebSocket</code>客户端</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">newWsOutput</span><span class="params">(_ outputs.IndexManager, _ beat.Info, stats outputs.Observer, cfg *common.Config)</span></span> (outputs.Group, <span class="type">error</span>) &#123;</span><br><span class="line">	config := clientConfig&#123;&#125;</span><br><span class="line">	<span class="comment">// 卸载配置，将配置用于初始化WebSocket客户端</span></span><br><span class="line">	<span class="keyword">if</span> err := cfg.Unpack(&amp;config); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> outputs.Fail(err)</span><br><span class="line">	&#125;</span><br><span class="line">	clients := <span class="built_in">make</span>([]outputs.NetworkClient, config.Workers)</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; config.Workers; i++ &#123;</span><br><span class="line">		clients[i] = &amp;wsClient&#123;</span><br><span class="line">			stats:  stats,</span><br><span class="line">			Schema: config.Schema,</span><br><span class="line">			Host:   config.Addr,</span><br><span class="line">			Path:   config.Path,</span><br><span class="line">			PingInterval: config.PingInterval,</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> outputs.SuccessNet(<span class="literal">true</span>, config.BatchSize, config.RetryLimit, clients)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2><span id="chu-shi-hua-websocket-ke-hu-duan">初始化<code>WebSocket</code>客户端</span><a href="#chu-shi-hua-websocket-ke-hu-duan" class="header-anchor">#</a></h2><p><code>WebSocket</code>客户端不仅仅是一个<code>WebSocket</code>客户端，而且还需要实现<code>filebeat</code>中的<code>NetworkClient</code>接口，接下来，让我们来关注接口中的每一个方法的作用及实现</p>
<h3><span id="string-jie-kou">String()接口</span><a href="#string-jie-kou" class="header-anchor">#</a></h3><p><code>String</code>作为客户端的名字，用来标识日志以及指标。是最简单的一个接口</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w *wsClient)</span></span> String() <span class="type">string</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;websocket&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="connect-jie-kou">Connect()接口</span><a href="#connect-jie-kou" class="header-anchor">#</a></h3><p><code>Connect</code>用来初始化客户端</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w *wsClient)</span></span> Connect() <span class="type">error</span> &#123;</span><br><span class="line">	u := url.URL&#123;Scheme: w.Schema, Host: w.Host, Path: w.Path&#125;</span><br><span class="line">	dial, _, err := websocket.DefaultDialer.Dial(u.String(), <span class="literal">nil</span>)</span><br><span class="line">	<span class="keyword">if</span> err == <span class="literal">nil</span> &#123;</span><br><span class="line">		w.conn = dial</span><br><span class="line">		ticker := time.NewTicker(time.Duration(w.PingInterval) * time.Second)</span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">			<span class="keyword">for</span> <span class="keyword">range</span> ticker.C &#123;</span><br><span class="line">				w.conn.WriteMessage(websocket.PingMessage, <span class="literal">nil</span>)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;()</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		time.Sleep(<span class="number">10</span> * time.Second)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，这里初始化失败，需要<code>Sleep</code>一段时间，否则，filebeat会一直重试。这绝非是你想要的。或许对于场景来说，退避重试可能会更好</p>
<h3><span id="close-jie-kou">Close()接口</span><a href="#close-jie-kou" class="header-anchor">#</a></h3><p>关闭客户端，也是很简单的接口</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w *wsClient)</span></span> Close() <span class="type">error</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> w.conn.Close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="publish-jie-kou">Publish()接口</span><a href="#publish-jie-kou" class="header-anchor">#</a></h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w *wsClient)</span></span> Publish(_ context.Context, batch publisher.Batch) <span class="type">error</span> &#123;</span><br><span class="line">	events := batch.Events()</span><br><span class="line">	<span class="comment">// 记录这批日志</span></span><br><span class="line">	w.stats.NewBatch(<span class="built_in">len</span>(events))</span><br><span class="line">	failEvents, err := w.PublishEvents(events)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="comment">// 如果发送正常，则ACK</span></span><br><span class="line">		batch.ACK()</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// 发送失败，则重试。受RetryLimit的限制</span></span><br><span class="line">		batch.RetryEvents(failEvents)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w *wsClient)</span></span> PublishEvents(events []publisher.Event) ([]publisher.Event, <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="keyword">for</span> i, event := <span class="keyword">range</span> events &#123;</span><br><span class="line">		err := w.publishEvent(&amp;event)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="comment">// 如果单条消息发送失败，则将剩余的消息直接重试</span></span><br><span class="line">			<span class="keyword">return</span> events[i:], err</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(w *wsClient)</span></span> publishEvent(event *publisher.Event) <span class="type">error</span> &#123;</span><br><span class="line">	bytes, err := encode(&amp;event.Content)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="comment">// 如果编码失败，就不重试了，重试也不会成功</span></span><br><span class="line">		<span class="comment">// encode error, don&#x27;t retry.</span></span><br><span class="line">		<span class="comment">// consider being success</span></span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	err = w.conn.WriteMessage(websocket.TextMessage, bytes)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="comment">// 写入WebSocket Server失败</span></span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="bian-ma">编码</span><a href="#bian-ma" class="header-anchor">#</a></h3><p>编码的逻辑因人而异，事实上，这可能是大家最大的差异所在。这里只是做一个简单地例子</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> LogOutput <span class="keyword">struct</span> &#123;</span><br><span class="line">	Timestamp time.Time <span class="string">`json:&quot;timestamp&quot;`</span></span><br><span class="line">	Message   <span class="type">string</span>    <span class="string">`json:&quot;message&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">encode</span><span class="params">(event *beat.Event)</span></span> ([]<span class="type">byte</span>, <span class="type">error</span>) &#123;</span><br><span class="line">	logOutput := &amp;LogOutput&#123;&#125;</span><br><span class="line">	value, err := event.Fields.GetValue(<span class="string">&quot;message&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	logOutput.Timestamp = event.Timestamp</span><br><span class="line">	logOutput.Message = value.(<span class="type">string</span>)</span><br><span class="line">	<span class="keyword">return</span> json.Marshal(logOutput)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3><span id="zui-hou-shi-wo-men-de-wsclient">最后是我们的<code>wsclient</code></span><a href="#zui-hou-shi-wo-men-de-wsclient" class="header-anchor">#</a></h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> wsClient <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="comment">// construct field</span></span><br><span class="line">	Schema       <span class="type">string</span></span><br><span class="line">	Host         <span class="type">string</span></span><br><span class="line">	Path         <span class="type">string</span></span><br><span class="line">	PingInterval <span class="type">int</span></span><br><span class="line"></span><br><span class="line">	stats outputs.Observer</span><br><span class="line">	conn  *websocket.Conn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2><span id="tian-jia-e-wai-de-gong-neng-da-bao-diu-qi">添加额外的功能：大包丢弃</span><a href="#tian-jia-e-wai-de-gong-neng-da-bao-diu-qi" class="header-anchor">#</a></h2><p>你可能会想保护你的<code>WebSocket</code>服务器，避免接收到超级大的日志。我们可以在配置项中添加一个配置</p>
<p>maxLen用来限制日志长度，超过maxLen的日志直接丢弃。为什么不使用<code>filebeat</code>中的<code>max_bytes</code>？</p>
<p>因为<code>filebeat</code>中<code>max_bytes</code>的默认行为是截断，截断的日志在某些场景下不如丢弃。（比如，日志是json格式，截断后格式无法解析）</p>
<h3><span id="pei-zhi-zhong-tian-jia-maxlen">配置中添加maxLen</span><a href="#pei-zhi-zhong-tian-jia-maxlen" class="header-anchor">#</a></h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">max_len:</span> <span class="number">1024</span></span><br></pre></td></tr></table></figure>

<p>省略掉那些重复的添加结构体，读取<code>max_len</code>在encode的时候忽略掉</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">s := value.(<span class="type">string</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(s) &gt;= w.MaxLen &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>filebeat</tag>
        <tag>websocket</tag>
      </tags>
  </entry>
  <entry>
    <title>Gin Web项目最佳实践</title>
    <url>/gin/gin-project-best-practice/</url>
    <content><![CDATA[<p>本文包含，Gin项目推荐布局，一些最佳实践等等。</p>
<h2><span id="gin-xiang-mu-tui-jian-bu-ju">Gin项目推荐布局</span><a href="#gin-xiang-mu-tui-jian-bu-ju" class="header-anchor">#</a></h2><p>假设项目名称叫Hearth</p>
<ul>
<li>xxx、yyy代表大块的业务区分：如用户、订单、支付</li>
<li>aaa、bbb代表小块的业务区分：如(用户的)登录、注册、查询</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">example/</span><br><span class="line">|-- cmd/</span><br><span class="line">|   |-- production/</span><br><span class="line">|       |-- hearth.go</span><br><span class="line">|   |-- local/</span><br><span class="line">|       |-- hearth_local.go</span><br><span class="line">|-- pkg/</span><br><span class="line">|   |-- apimodel/ 存放所有的ApiModel，用oapi-codegen解析uadp yaml来生成</span><br><span class="line">|   |-- boot/</span><br><span class="line">|       |-- boot.go //装备Struct，用于Lauch整个项目</span><br><span class="line">|   |-- handler/</span><br><span class="line">|       |-- xxx/</span><br><span class="line">|           |-- xxx_aaa_handler.go</span><br><span class="line">|           |-- xxx_bbb_handler.go</span><br><span class="line">|       |-- yyy/</span><br><span class="line">|           |-- yyy_model.go</span><br><span class="line">|           |-- yyy_aaa_handler.go</span><br><span class="line">|           |-- yyy_bbb_handler.go</span><br><span class="line">|   |-- xxx/</span><br><span class="line">|       |-- xxx_aaa_model.go // 存放持久化model，如数据库表，消息中间件结构，redis结构等</span><br><span class="line">|       |-- xxx_aaa_service.go</span><br><span class="line">|   |-- yyy/</span><br><span class="line">|       |-- yyy_bbb_model.go</span><br><span class="line">|       |-- yyy_bbb_service.go</span><br><span class="line">|   |-- ignite/</span><br><span class="line">|       |-- ignite.go</span><br><span class="line">|       |-- ignite_test.go</span><br><span class="line">|   |-- influx/</span><br><span class="line">|       |-- influx.go</span><br><span class="line">|       |-- influx_test.go</span><br><span class="line">|-- docker-build/</span><br><span class="line">|   |-- scripts/</span><br><span class="line">|       |-- start.sh</span><br><span class="line">|-- Dockerfile</span><br></pre></td></tr></table></figure>

<h2><span id="fang-qi-de-bu-ju-fang-shi">放弃的布局方式</span><a href="#fang-qi-de-bu-ju-fang-shi" class="header-anchor">#</a></h2><h3><span id="ci-chong-bu-ju-bi-jiao-gua-he-du-li-de-bao-dui-api-jie-gou-ti-de-cao-zuo-fu-yong-jiao-chai">此种布局比较适合独立的包，对api结构体的操作复用较差</span><a href="#ci-chong-bu-ju-bi-jiao-gua-he-du-li-de-bao-dui-api-jie-gou-ti-de-cao-zuo-fu-yong-jiao-chai" class="header-anchor">#</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">example/</span><br><span class="line">|-- cmd/</span><br><span class="line">|   |-- production/</span><br><span class="line">|       |-- hearth.go</span><br><span class="line">|   |-- local/</span><br><span class="line">|       |-- hearth_local.go</span><br><span class="line">|-- pkg/</span><br><span class="line">|   |-- boot/</span><br><span class="line">|       |-- boot.go //装备Struct，用于Lauch整个项目</span><br><span class="line">|   |-- handler/</span><br><span class="line">|       |-- xxx/</span><br><span class="line">|           |-- xxx_model.go // 将大块业务的model也放在这里，可以使用oapi-codegen来生成结构体</span><br><span class="line">|           |-- xxx_aaa_handler.go</span><br><span class="line">|           |-- xxx_bbb_handler.go</span><br><span class="line">|       |-- yyy/</span><br><span class="line">|           |-- yyy_model.go</span><br><span class="line">|           |-- yyy_aaa_handler.go</span><br><span class="line">|           |-- yyy_bbb_handler.go</span><br><span class="line">|   |-- xxx/</span><br><span class="line">|       |-- xxx_aaa_model.go // 存放持久化model，如数据库表，消息中间件结构，redis结构等</span><br><span class="line">|       |-- xxx_aaa_service.go</span><br><span class="line">|   |-- yyy/</span><br><span class="line">|       |-- yyy_bbb_model.go</span><br><span class="line">|       |-- yyy_bbb_service.go</span><br><span class="line">|   |-- ignite/</span><br><span class="line">|       |-- ignite.go</span><br><span class="line">|       |-- ignite_test.go</span><br><span class="line">|   |-- influx/</span><br><span class="line">|       |-- influx.go</span><br><span class="line">|       |-- influx_test.go</span><br><span class="line">|-- docker-build/</span><br><span class="line">|   |-- scripts/</span><br><span class="line">|       |-- start.sh</span><br><span class="line">|-- Dockerfile</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Gin</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Ignite在华为云IoT服务产品部的使用</title>
    <url>/ignite/ignite-huaweicloud-usage/</url>
    <content><![CDATA[<h1><span id="apache-ignite-jian-jie">Apache Ignite简介</span><a href="#apache-ignite-jian-jie" class="header-anchor">#</a></h1><p>Apache Ignite是一个开源分布式的数据库、缓存和计算平台。它的核心是一个内存数据网格，它可以将内存作为分布式的持久化存储，以提供高性能和可扩展性。它还提供了一个分布式的键值存储、SQL数据库、流式数据处理和复杂的事件处理等功能。</p>
<p>Ignite的核心竞争力包括：</p>
<ul>
<li>兼容Mysql、Oracle语法</li>
<li>性能强大，可以水平扩展</li>
<li>缓存与数据库同源，可通过KV、SQL、JDBC、ODBC等方式访问</li>
</ul>
<p>同时，为了便于开发，除了jdbc、odbc、restful方式外，Ignite还官方提供了Java、C++、.Net、Python、Node.js、PHP等语言的客户端，可以方便的与Ignite进行交互。</p>
<p><img src="/ignite/ignite-huaweicloud-usage/ignite-storage-access.png" alt="ignite-storage-access"></p>
<h1><span id="apache-ignite-de-wen-ti">Apache Ignite的问题</span><a href="#apache-ignite-de-wen-ti" class="header-anchor">#</a></h1><h2><span id="pin-fan-chuang-jian-shan-chu-biao-dao-zhi-ignite-discovery-history-size-chao-guo-xian-zhi">频繁创建删除表，导致IGNITE_DISCOVERY_HISTORY_SIZE超过限制</span><a href="#pin-fan-chuang-jian-shan-chu-biao-dao-zhi-ignite-discovery-history-size-chao-guo-xian-zhi" class="header-anchor">#</a></h2><p>根据Ignite2的拓扑模型，集群的拓扑版本会在创建表&#x2F;删除表的时候发生变化，该变化版本号递增，且仅会保留最近$IgniteDiscoveryHistorySize条记录，程序某处会写死读取版本为0的数据，读取不到时，ignite集群会重启。默认值为500。<br>社区issue: <a href="https://github.com/apache/ignite/issues/10894">https://github.com/apache/ignite/issues/10894</a><br>笔者暂时没有时间来修复这个issue，可以通过将IGNITE_DISCOVERY_HISTORY_SIZE设置地比较大，来规避这个问题。</p>
<h2><span id="ignite2-ke-hu-duan-yi-yong-xing-wen-ti">Ignite2客户端易用性问题</span><a href="#ignite2-ke-hu-duan-yi-yong-xing-wen-ti" class="header-anchor">#</a></h2><h3><span id="ignite2-ke-hu-duan-chao-shi-mo-ren-zhi-bu-he-li">Ignite2客户端超时默认值不合理</span><a href="#ignite2-ke-hu-duan-chao-shi-mo-ren-zhi-bu-he-li" class="header-anchor">#</a></h3><p>Ignite2客户端的连接超时、执行sql超时默认都是0，没有精心研究过配置的用户在异常场景下，应用程序可能会hang住。从易用性的角度来说，网络通信的任何操作，默认都应该有超时时间。</p>
<h3><span id="ignite2-ke-hu-duan-bu-zhi-chi-yong-yuan-de-chong-shi">Ignite2客户端不支持永远的重试</span><a href="#ignite2-ke-hu-duan-bu-zhi-chi-yong-yuan-de-chong-shi" class="header-anchor">#</a></h3><p>Ignite通过预先计算出所有需要重连的时间点来实现重连，如果想配置成永远的重连，会因为时间点的计算导致内存溢出。从易用性的角度来说，应该支持永远的重连。</p>
<h2><span id="ignite2-ke-hu-duan-zai-mou-xie-yi-chang-xia-wu-fa-zi-yu">Ignite2客户端在某些异常下无法自愈</span><a href="#ignite2-ke-hu-duan-zai-mou-xie-yi-chang-xia-wu-fa-zi-yu" class="header-anchor">#</a></h2><p>当client执行sql的时候，碰到如下异常的时候，无法自愈。可以通过执行SQL对client进行定期检查并重建。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Caused by: org.apache.ignite.internal.client.thin.ClientServerError: Ignite failed to process request [47]: 50000: Can not perform the operation because the cluster is inactive. Note, that the cluster is considered inactive by default if Ignite Persistent Store is used to let all the nodes join the cluster. To activate the cluster call Ignite.cluster.state(ClusterState.ACTIVE)</span><br></pre></td></tr></table></figure>

<h2><span id="ignite2-socketchannel-xie-lu-wen-ti">Ignite2 SocketChannel泄露问题</span><a href="#ignite2-socketchannel-xie-lu-wen-ti" class="header-anchor">#</a></h2><p>Ignite客户端在连接时，如果对应的Server端没有启动，会导致SocketChannel泄露，已由笔者提交代码修复：<a href="https://github.com/apache/ignite/pull/11016/files">https://github.com/apache/ignite/pull/11016/files</a></p>
]]></content>
      <tags>
        <tag>Ignite</tag>
      </tags>
  </entry>
  <entry>
    <title>kubernetes容器获取IP地址</title>
    <url>/kubernetes/kubernetes-container-get-ip/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#kubernetes-huan-jing-bian-liang-zhu-ru">kubernetes环境变量注入</a></li>
<li><a href="#tong-guo-shell-jiao-ben-huo-qu">通过shell脚本获取</a><ul>
<li><a href="#tong-guo-ip-ming-ling-tui-jian">通过ip命令（推荐）</a></li>
<li><a href="#tong-guo-ifconfig-ming-ling-bu-tui-jian">通过ifconfig命令（不推荐）</a></li>
</ul>
</li>
<li><a href="#tldr">TLDR</a></li>
</ul>
<!-- tocstop -->

</div>

<p>kubernetes中容器获取IP地址是一个常见的需求，常见的有两种获取IP地址的方式</p>
<h2><span id="kubernetes-huan-jing-bian-liang-zhu-ru">kubernetes环境变量注入</span><a href="#kubernetes-huan-jing-bian-liang-zhu-ru" class="header-anchor">#</a></h2><p>通过在部署时，<strong>container</strong>下的<strong>env</strong>中配置如下yaml</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_IP</span></span><br><span class="line">  <span class="attr">valueFrom:</span></span><br><span class="line">    <span class="attr">fieldRef:</span></span><br><span class="line">      <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">      <span class="attr">fieldPath:</span> <span class="string">status.podIP</span></span><br></pre></td></tr></table></figure>

<p>进入容器就可以根据环境变量获取到容器IP</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># echo $POD_IP</span><br><span class="line">172.17.0.2</span><br></pre></td></tr></table></figure>

<h2><span id="tong-guo-shell-jiao-ben-huo-qu">通过shell脚本获取</span><a href="#tong-guo-shell-jiao-ben-huo-qu" class="header-anchor">#</a></h2><h3><span id="tong-guo-ip-ming-ling-tui-jian">通过ip命令（推荐）</span><a href="#tong-guo-ip-ming-ling-tui-jian" class="header-anchor">#</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ip addr show eth0 | grep &quot;inet\b&quot; | awk &#x27;&#123;print $2&#125;&#x27; | cut -d/ -f1</span></span><br><span class="line">172.17.0.2</span><br></pre></td></tr></table></figure>

<p>注意这里一定要用<strong>inet\b</strong>，不要用<strong>inet</strong>。使用<strong>inet</strong>的话，在Ipv6双栈场景下会因为匹配到<strong>inet6</strong>获取到错误的结果, Ipv6双栈场景下ip命令的部分输出结果如下图所示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">inet6 fe80::ffff prefixlen 64 scopeid 0x20&lt;lin&gt;</span><br></pre></td></tr></table></figure>

<h3><span id="tong-guo-ifconfig-ming-ling-bu-tui-jian">通过ifconfig命令（不推荐）</span><a href="#tong-guo-ifconfig-ming-ling-bu-tui-jian" class="header-anchor">#</a></h3><p>不推荐使用ifconfig命令的原因是，这个命令已经废弃，将会逐步删除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig eth0 | grep <span class="string">&#x27;inet\b&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | <span class="built_in">cut</span> -d/ -f1</span><br></pre></td></tr></table></figure>

<p>同样需要使用<strong>inet\b</strong>，不要使用<strong>inet</strong></p>
<h2><span id="tldr">TLDR</span><a href="#tldr" class="header-anchor">#</a></h2><p>优先配置如下yaml进行环境变量注入，其次使用<strong>ip addr show eth0 | grep “inet\b” | awk ‘{print $2}’ | cut -d&#x2F; -f1</strong>命令获取</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_IP</span></span><br><span class="line">  <span class="attr">valueFrom:</span></span><br><span class="line">    <span class="attr">fieldRef:</span></span><br><span class="line">      <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">      <span class="attr">fieldPath:</span> <span class="string">status.podIP</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>容器内指定特定域名解析结果的几种方式</title>
    <url>/kubernetes/kubernetes-domain-specify-result/</url>
    <content><![CDATA[<p>在本篇文章中，我们将探讨如何在容器内指定特定域名解析结果的几种方式。为了方便演示，首先我们创建一个演示用的Deployment配置文件。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">busybox-deployment</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">busybox</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">busybox</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;while true; do echo Hello, Kubernetes!; sleep 10;done&quot;</span></span><br></pre></td></tr></table></figure>

<p>这个deployment会创建1个busybox的pod，容器每隔10s会打印“Hello, Kubernetes!”到控制台</p>
<h2><span id="tl-dr">TL;DR</span><a href="#tl-dr" class="header-anchor">#</a></h2><table>
<thead>
<tr>
<th>方案</th>
<th>修改级别</th>
<th>是否推荐</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>修改&#x2F;etc&#x2F;hosts</td>
<td>pod</td>
<td>否</td>
<td></td>
</tr>
<tr>
<td>添加HostAliases记录</td>
<td>pod&#x2F;deploy&#x2F;statefulset</td>
<td>是</td>
<td></td>
</tr>
<tr>
<td>修改Coredns配置</td>
<td>整个kubernetes集群</td>
<td>是</td>
<td></td>
</tr>
<tr>
<td>自定义DNS策略</td>
<td>pod&#x2F;deploy&#x2F;statefulset</td>
<td>视情况而定</td>
<td>如需对接三方的DNS服务器，推荐采用</td>
</tr>
<tr>
<td>使用三方DNS插件</td>
<td>整个kubernetes集群</td>
<td>否</td>
<td>不推荐，Coredns为业内主流</td>
</tr>
</tbody></table>
<h2><span id="xiu-gai-x2f-etc-x2f-hosts">修改&#x2F;etc&#x2F;hosts</span><a href="#xiu-gai-x2f-etc-x2f-hosts" class="header-anchor">#</a></h2><p>修改&#x2F;etc&#x2F;hosts是最传统的方式，直接在容器内修改相应的文件来实现域名解析，在Pod级别生效。由于其可维护性较差（每次pod发生重启都需要手动修改），不推荐在生产环境使用。</p>
<p>例如，我们可以在&#x2F;etc&#x2F;hosts里面添加这样一条记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">250.250.250.250 four-250</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/ # ping four-250</span><br><span class="line">PING four-250 (250.250.250.250): 56 data bytes</span><br></pre></td></tr></table></figure>

<h2><span id="tian-jia-hostaliases-ji-lu">添加HostAliases记录</span><a href="#tian-jia-hostaliases-ji-lu" class="header-anchor">#</a></h2><p>HostAliases是kubernetes中Pod配置的一个字段，它提供了Pod内容器的<code>/etc/hosts</code>文件的附加记录。这在某些情况下非常有用，特别是当你想要覆盖某个主机名的解析结果，或者提供网络中没有的主机名解析时。</p>
<p>这个可以在Pod、Replica、Deployment、StatefulSet的级别修改，维护性稍强。举个🌰，我们将上面的yaml修改为</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">busybox-deployment</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">busybox</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">busybox</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">busybox</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">hostAliases:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">ip:</span> <span class="string">&quot;250.250.250.250&quot;</span></span><br><span class="line">        <span class="attr">hostnames:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;four-250&quot;</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">        <span class="attr">args:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">&quot;while true; do echo Hello, Kubernetes!; sleep 10;done&quot;</span></span><br></pre></td></tr></table></figure>

<p>这个时候我们查看容器的&#x2F;etc&#x2F;hosts，发现它被kubernetes自动插入了一条记录<strong>Entries add by HostAliases。</strong>这就是hostAliases的实现原理</p>
<p>在<strong>kubelet_pods</strong>代码中进行了这样的写入动作</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">hostsEntriesFromHostAliases</span><span class="params">(hostAliases []v1.HostAlias)</span></span> []<span class="type">byte</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(hostAliases) == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> []<span class="type">byte</span>&#123;&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> buffer bytes.Buffer</span><br><span class="line">	buffer.WriteString(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">	buffer.WriteString(<span class="string">&quot;# Entries added by HostAliases.\n&quot;</span>)</span><br><span class="line">	<span class="comment">// for each IP, write all aliases onto single line in hosts file</span></span><br><span class="line">	<span class="keyword">for</span> _, hostAlias := <span class="keyword">range</span> hostAliases &#123;</span><br><span class="line">		buffer.WriteString(fmt.Sprintf(<span class="string">&quot;%s\t%s\n&quot;</span>, hostAlias.IP, strings.Join(hostAlias.Hostnames, <span class="string">&quot;\t&quot;</span>)))</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> buffer.Bytes()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2><span id="coredns-pei-zhi">Coredns配置</span><a href="#coredns-pei-zhi" class="header-anchor">#</a></h2><p>我们可以通过修改ConfigMap来实现让容器解析特定域名的目的。</p>
<h3><span id="geng-gai-coredns-pei-zhi">更改Coredns配置</span><a href="#geng-gai-coredns-pei-zhi" class="header-anchor">#</a></h3><p>我们可以通过以下命令修改Coredns的配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl edit cm coredns -n kube-system</span><br></pre></td></tr></table></figure>

<h3><span id="yuan-you-de-configmap">原有的configmap</span><a href="#yuan-you-de-configmap" class="header-anchor">#</a></h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">Corefile:</span> <span class="string">|</span></span><br><span class="line"><span class="string">    .:53 &#123;</span></span><br><span class="line"><span class="string">        log</span></span><br><span class="line"><span class="string">        errors</span></span><br><span class="line"><span class="string">        health &#123;</span></span><br><span class="line"><span class="string">           lameduck 5s</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        ready</span></span><br><span class="line"><span class="string">        kubernetes cluster.local in-addr.arpa ip6.arpa &#123;</span></span><br><span class="line"><span class="string">           pods insecure</span></span><br><span class="line"><span class="string">           fallthrough in-addr.arpa ip6.arpa</span></span><br><span class="line"><span class="string">           ttl 30</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        prometheus :9153</span></span><br><span class="line"><span class="string">        hosts &#123;</span></span><br><span class="line"><span class="string">           192.168.65.2 host.minikube.internal</span></span><br><span class="line"><span class="string">           fallthrough</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        forward . /etc/resolv.conf &#123;</span></span><br><span class="line"><span class="string">           max_concurrent 1000</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        cache 30</span></span><br><span class="line"><span class="string">        loop</span></span><br><span class="line"><span class="string">        reload</span></span><br><span class="line"><span class="string">        loadbalance</span></span><br><span class="line"><span class="string">    &#125;</span></span><br></pre></td></tr></table></figure>

<p>在hosts里面加上特定的记录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">250.250.250.250 four-250</span><br></pre></td></tr></table></figure>

<p>如果您没有配置reload插件，则需要重启Coredns才能生效，默认的reload时间是30s，在plugin&#x2F;reload&#x2F;setup.go的defaultInterval中定义</p>
<h2><span id="zi-ding-yi-dns-ce-lue">自定义DNS策略</span><a href="#zi-ding-yi-dns-ce-lue" class="header-anchor">#</a></h2><p>通过修改DNS策略。使得对于单个Pod&#x2F;Deploy&#x2F;StatefulSet将特定的域名解析发给特定的服务器来达到效果，如下，可以对pod添加dns的服务器以及search域</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spec:</span></span><br><span class="line">   <span class="attr">dnsConfig:</span></span><br><span class="line">     <span class="attr">nameservers:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="number">1.2</span><span class="number">.3</span><span class="number">.4</span></span><br><span class="line">     <span class="attr">searches:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">search.prefix</span></span><br><span class="line">   <span class="attr">containers:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">busybox</span></span><br><span class="line">     <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">     <span class="attr">args:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">/bin/sh</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">-c</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">&quot;while true; do echo Hello, Kubernetes!; sleep 10;done&quot;</span></span><br></pre></td></tr></table></figure>

<h2><span id="shi-yong-di-san-fang-dns-cha-jian">使用第三方DNS插件</span><a href="#shi-yong-di-san-fang-dns-cha-jian" class="header-anchor">#</a></h2><p>不推荐，使用其他的DNS插件，来做一些炫酷的自定义操作。而且目前Coredns也是业内的主流，没有很好的替代</p>
]]></content>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>修改运行中kubernetes集群中etcd的参数</title>
    <url>/kubernetes/kubernetes-etcd-config-modify/</url>
    <content><![CDATA[<p>在一些场景下，您的kubernetes集群已经搭建完成了，但是还需要修改一些核心组件的参数，如etcd、kube-apiserver、kube-scheduler、kube-controller-manager等。</p>
<p>通过<code>kubectl get pod -owide -n kube-system</code> 可以查看到这些核心容器。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NAME                               READY   STATUS    RESTARTS       AGE</span><br><span class="line">coredns-78fcd69978-rdmjm           1/1     Running   11 (23s ago)   281d</span><br><span class="line">etcd-<span class="variable">$NODE1</span>                        1/1     Running   13 (23s ago)   281d</span><br><span class="line">etcd-<span class="variable">$NODE2</span>                        1/1     Running   13 (23s ago)   281d</span><br><span class="line">etcd-<span class="variable">$NODE3</span>                        1/1     Running   13 (23s ago)   281d</span><br><span class="line">.....</span><br></pre></td></tr></table></figure>

<p>以etcd为例，etcd的参数就在pod中的commands参数里。可以通过<code>kubectl describe pod etcd-$NODENAME -n kube-system</code>来查看(省略部分参数)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Name: etcd-<span class="variable">$NODENAME</span></span><br><span class="line">Namespace: kube-system</span><br><span class="line">Containers:</span><br><span class="line">etcd:</span><br><span class="line">Command:</span><br><span class="line">--client-cert-auth=<span class="literal">true</span></span><br><span class="line">--trusted-ca-file=/etc/kubernetes/pki/etcd/ca.crt</span><br></pre></td></tr></table></figure>

<p>然而，如果您尝试编辑pod中的参数，会发现它们是不可修改的。</p>
<p>不过，如果您需要修改参数，还有另一个办法，通过修改<code>/etc/kubernetes/manifests/</code>下的yaml文件来修改运行中kubernetes集群中”系统”Pod的参数。原理是，当您把yaml文件修改后，kubelet会自动监听yaml文件的变更，并重新拉起本机器上的pod。</p>
<p>举个例子，如果您希望关闭etcd集群对客户端的认证，那么您可以修改<code>/etc/kubernetes/mainfiest/etcd.yaml</code>,将<strong>client-cert-auth</strong>设置为false，把<strong>trusted-ca-file</strong>去掉。注意：三台master机器节点都需要执行此操作</p>
]]></content>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>高可用无单点架构之kubernetes集群</title>
    <url>/kubernetes/kubernetes-ha/</url>
    <content><![CDATA[<h1><span id="k8s-gao-ke-yong-wu-dan-dian-gu-zhang-she-ji-na-xie-chang-jing">k8s高可用无单点故障涉及那些场景</span><a href="#k8s-gao-ke-yong-wu-dan-dian-gu-zhang-she-ji-na-xie-chang-jing" class="header-anchor">#</a></h1><h2><span id="k8s-jie-dian-tian-jia-pod-tian-jia-deng-zeng-shan-cha-gai-wu-dan-dian-gu-zhang">k8s 节点添加、pod添加等增删查改无单点故障</span><a href="#k8s-jie-dian-tian-jia-pod-tian-jia-deng-zeng-shan-cha-gai-wu-dan-dian-gu-zhang" class="header-anchor">#</a></h2><p>需要元数据的存储和处理能力高可用</p>
<h2><span id="k8s-dui-wai-de-apiserver-ru-worker-wu-dan-dian-gu-zhang">k8s对外的apiServer（如worker）无单点故障</span><a href="#k8s-dui-wai-de-apiserver-ru-worker-wu-dan-dian-gu-zhang" class="header-anchor">#</a></h2><p>worker node和其他组件访问<code>apiServer</code>路径高可用</p>
<h1><span id="k8s-wu-dan-dian-gu-zhang-ji-zhu-guan-jian-dian">k8s无单点故障技术关键点</span><a href="#k8s-wu-dan-dian-gu-zhang-ji-zhu-guan-jian-dian" class="header-anchor">#</a></h1><h2><span id="yuan-shu-ju-cun-chu">元数据存储</span><a href="#yuan-shu-ju-cun-chu" class="header-anchor">#</a></h2><p>通过etcd存储元数据，etcd三节点集群保证高可用</p>
<h2><span id="yuan-shu-ju-chu-li">元数据处理</span><a href="#yuan-shu-ju-chu-li" class="header-anchor">#</a></h2><p>通过多个<code>kube-controller</code>和<code>kube-scheduler</code>节点来保证高可用</p>
<h2><span id="worker-jie-dian-qing-qiu-shu-ju-tong-guo-duo-ip-huo-fu-zai-jun-heng-lai-bao-zheng">worker节点请求数据通过多ip或负载均衡来保证</span><a href="#worker-jie-dian-qing-qiu-shu-ju-tong-guo-duo-ip-huo-fu-zai-jun-heng-lai-bao-zheng" class="header-anchor">#</a></h2><p>节点请求通信通过多Ip或负载均衡来保证高可用，这里也有几种方式</p>
<h3><span id="iaas-han-shang-ke-ti-gong-fu-zai-jun-heng-de-chang-jing-xia">IaaS厂商可提供负载均衡的场景下</span><a href="#iaas-han-shang-ke-ti-gong-fu-zai-jun-heng-de-chang-jing-xia" class="header-anchor">#</a></h3><p>如下图所示，可将worker node的访问地址指向负载均衡的地址</p>
<p><img src="/kubernetes/kubernetes-ha/kubernetes-ha-iaas-lb.png" alt="kubernetes-ha-iaas-lb"></p>
<h3><span id="si-you-hua-bu-shu-keepalived">私有化部署KeepAlived</span><a href="#si-you-hua-bu-shu-keepalived" class="header-anchor">#</a></h3><p>私有化部署场景常用keepAlived提供浮动IP来给<code>worker node</code>或其他组件访问，如下图所示</p>
<p><img src="/kubernetes/kubernetes-ha/kubernetes-ha-keepalived.png" alt="kubernetes-ha-keepalived"></p>
<h3><span id="si-you-hua-bu-shu-jia-shang-fu-zai-jun-heng-zu-jian">私有化部署加上负载均衡组件</span><a href="#si-you-hua-bu-shu-jia-shang-fu-zai-jun-heng-zu-jian" class="header-anchor">#</a></h3><p>如果你觉得同一时刻只有单个apiServer工作会成瓶颈，也可以使用<code>KeepAlived</code>加<code>Nginx</code>或<code>HaProxy</code>来对<code>ApiServer</code>做负载均衡</p>
<p><img src="/kubernetes/kubernetes-ha/kubernetes-ha-keepalived-nginx.png" alt="kubernetes-ha-keepalived-nginx"></p>
<p>为了简化图像，只画出了master1上的Nginx向后转发的场景。</p>
<p>至于Nginx和KeepAlived如何部署，推荐采用容器化的部署模式，方便进行监控和运维；但是镜像不从镜像仓库拉取，而是保存在<code>master</code>节点上，这样虽然升级复杂一点，但是这样子<code>kubernetes</code>的高可用就不依赖镜像仓库了，不会和镜像仓库形成循环依赖，更不会影响镜像仓库的高可用方案，大大简化了后续的技术方案。（因为镜像仓库可能会占据较大的存储空间，可能会和<code>master</code>节点分离部署，这时会作为<code>worker</code>节点连接<code>master</code>节点）。</p>
]]></content>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次kubernetes获取internal Ip错误流程</title>
    <url>/kubernetes/kubernetes-internal-ip-error/</url>
    <content><![CDATA[<p>偶尔也回首一下处理的棘手问题吧。问题的现象是，通过kubernetes get node输出的ip不是期望的ip地址。大概如下所示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip addr</span><br><span class="line"></span><br><span class="line">eth0 ip1</span><br><span class="line">eth0:xxx ip2</span><br></pre></td></tr></table></figure>

<p>最终输出的不是预期的ip1地址，而是ip2地址。</p>
<p>按藤摸瓜，<strong>kubernetes</strong>把节点信息保存在<code>/registry/minions/$node-name</code>中的<strong>InternalIp</strong> 字段。</p>
<p><strong>InternalIp</strong>是如何确定的呢，这段代码位于<code>pkg/kubelet/nodestatus/setters.go</code>中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 1) Use nodeIP if set (and not &quot;0.0.0.0&quot;/&quot;::&quot;)</span><br><span class="line">// 2) If the user has specified an IP to HostnameOverride, use it</span><br><span class="line">// 3) Lookup the IP from node name by DNS</span><br><span class="line">// 4) Try to get the IP from the network interface used as default gateway</span><br><span class="line">//</span><br><span class="line">// For steps 3 and 4, IPv4 addresses are preferred to IPv6 addresses</span><br><span class="line">// unless nodeIP is &quot;::&quot;, in which case it is reversed.</span><br></pre></td></tr></table></figure>

<p>我们的场景下没有手动设置nodeIp，如需设置通过kubelet命令行即可设置 <strong>–node-ip&#x3D;localhost</strong>，最终通过如下的go函数获取ip地址</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">addrs, _ = net.LookupIP(node.Name)</span><br></pre></td></tr></table></figure>

<p>对这行go函数进行strace追溯，最终调用了c函数，<strong>getaddrinfo</strong>函数。<strong>getaddrinfo</strong>底层是发起了<strong>netlink</strong>请求，开启<strong>netlink</strong>的抓包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">modprobe nlmon</span><br><span class="line">ip <span class="built_in">link</span> add nlmon0 <span class="built_in">type</span> nlmon</span><br><span class="line">ip <span class="built_in">link</span> <span class="built_in">set</span> dev nlmon0 up</span><br><span class="line">tcpdump -i nlmon0 -w netlinik.pcap</span><br><span class="line"><span class="comment"># 使用nlmon 驱动模块，这个nlmon 驱动模块会注册一个 netlink tap 口，用户态向内核发送 netlink 消息、内核向用户态发送 netlink 消息，报文都会经过这个 tap 口。</span></span><br></pre></td></tr></table></figure>

<p>通过抓包我看到通过<strong>netlink</strong>报文请求返回的ip地址顺序都是合乎预期的，只能是<strong>getaddrinfo</strong>函数修改了返回的顺序</p>
<p>Google了一下发现是<strong>getaddrinfo</strong>支持了<strong>rfc3484</strong>导致了ip的重新排序，代码地址<code>glibc/sysdeps/posix/getaddrinfo.c</code></p>
<p><strong>RFC3484</strong> 总共有十个规则，比较关键的有</p>
<h3><span id="rule9">Rule9</span><a href="#rule9" class="header-anchor">#</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Rule 9:  Use longest matching prefix.</span><br><span class="line">When DA and DB belong to the same address family (both are IPv6 or</span><br><span class="line">both are IPv4): If CommonPrefixLen(DA, Source(DA)) &gt;</span><br><span class="line">CommonPrefixLen(DB, Source(DB)), then prefer DA.  Similarly, if</span><br><span class="line">CommonPrefixLen(DA, Source(DA)) &lt; CommonPrefixLen(DB, Source(DB)),</span><br><span class="line">then prefer DB.</span><br></pre></td></tr></table></figure>

<p>举个例子，假如机器的ip地址是 <code>172.18.45.2/24</code>，它会更青睐于<code>172.18.45.6</code>而不是<code>172.31.80.8</code>。这个RFC存在较大的争议，它与dns轮询策略不兼容，如：dns服务器轮询返回多个ip地址，客户端总是选择第一个ip连接。与这个策略存在很大的冲突。并且社区内也有投票试图停止对<strong>RFC3484</strong> rule9的适配, 但是最终被拒绝了。</p>
<p>根据分析，认为是ip2的地址小于ip1的地址，最终glibc排序的时候把ip2放在了前面。最终我们给kubelet配置了eth0地址的–node-ip，解决了这个问题。</p>
]]></content>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Kubernetes pod内调用API</title>
    <url>/kubernetes/kubernetes-pod-api/</url>
    <content><![CDATA[<p>Kubernetes pod内调用API的流程总体分为以下步骤</p>
<ul>
<li>创建role</li>
<li>创建serviceaccount</li>
<li>绑定role到serviceaccount</li>
<li>指定pod使用serviceaccount</li>
</ul>
<p>我们以查pod为例，演示一下整个流程</p>
<h2><span id="chuang-jian-role">创建role</span><a href="#chuang-jian-role" class="header-anchor">#</a></h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># role.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">role-hzj</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">apiGroups:</span> [<span class="string">&quot;&quot;</span>]</span><br><span class="line">    <span class="attr">resources:</span> [<span class="string">&quot;pods&quot;</span>]</span><br><span class="line">    <span class="attr">verbs:</span> [<span class="string">&quot;get&quot;</span>,<span class="string">&quot;list&quot;</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f role.yaml</span><br></pre></td></tr></table></figure>

<h2><span id="chuang-jian-serviceaccount">创建serviceaccount</span><a href="#chuang-jian-serviceaccount" class="header-anchor">#</a></h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># serviceaccount.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">serviceaccount-hzj</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f serviceaccount.yaml</span><br></pre></td></tr></table></figure>

<h2><span id="bang-ding-role">绑定role</span><a href="#bang-ding-role" class="header-anchor">#</a></h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># rolebinding.yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">RoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rolebinding-hzj</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">serviceaccount-hzj</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Role</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">role-hzj</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl apply -f rolebinding.yaml</span><br></pre></td></tr></table></figure>

<h2><span id="bu-shu-pod-jin-xing-ce-shi">部署pod进行测试</span><a href="#bu-shu-pod-jin-xing-ce-shi" class="header-anchor">#</a></h2><h3><span id="bu-shu-yi-ge-zookeeper-jin-xing-ce-shi">部署一个zookeeper进行测试</span><a href="#bu-shu-yi-ge-zookeeper-jin-xing-ce-shi" class="header-anchor">#</a></h3><p>手上刚好有zookeeper的模板文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">zookeeper</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">zookeeper</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">zookeeper</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">zookeeper</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">hostNetwork:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirstWithHostNet</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">zookeeper</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">ttbb/zookeeper:stand-alone</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">        <span class="attr">resources:</span></span><br><span class="line">          <span class="attr">limits:</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">2G</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">1000m</span></span><br><span class="line">          <span class="attr">requests:</span></span><br><span class="line">            <span class="attr">memory:</span> <span class="string">2G</span></span><br><span class="line">            <span class="attr">cpu:</span> <span class="string">1000m</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NODE_NAME</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">                <span class="attr">fieldPath:</span> <span class="string">spec.nodeName</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">POD_NAME</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">fieldRef:</span></span><br><span class="line">                <span class="attr">fieldPath:</span> <span class="string">metadata.name</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PS1</span></span><br><span class="line">          <span class="attr">value:</span> <span class="string">&#x27;[\u@zookeeper@\W]\$ &#x27;</span></span><br></pre></td></tr></table></figure>



<h3><span id="diao-yong-api">调用API</span><a href="#diao-yong-api" class="header-anchor">#</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Point to the internal API server hostname</span></span><br><span class="line">APISERVER=https://kubernetes.default.svc</span><br><span class="line"><span class="comment"># Path to ServiceAccount token</span></span><br><span class="line">SERVICEACCOUNT=/var/run/secrets/kubernetes.io/serviceaccount</span><br><span class="line"><span class="comment"># Read this Pod&#x27;s namespace</span></span><br><span class="line">NAMESPACE=$(<span class="built_in">cat</span> <span class="variable">$&#123;SERVICEACCOUNT&#125;</span>/namespace)</span><br><span class="line"><span class="comment"># Read the ServiceAccount bearer token</span></span><br><span class="line">TOKEN=$(<span class="built_in">cat</span> <span class="variable">$&#123;SERVICEACCOUNT&#125;</span>/token)</span><br><span class="line"><span class="comment"># Reference the internal certificate authority (CA)</span></span><br><span class="line">CACERT=<span class="variable">$&#123;SERVICEACCOUNT&#125;</span>/ca.crt</span><br><span class="line"><span class="comment"># Explore the API with TOKEN</span></span><br><span class="line">curl --cacert <span class="variable">$&#123;CACERT&#125;</span> --header <span class="string">&quot;Authorization: Bearer <span class="variable">$&#123;TOKEN&#125;</span>&quot;</span> -X GET <span class="variable">$&#123;APISERVER&#125;</span>/api</span><br><span class="line">curl --cacert <span class="variable">$&#123;CACERT&#125;</span> --header <span class="string">&quot;Authorization: Bearer <span class="variable">$&#123;TOKEN&#125;</span>&quot;</span> -X GET <span class="variable">$&#123;APISERVER&#125;</span>/api/v1/namespaces/default/pods</span><br></pre></td></tr></table></figure>

<p><img src="/kubernetes/kubernetes-pod-api/kubernetes-pod-api1.png" alt="kubernetes-pod-api1"></p>
<p>发现这里，调用后面的api，403错误。第一个api不报错，是因为该接口不需要鉴权。</p>
<h3><span id="xiu-gai-pod-dui-ying-de-serviceaccount">修改pod对应的serviceaccount</span><a href="#xiu-gai-pod-dui-ying-de-serviceaccount" class="header-anchor">#</a></h3><p>让我们修改部署模板对应的ServiceAccountName，注入权限。在pod的spec下，设置serviceAccountName</p>
<p><img src="/kubernetes/kubernetes-pod-api/kubernetes-pod-api2.png" alt="kubernetes-pod-api2"></p>
<h3><span id="xiu-gai-bu-shu-mo-ban-chong-qi-hou-diao-yong-api-zheng-chang">修改部署模板重启后调用api正常</span><a href="#xiu-gai-bu-shu-mo-ban-chong-qi-hou-diao-yong-api-zheng-chang" class="header-anchor">#</a></h3><p>再次尝试上述命令，api结果返回正常</p>
<p><img src="/kubernetes/kubernetes-pod-api/kubernetes-pod-api3.png" alt="kubernetes-pod-api3"></p>
]]></content>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>高可用无单点架构之镜像仓库</title>
    <url>/kubernetes/kubernetes-registry-ha/</url>
    <content><![CDATA[<p>本篇文章探讨镜像仓库<code>registry</code>的高可用</p>
<h1><span id="jing-xiang-cang-ku-gao-ke-yong-wu-dan-dian-gu-zhang-she-ji-na-xie-chang-jing">镜像仓库高可用无单点故障涉及那些场景</span><a href="#jing-xiang-cang-ku-gao-ke-yong-wu-dan-dian-gu-zhang-she-ji-na-xie-chang-jing" class="header-anchor">#</a></h1><h2><span id="jing-xiang-cang-ku-dui-wai-ti-gong-fang-wen-wu-dan-dian-gu-zhang">镜像仓库对外提供访问无单点故障</span><a href="#jing-xiang-cang-ku-dui-wai-ti-gong-fang-wen-wu-dan-dian-gu-zhang" class="header-anchor">#</a></h2><p>镜像仓库对外提供的访问点保持高可用</p>
<h2><span id="jing-xiang-cang-ku-de-shu-ju-cun-chu-gao-ke-yong">镜像仓库的数据存储高可用</span><a href="#jing-xiang-cang-ku-de-shu-ju-cun-chu-gao-ke-yong" class="header-anchor">#</a></h2><p>存储在镜像仓库中的数据都得是高可用的</p>
<h1><span id="jing-xiang-cang-ku-wu-dan-dian-gu-zhang-ji-zhu-guan-jian-dian">镜像仓库无单点故障技术关键点</span><a href="#jing-xiang-cang-ku-wu-dan-dian-gu-zhang-ji-zhu-guan-jian-dian" class="header-anchor">#</a></h1><h2><span id="jing-xiang-cang-ku-dui-wai-ti-gong-fang-wen-wu-dan-dian-gu-zhang">镜像仓库对外提供访问无单点故障</span><a href="#jing-xiang-cang-ku-dui-wai-ti-gong-fang-wen-wu-dan-dian-gu-zhang" class="header-anchor">#</a></h2><p>和上一篇文章一样，如果<code>IaaS</code>能提供<code>ELB</code>，我们最好是使用<code>ELB</code>，或者使用浮动IP的方式替换</p>
<h2><span id="jing-xiang-cang-ku-de-shu-ju-cun-chu-gao-ke-yong">镜像仓库的数据存储高可用</span><a href="#jing-xiang-cang-ku-de-shu-ju-cun-chu-gao-ke-yong" class="header-anchor">#</a></h2><ul>
<li>配置镜像仓库使用<code>IaaS</code>的S3存储</li>
<li>配置镜像仓库使用本地存储，通过共享文件路径存储来实现高可用，如<code>Glusterfs</code>等</li>
<li>配置镜像仓库使用S3存储，自建兼容S3 API的存储<code>Server</code></li>
</ul>
<p>通常会使用共享存储来做到镜像仓库存储的高可用</p>
<h1><span id="fang-an-gai-shu">方案概述</span><a href="#fang-an-gai-shu" class="header-anchor">#</a></h1><p>那么其实镜像仓库的高可用方案就是对上面方案的组合，下面我们举几个例子</p>
<h2><span id="jing-xiang-cang-ku-yi-lai-zu-jian-bu-shu-fang-shi">镜像仓库依赖组件部署方式</span><a href="#jing-xiang-cang-ku-yi-lai-zu-jian-bu-shu-fang-shi" class="header-anchor">#</a></h2><p><code>MinIo</code>、<code>KeepAlived</code>、<code>registry</code>都推荐使用容器部署，方便运维管理，但是镜像推荐内置到虚拟机中，不依赖镜像仓库或其他组件，避免循环依赖</p>
<h2><span id="shi-yong-iaas-de-s3-cun-chu-fu-zai-jun-heng-zu-jian">使用IaaS的S3存储 + 负载均衡组件</span><a href="#shi-yong-iaas-de-s3-cun-chu-fu-zai-jun-heng-zu-jian" class="header-anchor">#</a></h2><p>这是最简单的方案，得益于云厂商提供的S3存储和负载均衡组件，我们可以进行很简单的配置，并部署一台以上的<code>registry</code>,如下图所示</p>
<p><img src="/kubernetes/kubernetes-registry-ha/kubernetes-registry-ha-s3.png" alt="kubernetes-registry-ha-s3"></p>
<h2><span id="zi-jian-jian-rong-s3-cun-chu-keepalived-fu-dong-ip">自建兼容S3存储 + KeepAlived浮动Ip</span><a href="#zi-jian-jian-rong-s3-cun-chu-keepalived-fu-dong-ip" class="header-anchor">#</a></h2><p>我们可以自己搭建<code>MinIo</code>集群来作为兼容S3存储，由于MINIO最低部署4个节点，我们需要根据故障域机器来选择部署MINIO的数目，比如，故障域是三台物理机，我们部署4节点就不妥。原因是，4节点，总会有一台物理机上会部署2个minio节点，如果这台物理机挂掉，就会导致单点故障。所以，如果故障域为三台物理机，我们最好部署6节点，可容忍一台物理机宕机。其他的节点，读者也可以自行测算。</p>
<p>下图是假设三台物理机，<code>minio</code>6副本场景下的部署示意图</p>
<p><img src="/kubernetes/kubernetes-registry-ha/kubernetes-registry-ha-minio.png" alt="kubernetes-registry-ha-minio"></p>
<p>注，为了图的美观，并未画出所有的连线</p>
<h3><span id="minio-guan-jian-pei-zhi">MINIO关键配置</span><a href="#minio-guan-jian-pei-zhi" class="header-anchor">#</a></h3><ul>
<li>节点数目6个</li>
<li>EC2</li>
</ul>
]]></content>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>一步一步教你写kubernetes sidecar</title>
    <url>/kubernetes/kubernetes-sidecar/</url>
    <content><![CDATA[<h1><span id="shi-me-shi-sidecar">什么是sidecar？</span><a href="#shi-me-shi-sidecar" class="header-anchor">#</a></h1><p><img src="/kubernetes/kubernetes-sidecar/kubernetes-sidecar-what-is.png" alt="kubernetes-sidecar-what-is"></p>
<p>sidecar，直译为边车。 如上图所示，边车就是加装在摩托车旁来达到拓展功能的目的，比如行驶更加稳定，可以拉更多的人和货物，坐在边车上的人可以给驾驶员指路等。边车模式通过给应用服务加装一个“边车”来达到<strong>控制</strong>和<strong>逻辑</strong>的分离的目的。</p>
<p>对于微服务来讲，我们可以用边车模式来做诸如 日志收集、服务注册、服务发现、限流、鉴权等不需要业务服务实现的控制面板能力。通常和边车模式比较的就是像<strong>spring-cloud</strong>那样的sdk模式，像上面提到的这些能力都通过sdk实现。</p>
<p><img src="/kubernetes/kubernetes-sidecar/kubernetes-sidecar-what-can-do.png" alt="kubernetes-sidecar-what-can-do"></p>
<p>这两种实现模式各有优劣，sidecar模式会引入额外的性能损耗以及延时，但传统的sdk模式会让代码变得臃肿并且升级复杂，控制面能力和业务面能力不能分开升级。</p>
<p>本文的代码已经上传到<a href="https://gitee.com/shoothzj/sidecar-examples.git">gitee</a></p>
<h1><span id="sidecar-shi-xian-yuan-li">sidecar 实现原理</span><a href="#sidecar-shi-xian-yuan-li" class="header-anchor">#</a></h1><p>介绍了sidecar的诸多功能，但是，sidecar是如何做到这些能力的呢？</p>
<p>原来，在kubernetes中，一个pod是部署的最小单元，但一个pod里面，允许运行多个container(容器)，多个container(容器)之间共享存储卷和网络栈。这样子，我们就可以多container来做sidecar，或者init-container（初始化容器）来调整挂载卷的权限</p>
<p><img src="/kubernetes/kubernetes-sidecar/kubernetes-sidecar-inside.png" alt="kubernetes-sidecar-inside"></p>
<h1><span id="ri-zhi-shou-ji-sidecar">日志收集sidecar</span><a href="#ri-zhi-shou-ji-sidecar" class="header-anchor">#</a></h1><p>日志收集sidecar的原理是利用多个container间可以共用挂载卷的原理实现的，通过将应用程序的日志路径挂出，用另一个程序访问路径下的日志来实现日志收集，这里用cat来替代了日志收集，部署yaml模板如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webserver</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-logs</span></span><br><span class="line">      <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">ttbb/nginx:mate</span></span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-logs</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/opt/sh/openresty/nginx/logs</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sidecar-container</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">ttbb/base</span></span><br><span class="line">      <span class="attr">command:</span> [<span class="string">&quot;sh&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;while true; do cat /opt/sh/openresty/nginx/logs/nginx.pid; sleep 30; done&quot;</span>]</span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-logs</span></span><br><span class="line">          <span class="attr">mountPath:</span> <span class="string">/opt/sh/openresty/nginx/logs</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>使用kubectl create -f 创建pod，通过kubectl logs命令就可以看到sidecar-container打印的日志输出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kubectl logs webserver sidecar-container</span><br></pre></td></tr></table></figure>

<h1><span id="zhuan-fa-qing-qiu-sidecar">转发请求sidecar</span><a href="#zhuan-fa-qing-qiu-sidecar" class="header-anchor">#</a></h1><p>这一节我们来实现，一个给应用程序转发请求的sidecar，应用程序代码如下</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io::prelude::*;</span><br><span class="line"><span class="keyword">use</span> std::net::&#123;TcpListener, TcpStream&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">listener</span> = TcpListener::<span class="title function_ invoke__">bind</span>(<span class="string">&quot;127.0.0.1:7878&quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">stream</span> <span class="keyword">in</span> listener.<span class="title function_ invoke__">incoming</span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">stream</span> = stream.<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">handle_connection</span>(stream);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">handle_connection</span>(<span class="keyword">mut</span> stream: TcpStream) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">buffer</span> = [<span class="number">0</span>; <span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    stream.<span class="title function_ invoke__">read</span>(&amp;<span class="keyword">mut</span> buffer).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">contents</span> = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">response</span> = <span class="built_in">format!</span>(</span><br><span class="line">        <span class="string">&quot;HTTP/1.1 200 OK\r\nContent-Length: &#123;&#125;\r\n\r\n&#123;&#125;&quot;</span>,</span><br><span class="line">        contents.<span class="title function_ invoke__">len</span>(),</span><br><span class="line">        contents</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;receive a request!&quot;</span>);</span><br><span class="line">    stream.<span class="title function_ invoke__">write</span>(response.<span class="title function_ invoke__">as_bytes</span>()).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    stream.<span class="title function_ invoke__">flush</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们再来写一个sidecar，它会每15秒向应用程序发出请求</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"><span class="keyword">use</span> std::time::Duration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        thread::<span class="title function_ invoke__">sleep</span>(Duration::<span class="title function_ invoke__">from_secs</span>(<span class="number">15</span>));</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">response</span> = reqwest::blocking::<span class="title function_ invoke__">get</span>(<span class="string">&quot;http://localhost:7878&quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, response.<span class="title function_ invoke__">text</span>().<span class="title function_ invoke__">unwrap</span>())</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过仓库下的<code>intput/build.sh</code>脚本构造镜像，运行yaml如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">webserver</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">input-server</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">sidecar-examples:input-http-server</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">input-sidecar</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">sidecar-examples:sidecar-input</span></span><br></pre></td></tr></table></figure>
<p>通过查看<strong>kubectl logs input input-http-server</strong>可以看到input-http-server收到了请求</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">receive a request!</span><br><span class="line">receive a request!</span><br></pre></td></tr></table></figure>
<h1><span id="lan-jie-qing-qiu-sidecar">拦截请求sidecar</span><a href="#lan-jie-qing-qiu-sidecar" class="header-anchor">#</a></h1><p>应用程序代码，它会每15s向<code>localhost</code>发出请求</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shoothzj.sidecar</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> akka.actor.typed.<span class="type">ActorSystem</span></span><br><span class="line"><span class="keyword">import</span> akka.actor.typed.scaladsl.<span class="type">Behaviors</span></span><br><span class="line"><span class="keyword">import</span> akka.http.scaladsl.<span class="type">Http</span></span><br><span class="line"><span class="keyword">import</span> akka.http.scaladsl.model._</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.concurrent.&#123;<span class="type">ExecutionContextExecutor</span>, <span class="type">Future</span>&#125;</span><br><span class="line"><span class="keyword">import</span> scala.util.&#123;<span class="type">Failure</span>, <span class="type">Success</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">HttpClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">Thread</span>.sleep(<span class="number">15</span>_000L)</span><br><span class="line">            <span class="keyword">implicit</span> <span class="keyword">val</span> system: <span class="type">ActorSystem</span>[<span class="type">Nothing</span>] = <span class="type">ActorSystem</span>(<span class="type">Behaviors</span>.empty, <span class="string">&quot;SingleRequest&quot;</span>)</span><br><span class="line">            <span class="comment">// needed for the future flatMap/onComplete in the end</span></span><br><span class="line">            <span class="keyword">implicit</span> <span class="keyword">val</span> executionContext: <span class="type">ExecutionContextExecutor</span> = system.executionContext</span><br><span class="line"></span><br><span class="line">            <span class="keyword">val</span> responseFuture: <span class="type">Future</span>[<span class="type">HttpResponse</span>] = <span class="type">Http</span>().singleRequest(<span class="type">HttpRequest</span>(uri = <span class="string">&quot;http://localhost:7979/hello&quot;</span>))</span><br><span class="line"></span><br><span class="line">            responseFuture</span><br><span class="line">                    .onComplete &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="type">Success</span>(res) =&gt; println(res)</span><br><span class="line">                        <span class="keyword">case</span> <span class="type">Failure</span>(_) =&gt; sys.error(<span class="string">&quot;something wrong&quot;</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们再来写一个sidecar，它会拦截http请求并打印日志</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shoothzj.sidecar</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> akka.actor.typed.<span class="type">ActorSystem</span></span><br><span class="line"><span class="keyword">import</span> akka.actor.typed.scaladsl.<span class="type">Behaviors</span></span><br><span class="line"><span class="keyword">import</span> akka.http.scaladsl.<span class="type">Http</span></span><br><span class="line"><span class="keyword">import</span> akka.http.scaladsl.model._</span><br><span class="line"><span class="keyword">import</span> akka.http.scaladsl.server.<span class="type">Directives</span>._</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.concurrent.<span class="type">ExecutionContextExecutor</span></span><br><span class="line"><span class="keyword">import</span> scala.io.<span class="type">StdIn</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">HttpServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">implicit</span> <span class="keyword">val</span> system: <span class="type">ActorSystem</span>[<span class="type">Nothing</span>] = <span class="type">ActorSystem</span>(<span class="type">Behaviors</span>.empty, <span class="string">&quot;my-system&quot;</span>)</span><br><span class="line">        <span class="comment">// needed for the future flatMap/onComplete in the end</span></span><br><span class="line">        <span class="keyword">implicit</span> <span class="keyword">val</span> executionContext: <span class="type">ExecutionContextExecutor</span> = system.executionContext</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> route =</span><br><span class="line">            path(<span class="string">&quot;hello&quot;</span>) &#123;</span><br><span class="line">                get &#123;</span><br><span class="line">                    println(<span class="string">&quot;receive a request&quot;</span>)</span><br><span class="line">                    complete(<span class="type">HttpEntity</span>(<span class="type">ContentTypes</span>.`text/html(<span class="type">UTF</span><span class="number">-8</span>)`, <span class="string">&quot;&lt;h1&gt;Say hello to akka-http&lt;/h1&gt;&quot;</span>))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> bindingFuture = <span class="type">Http</span>().newServerAt(<span class="string">&quot;localhost&quot;</span>, <span class="number">7979</span>).bind(route)</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">Thread</span>.sleep(<span class="number">15</span>_000L)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过仓库下的<code>output/build.sh</code>脚本构造镜像，运行yaml如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">output</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">shared-logs</span></span><br><span class="line">      <span class="attr">emptyDir:</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">output-workload</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">sidecar-examples:output-workload</span></span><br><span class="line">      <span class="attr">imagePullPolicy:</span> <span class="string">Never</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">sidecar-output</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">sidecar-examples:sidecar-output</span></span><br><span class="line">      <span class="attr">imagePullPolicy:</span> <span class="string">Never</span></span><br></pre></td></tr></table></figure>

<p>通过查看<strong>kubectl logs output output-workload</strong>可以看到output-sidecar收到了请求</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">HttpResponse(200 OK,List(Server: akka-http/10.2.9, Date: Tue, 29 Mar 2022 00:15:47 GMT),HttpEntity.Strict(text/html; charset=UTF-8,31 bytes total),HttpProtocol(HTTP/1.1))</span><br><span class="line">HttpResponse(200 OK,List(Server: akka-http/10.2.9, Date: Tue, 29 Mar 2022 00:16:02 GMT),HttpEntity.Strict(text/html; charset=UTF-8,31 bytes total),HttpProtocol(HTTP/1.1))</span><br><span class="line">HttpResponse(200 OK,List(Server: akka-http/10.2.9, Date: Tue, 29 Mar 2022 00:16:17 GMT),HttpEntity.Strict(text/html; charset=UTF-8,31 bytes total),HttpProtocol(HTTP/1.1))</span><br><span class="line">HttpResponse(200 OK,List(Server: akka-http/10.2.9, Date: Tue, 29 Mar 2022 00:16:32 GMT),HttpEntity.Strict(text/html; charset=UTF-8,31 bytes total),HttpProtocol(HTTP/1.1))</span><br><span class="line">HttpResponse(200 OK,List(Server: akka-http/10.2.9, Date: Tue, 29 Mar 2022 00:16:47 GMT),HttpEntity.Strict(text/html; charset=UTF-8,31 bytes total),HttpProtocol(HTTP/1.1))</span><br><span class="line">HttpResponse(200 OK,List(Server: akka-http/10.2.9, Date: Tue, 29 Mar 2022 00:17:02 GMT),HttpEntity.Strict(text/html; charset=UTF-8,31 bytes total),HttpProtocol(HTTP/1.1))</span><br><span class="line">HttpResponse(200 OK,List(Server: akka-http/10.2.9, Date: Tue, 29 Mar 2022 00:17:17 GMT),HttpEntity.Strict(text/html; charset=UTF-8,31 bytes total),HttpProtocol(HTTP/1.1))</span><br><span class="line">HttpResponse(200 OK,List(Server: akka-http/10.2.9, Date: Tue, 29 Mar 2022 00:17:32 GMT),HttpEntity.Strict(text/html; charset=UTF-8,31 bytes total),HttpProtocol(HTTP/1.1))</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>比调用Shell更高效的判断进程是否存在的方式</title>
    <url>/linux/linux-process-exist/</url>
    <content><![CDATA[<p>有很多场景需要我们的代码检测一个进程是否存在，常用的一种方式是通过调用脚本通过<code>ps -ef</code>的方式查看，然而其实这种做法并不怎么高效，会fork一个进程出来，还会影响<code>go</code>协程的调度</p>
<p>一种更好的方式是可以通过解析<code>/proc</code>文件夹来得到想要的信息，其实可以通过<code>strace</code>命令查看，<code>ps -ef</code>也是读取了这个路径下的信息</p>
<p><img src="/linux/linux-process-exist/linux-ps-ef-strace.png" alt="linux-ps-ef-strace"></p>
<p>下面分别是java和go的轮子示例</p>
<p>使用正则表达式<code>[0-9]+</code>的原因是<code>/proc</code>路径下还有一些其他文件，其中pid都是数字。</p>
<h2><span id="java">java</span><a href="#java" class="header-anchor">#</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">numberPattern</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;[0-9]+&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">processExists</span><span class="params">(String processName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">File</span> <span class="variable">procFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/proc&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!procFile.isDirectory()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;why proc dir is not directory&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> File[] listFiles = procFile.listFiles();</span><br><span class="line">        <span class="keyword">if</span> (listFiles == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> List&lt;File&gt; procDir = Arrays.stream(listFiles).filter(f -&gt; numberPattern.matcher(f.getName()).matches()).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">// find the proc cmdline</span></span><br><span class="line">        <span class="keyword">for</span> (File file : procDir) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">byte</span>[] byteArray = FileUtils.readFileToByteArray(<span class="keyword">new</span> <span class="title class_">File</span>(file.getCanonicalPath() + File.separator + <span class="string">&quot;cmdline&quot;</span>));</span><br><span class="line">                <span class="keyword">final</span> <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[byteArray.length];</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; byteArray.length; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (byteArray[i] != <span class="number">0x00</span>) &#123;</span><br><span class="line">                        bytes[i] = byteArray[i];</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        bytes[i] = (<span class="type">byte</span>) <span class="number">0x20</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">String</span> <span class="variable">cmdLine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes, StandardCharsets.UTF_8);</span><br><span class="line">                <span class="keyword">if</span> (cmdLine.contains(processName)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="comment">// the proc may end during the loop, ignore it</span></span><br><span class="line">                log.error(<span class="string">&quot;read file exception &quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2><span id="go">go</span><a href="#go" class="header-anchor">#</a></h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ProcessExists</span><span class="params">(processName <span class="type">string</span>)</span></span> (<span class="type">bool</span>, <span class="type">error</span>) &#123;</span><br><span class="line">	result := <span class="literal">false</span></span><br><span class="line">	fileInfos, err := ioutil.ReadDir(<span class="string">&quot;/proc&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> _, info := <span class="keyword">range</span> fileInfos &#123;</span><br><span class="line">		name := info.Name()</span><br><span class="line">		matched, err := regexp.MatchString(<span class="string">&quot;[0-9]+&quot;</span>, name)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">false</span>, err</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> !matched &#123;</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line">		cmdLine, err := parseCmdLine(<span class="string">&quot;/proc/&quot;</span> + info.Name() + <span class="string">&quot;/cmdline&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			glog.Error(<span class="string">&quot;read cmd line failed &quot;</span>, err)</span><br><span class="line">			<span class="comment">// the proc may end during the loop, ignore it</span></span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> strings.Contains(cmdLine, processName) &#123;</span><br><span class="line">			result = <span class="literal">true</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">parseCmdLine</span><span class="params">(path <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">	cmdData, err := ioutil.ReadFile(path)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span>, err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(cmdData) &lt; <span class="number">1</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;&quot;</span>, <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	split := strings.Split(<span class="type">string</span>(bytes.TrimRight(cmdData, <span class="type">string</span>(<span class="string">&quot;\x00&quot;</span>))), <span class="type">string</span>(<span class="type">byte</span>(<span class="number">0</span>)))</span><br><span class="line">	<span class="keyword">return</span> strings.Join(split, <span class="string">&quot; &quot;</span>), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux umask 解析</title>
    <url>/linux/linux-umask-analyze/</url>
    <content><![CDATA[<p>什么是<strong>umask</strong>， umask即user file-creation mask. 用来控制最终创建文件的权限。</p>
<p>umask是进程级属性，通常是由<strong>login shell</strong>设置，可以通过系统调用<strong>umask()<strong>或者命令</strong>umask permission</strong>来修改，通过umask命令来查询，linux内核版本4.7之后，还可以通过<strong>cat &#x2F;proc&#x2F;self&#x2F;status|grep -i umask</strong> 查询，示例如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shoothzj:~/masktest $ <span class="built_in">umask</span></span><br><span class="line">0022</span><br><span class="line">shoothzj:~/masktest $ <span class="built_in">umask</span> 0077</span><br><span class="line">shoothzj:~/masktest $ <span class="built_in">umask</span></span><br><span class="line">0077</span><br><span class="line">shoothzj:~/masktest $ <span class="built_in">umask</span> 0022</span><br><span class="line">shoothzj:~/masktest $ <span class="built_in">umask</span></span><br><span class="line">0022</span><br><span class="line">shoothzj:~/masktest $</span><br></pre></td></tr></table></figure>

<p>一般来说，umask的系统默认值在**&#x2F;etc&#x2F;login.defs** 中设置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shoothzj:~ <span class="variable">$cat</span> /etc/login.defs|grep -i <span class="built_in">umask</span></span><br><span class="line"><span class="comment">#	UMASK		Default &quot;umask&quot; value.</span></span><br><span class="line"><span class="comment"># UMASK is the default umask value for pam_umask and is used by</span></span><br><span class="line"><span class="comment"># 022 is the &quot;historical&quot; value in Debian for UMASK</span></span><br><span class="line"><span class="comment"># If USERGROUPS_ENAB is set to &quot;yes&quot;, that will modify this UMASK default value</span></span><br><span class="line">UMASK		022</span><br><span class="line"><span class="comment"># Other former uses of this variable such as setting the umask when</span></span><br></pre></td></tr></table></figure>

<ul>
<li>最常见的默认的umask值是022，目录权限755，文件权限644</li>
<li>077 的 umask 适用于私有的系统，则其他用户无法读取或写入您的数据。</li>
</ul>
<p>针对标准函数<strong>open</strong>来说，最终写入磁盘的权限位是由mode参数和用户的文件创建掩码(umask)执行按位与操作而得到。</p>
<p>假设当<strong>umask</strong>为0022时，创建一个具有0666权限的文件，就会进行运算决定文件的最终权限，先对掩码取非，再和指定的权限进行binary-And操作，如图所示</p>
<p><img src="/linux/linux-umask-analyze/linux-umask-analyze.png" alt="linux-umask-analyze"></p>
<p>示例代码如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> fd;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;usage: %s &lt;file&gt;&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">&quot;create file %s&quot;</span>, argv[<span class="number">1</span>]);</span><br><span class="line">    fd = open(argv[<span class="number">1</span>], O_WRONLY | O_CREAT | O_TRUNC, <span class="number">0666</span>);</span><br><span class="line">    <span class="keyword">if</span> (fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;open&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    close(fd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果如下，权限644，符合预期</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ll</span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x  2 shoothzj shoothzj 4096 Nov  8 06:25 .</span><br><span class="line">drwxr-xr-x 15 shoothzj shoothzj 4096 Nov  8 06:18 ..</span><br><span class="line">-rw-r--r--  1 shoothzj shoothzj    0 Nov  8 06:25 my.txt</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>lvs 性能手册</title>
    <url>/lvs/lvs-performance-manual/</url>
    <content><![CDATA[<h1><span id="lvs-shi-zuo-shi-me-de">lvs是做什么的</span><a href="#lvs-shi-zuo-shi-me-de" class="header-anchor">#</a></h1><p>lvs通常用做tcp&#x2F;udp协议的四层负载均衡</p>
<p><img src="/lvs/lvs-performance-manual/lvs-brief.png" alt="lvs-brief"></p>
<p>相比也可以用于四层负载的<strong>Nginx</strong>组件，<strong>Lvs</strong>因为运行在内核态，性能高是它的主要优势，同样，因为运行在内核态中，无法像Nginx那样，对四层的tls做卸载等动作。</p>
<h1><span id="lvs-xing-neng-xiang-guan-zhi-biao-yong-hu-shi-jiao">lvs性能相关指标(用户视角)</span><a href="#lvs-xing-neng-xiang-guan-zhi-biao-yong-hu-shi-jiao" class="header-anchor">#</a></h1><h2><span id="ke-hu-duan-de-lian-jie-shu">客户端的连接数</span><a href="#ke-hu-duan-de-lian-jie-shu" class="header-anchor">#</a></h2><ul>
<li>UDP模式下，按连接超时时间计算（根据业务需求决定）。可通过<code>ipvsadm -l --timeout</code>来查看udp超时时间</li>
<li>TCP模式下，即为tcp连接数</li>
</ul>
<h2><span id="ke-hu-duan-qing-qiu-liu-liang">客户端请求流量</span><a href="#ke-hu-duan-qing-qiu-liu-liang" class="header-anchor">#</a></h2><p>即client与lvs、lvs与RS之间交互的流量</p>
<h2><span id="ke-hu-duan-qing-qiu-ping-jun-bao-da-xiao">客户端请求平均包大小</span><a href="#ke-hu-duan-qing-qiu-ping-jun-bao-da-xiao" class="header-anchor">#</a></h2><p>即client与lvs、lvs与RS之间的平均包大小</p>
<h1><span id="lvs-xing-neng-xiang-guan-can-shu">lvs性能相关参数</span><a href="#lvs-xing-neng-xiang-guan-can-shu" class="header-anchor">#</a></h1><h2><span id="hui-hua-chao-shi-shi-jian">会话超时时间</span><a href="#hui-hua-chao-shi-shi-jian" class="header-anchor">#</a></h2><h3><span id="cha-kan">查看</span><a href="#cha-kan" class="header-anchor">#</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipvsadm -l --<span class="built_in">timeout</span></span><br></pre></td></tr></table></figure>

<h3><span id="xiu-gai">修改</span><a href="#xiu-gai" class="header-anchor">#</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ipvsadm --<span class="built_in">set</span> <span class="variable">$&#123;tcptimeout&#125;</span> <span class="variable">$&#123;tcpfintimeout&#125;</span> <span class="variable">$&#123;udptimeout&#125;</span></span><br></pre></td></tr></table></figure>

<h2><span id="vm-conntrack-zui-da-ge-shu">vm conntrack最大个数</span><a href="#vm-conntrack-zui-da-ge-shu" class="header-anchor">#</a></h2><h3><span id="cha-kan">查看</span><a href="#cha-kan" class="header-anchor">#</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysctl -a |grep net.netfilter.nf_conntrack_max</span><br></pre></td></tr></table></figure>

<h3><span id="cha-kan-dang-qian-nf-conntrack-ge-shu">查看当前nf_conntrack个数</span><a href="#cha-kan-dang-qian-nf-conntrack-ge-shu" class="header-anchor">#</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式一</span></span><br><span class="line">conntrack -C</span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line"><span class="built_in">cat</span> /proc/net/nf_conntrack | <span class="built_in">wc</span> -l</span><br></pre></td></tr></table></figure>

<h3><span id="xiu-gai">修改</span><a href="#xiu-gai" class="header-anchor">#</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sysctl -w net.netfilter.nf_conntrack_max=1024</span><br></pre></td></tr></table></figure>

<h2><span id="hashsize">hashsize</span><a href="#hashsize" class="header-anchor">#</a></h2><h3><span id="shi-me-shi-hashsize">什么是hashsize</span><a href="#shi-me-shi-hashsize" class="header-anchor">#</a></h3><p><strong>hashsize</strong>也就是<strong>nf_conntrack_buckets</strong>，如果不手动指定。linux会根据机器的内存计算。如果要支持海量的<strong>nf_conntrack</strong>，则可以适当调大。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">  <span class="comment">// nf_conntrack_core.c</span></span><br><span class="line">  nf_conntrack_htable_size</span><br><span class="line">	= (((nr_pages &lt;&lt; PAGE_SHIFT) / <span class="number">16384</span>)</span><br><span class="line">	   / <span class="keyword">sizeof</span>(<span class="keyword">struct</span> hlist_head));</span><br><span class="line"><span class="keyword">if</span> (BITS_PER_LONG &gt;= <span class="number">64</span> &amp;&amp;</span><br><span class="line">    nr_pages &gt; (<span class="number">4</span> * (<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">1024</span> / PAGE_SIZE)))</span><br><span class="line">	nf_conntrack_htable_size = <span class="number">262144</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nr_pages &gt; (<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">1024</span> / PAGE_SIZE))</span><br><span class="line">	nf_conntrack_htable_size = <span class="number">65536</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (nf_conntrack_htable_size &lt; <span class="number">1024</span>)</span><br><span class="line">	nf_conntrack_htable_size = <span class="number">1024</span>;</span><br></pre></td></tr></table></figure>

<p><strong>hlist_head</strong>的大小在64位的机器下大小为16</p>
<h3><span id="cha-kan">查看</span><a href="#cha-kan" class="header-anchor">#</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /sys/module/nf_conntrack/parameters/hashsize</span><br></pre></td></tr></table></figure>

<h3><span id="xiu-gai-fang-shi-yi">修改 （方式一）</span><a href="#xiu-gai-fang-shi-yi" class="header-anchor">#</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> 65536 &gt; /sys/module/nf_conntrack/parameters/hashsize</span><br></pre></td></tr></table></figure>

<h3><span id="xiu-gai-fang-shi-er-yong-jiu-sheng-xiao">修改（方式二）永久生效</span><a href="#xiu-gai-fang-shi-er-yong-jiu-sheng-xiao" class="header-anchor">#</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># exmaple file, you can modify this config if exists. File name doesn&#x27;t matter.</span></span><br><span class="line"><span class="comment"># 样例文件，你可以修改已存在的这个文件。文件名称并不重要。</span></span><br><span class="line"><span class="built_in">touch</span> /etc/modprobe.d/lvs.conf</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;options nf_conntrack hashsize=65536&quot;</span> &gt;&gt; /etc/modprobe.d/lvs.conf</span><br><span class="line"><span class="comment"># then you need reboot</span></span><br><span class="line"><span class="comment"># 需要重试来使配置生效</span></span><br></pre></td></tr></table></figure>

<h2><span id="wen-jian-ju-bing-shu">文件句柄数</span><a href="#wen-jian-ju-bing-shu" class="header-anchor">#</a></h2><h3><span id="cha-kan">查看</span><a href="#cha-kan" class="header-anchor">#</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -n</span><br></pre></td></tr></table></figure>

<h3><span id="xiu-gai">修改</span><a href="#xiu-gai" class="header-anchor">#</a></h3><p>不同的linux发行版，修改方式不太一样，以RedHat为例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">num=`<span class="built_in">ulimit</span> -n`</span><br><span class="line">sed -i <span class="string">&quot;s|<span class="variable">$num</span>|65536|g&quot;</span> /etc/security/limits.d/*-nofile.conf</span><br></pre></td></tr></table></figure>

<h1><span id="lvs-xing-neng-ping-jing">lvs性能瓶颈</span><a href="#lvs-xing-neng-ping-jing" class="header-anchor">#</a></h1><h2><span id="xu-ni-ji-nei-cun">虚拟机内存</span><a href="#xu-ni-ji-nei-cun" class="header-anchor">#</a></h2><p>contnrack使用<strong>slab</strong>分配内存，可以通过<strong>slabtop</strong>命令查看nf_conntrack模块占用的内存。当连接数较高时，Lvs的内存瓶颈在于会话管理。</p>
<p><strong>conntrack</strong>最大理论内存占用为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">max_mem_used = conntrack * max * sizeof (struct nf_conntrack) + conntrack_buckets * sizeof (struct list_head)</span><br></pre></td></tr></table></figure>

<p>使用如下python代码计算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个是nf_conntrack的动态库所在路径</span></span><br><span class="line"><span class="comment"># libnetfilter git地址 git://git.netfilter.org/libnetfilter_conntrack</span></span><br><span class="line">LIBNETFILTER_CONNTRACK = <span class="string">&#x27;/usr/lib/aarch64-linux-gnu/libnetfilter_conntrack.so.3.7.0&#x27;</span></span><br><span class="line">nfct = ctypes.CDLL(LIBNETFILTER_CONNTRACK)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;max size of struct nf_conntrack:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(nfct.nfct_maxsize())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sizeof(struct list_head):&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(ctypes.sizeof(ctypes.c_void_p) * <span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>其中<code>nfct_maxsize</code>出自于<code>git://git.netfilter.org/libnetfilter_conntrack</code>中的<code>src/conntrack/api.c</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * nfct_maxsize - return the maximum size in bytes of a conntrack object</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<p>在如下操作系统下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">uname -a</span><br><span class="line">&gt; Linux primary 5.4.0-122-generic #138-Ubuntu SMP Wed Jun 22 15:05:39 UTC 2022 aarch64 aarch64 aarch64 GNU/Linux</span><br></pre></td></tr></table></figure>

<p>以100万conntrack_max，65536buckets为例，占用的内存为</p>
<p>1_000_000 * 392 + 65536 * 16 约等于 373.84 + 1 为374M内存</p>
<h2><span id="wang-qia-liu-liang">网卡流量</span><a href="#wang-qia-liu-liang" class="header-anchor">#</a></h2><p>最大进出带宽。在云上，通常由云厂商限制。如果你将lvs上面的浮动Ip通过EIP的方式暴露出去（这很常见），还需要考虑EIP自身的带宽</p>
<h2><span id="wang-qia-jin-chu-bao-ge-shu-pps">网卡进出包个数（PPS)</span><a href="#wang-qia-jin-chu-bao-ge-shu-pps" class="header-anchor">#</a></h2><p>最大进出包个数</p>
<h2><span id="xu-ni-ji-neng-zhi-chi-de-zui-da-wang-luo-lian-jie-shu">虚拟机能支持的最大网络连接数</span><a href="#xu-ni-ji-neng-zhi-chi-de-zui-da-wang-luo-lian-jie-shu" class="header-anchor">#</a></h2><p>ECS上可以支持的最大网络连接数。在云上，通常由云厂商限制</p>
<h1><span id="lvs-jian-kong-amp-kuo-rong">Lvs监控&amp;扩容</span><a href="#lvs-jian-kong-amp-kuo-rong" class="header-anchor">#</a></h1><h2><span id="cpu-shi-yong-lu">cpu使用率</span><a href="#cpu-shi-yong-lu" class="header-anchor">#</a></h2><p>可在超过百分之80的时候告警。处理方式：</p>
<ul>
<li>如果内存还没有到达瓶颈，可以通过扩大hashsize的方式，降低hash链上元素的个数，减少匹配消耗的cpu</li>
<li>如果内存水位也较高。对CPU进行扩容</li>
</ul>
<h2><span id="nei-cun-shi-yong-lu">内存使用率</span><a href="#nei-cun-shi-yong-lu" class="header-anchor">#</a></h2><p>可在超过内存容量百分之80的时候告警。处理方式：扩容内存</p>
<h2><span id="conntrack-ge-shu">conntrack个数</span><a href="#conntrack-ge-shu" class="header-anchor">#</a></h2><p>通过<code>conntrack -C</code>或<code>cat /proc/net/nf_conntrack | wc -l</code>, 定期进行统计，使用<code>sysctl -w net.netfilter.nf_conntrack_max</code>进行扩容</p>
<h2><span id="wang-qia-liu-liang-wang-qia-jin-chu-bao-ge-shu">网卡流量、网卡进出包个数</span><a href="#wang-qia-liu-liang-wang-qia-jin-chu-bao-ge-shu" class="header-anchor">#</a></h2><p>可以利用云厂商的监控或<code>nicstat</code>命令查看。处理方式：扩容网卡</p>
<h2><span id="zui-da-wang-luo-lian-jie-shu">最大网络连接数</span><a href="#zui-da-wang-luo-lian-jie-shu" class="header-anchor">#</a></h2><p>可以利用云厂商的监控或<code>netstat -an|egrep &quot;tcp|udp&quot;|grep -v &quot;LISTEN&quot;|wc -l</code>或<code>ss -tun state all | grep -v LISTEN | wc -l</code>查看。处理方式：扩容ECS规格</p>
<h2><span id="eip-dai-kuan">EIP带宽</span><a href="#eip-dai-kuan" class="header-anchor">#</a></h2><p>通过云厂商的指标来监控。处理方式，扩容EIP的BGP带宽</p>
]]></content>
      <tags>
        <tag>lvs</tag>
      </tags>
  </entry>
  <entry>
    <title>lvs persistent timeout和connection timeout解析</title>
    <url>/lvs/lvs-timeout-analyze/</url>
    <content><![CDATA[<h1><span id="liang-ge-chao-shi-de-zhu-shi">两个超时的注释</span><a href="#liang-ge-chao-shi-de-zhu-shi" class="header-anchor">#</a></h1><p>首先看一下一下<code>ipvsadm -h</code>对这两个参数的注释</p>
<h2><span id="persistent-timeout">persistent timeout</span><a href="#persistent-timeout" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--persistent  -p [timeout]     persistent service</span><br><span class="line">Specify that a virtual service is persistent. If this option is specified, multiple requests from a client are redirected to the same real server selected for the first request. Optionally, the timeout of persistent sessions may be specified given in seconds, otherwise the default of 300 seconds will be used. This option may be used in conjunction with protocols such as SSL or FTP where it is important that clients consistently connect with the same real server.</span><br></pre></td></tr></table></figure>

<p>说明这个VS是否是持久的。如果配置了这个选项，来自同一个客户端的链接（这里注意：这里的同一个客户端指的是同一个IP）会转发向相同的服务器。注释中特意提到了FTP协议。我查阅了一下资料，可能像FTP协议这种，客户端通过21端口打开控制连接，再通过20端口打开数据连接，这种协议，要求来自同一个客户端ip，不同端口的请求也送向同一个服务器，估计是这个参数存在的核心原因。如果是现在的系统，比如k8s使用ipvs，这个参数是完全没必要配置的</p>
<h2><span id="connection-timeout">connection timeout</span><a href="#connection-timeout" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--set tcp tcpfin udp</span><br><span class="line">Change the timeout values used for IPVS connections. This command always takes 3 parameters, representing the timeout values (in seconds) for TCP sessions, TCP sessions after receiving a FIN packet, and UDP packets, respectively. A timeout value 0 means that the current timeout value of the corresponding entry is preserved.</span><br></pre></td></tr></table></figure>

<p>更改用于ipvs连接的超时值。此命令始终使用3个参数，分别表示tcp会话，接收到FIN包的TCP会话和UDP包的超时值。单位为秒。设置为0并不代表将超时值设置为0，而是保持原有不变。顺便来说，<code>timeout</code>的默认值是900、120、300.</p>
<h2><span id="qu-bie">区别</span><a href="#qu-bie" class="header-anchor">#</a></h2><p>一个以客户端ip为维度，一个以客户端ip+port为维度</p>
<h2><span id="lian-xi">联系：</span><a href="#lian-xi" class="header-anchor">#</a></h2><ul>
<li>persistent值大于等于set时，persistent timeout以persistent的设置为准。</li>
<li>persistent值小于set时，当set超时，但persistent超时后，会将persistent再次设置为60。只到set超时为止。所以这个时候，真实生效的persistent timeout是<code>(s/60)*60 + p%60 + 60</code></li>
</ul>
]]></content>
      <tags>
        <tag>lvs</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL异步复制中的数据不一致问题</title>
    <url>/mysql/mysql-async-replica-inconsistency/</url>
    <content><![CDATA[<h2><span id="qian-ti">前提</span><a href="#qian-ti" class="header-anchor">#</a></h2><p>Mysql8.0.X版本，且核心配置如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gtid_mode=ON</span><br><span class="line">binlog_format=row</span><br><span class="line">slave_skip_errors=all</span><br></pre></td></tr></table></figure>

<p>数据不一致的根本原因在于MySQL在设计上不具备分布式系统的完整语义，这导致主从复制在面对网络分区和延迟时无法保持数据一致性。（又不可能采取全同步的模式，那就变成一个CP系统了）。根据数据冲突的内容，如果是<strong>”不同主键，不触发唯一键约束的数据冲突”</strong>，那么后续很容易可以同步到一致。如果触发了主键或者唯一键的冲突，无法互相同步，场景会变得复杂一些，简而言之，只有当后续的操作可以同时在主&#x2F;备两个数据库中抹平这个差距，数据才能恢复，并且约束越多，抹平也就变得愈困难。举例</p>
<ul>
<li>仅存在主键约束，数据内容不同，通过下次操作主键(update&#x2F;delete)，则可以恢复</li>
<li>数据库自增主键（两条数据主键不同），触发了唯一字段约束，后续的操作要同时抹平主键、唯一字段、其他内容才能恢复一致（比如根据相同的条件删除掉这条数据等）</li>
</ul>
<p>下文将分别以插入为例讨论这几个场景，用红色叉号代表同步延迟或者断开。</p>
<p>注：由于Mysql主备同步时会将upsert类的sql转换为实际执行的insert、update语句，也就是说upsert的语义在主备同步不稳定&#x2F;切换时，容易丢失。</p>
<h2><span id="bu-tong-zhu-jian-bu-hong-fa-wei-yi-jian-yue-shu-de-shu-ju-chong-tu"><strong>不同主键，不触发唯一键约束的数据冲突</strong></span><a href="#bu-tong-zhu-jian-bu-hong-fa-wei-yi-jian-yue-shu-de-shu-ju-chong-tu" class="header-anchor">#</a></h2><p>设想表结构，仅有一个name字段，且name为主键。比如我们先在MysqlA中插入了数据name&#x3D;tt，假设发生了切换，又向MysqlB插入了数据name&#x3D;wtt。</p>
<p><img src="/mysql/mysql-async-replica-inconsistency/mysql-case1-insert-data.png" alt="mysql-case1-insert-data"></p>
<p>这就导致MysqlA与MysqlB里面的数据存在着不一致，但是一旦同步恢复，数据就会一致。</p>
<p><img src="/mysql/mysql-async-replica-inconsistency/mysql-case1-sync-success.png" alt="mysql-case1-sync-success"></p>
<h2><span id="jin-zhu-jian-yue-shu-nei-rong-bu-yi-zhi-chong-tu">仅主键约束，内容不一致冲突</span><a href="#jin-zhu-jian-yue-shu-nei-rong-bu-yi-zhi-chong-tu" class="header-anchor">#</a></h2><p>表结构，拥有两个字段，name为主键，age为字段。</p>
<p>同样，插入了两条数据，导致冲突。</p>
<p><img src="/mysql/mysql-async-replica-inconsistency/mysql-case2-insert-data.png" alt="mysql-case2-insert-data"></p>
<p>即使MysqlA和MysqlB之间同步恢复，后续insert语句也会由于主键冲突同步失败。</p>
<p><img src="/mysql/mysql-async-replica-inconsistency/mysql-case2-sync-fail.png" alt="mysql-case2-sync-fail"></p>
<p>这种不一致要等到后续对主键进行update操作后，才能恢复一致</p>
<p><img src="/mysql/mysql-async-replica-inconsistency/mysql-case2-recovery.png" alt="mysql-case2-recovery"></p>
<h2><span id="bao-han-zhu-jian-wei-yi-yue-shu-zai-nei-de-chong-tu-chang-jing">包含主键、唯一约束在内的冲突场景</span><a href="#bao-han-zhu-jian-wei-yi-yue-shu-zai-nei-de-chong-tu-chang-jing" class="header-anchor">#</a></h2><p>主键为数据库自增主键，其中一个库为奇数，另一个库为偶数。同时还有唯一约束name</p>
<p><img src="/mysql/mysql-async-replica-inconsistency/mysql-case3-insert-data.png" alt="mysql-case3-insert-data"></p>
<p>这时候插入数据，就会导致不一致，并且主键也不相同，由于业务不感知主键，使用不存在则更新的语法也会导致主键不一致。</p>
<p><img src="/mysql/mysql-async-replica-inconsistency/mysql-case3-upsert-data.png" alt="mysql-case3-upsert-data"></p>
<p>可以预想到即使恢复同步，MysqlA和MysqlB数据也无法一致。</p>
<p><img src="/mysql/mysql-async-replica-inconsistency/mysql-case3-sync-fail.png" alt="mysql-case3-sync-fail"></p>
<p>在这种场景下，任何针对id的SQL操作都无法在双方数据库中成功同步。例如，MysqlB数据库中不存在id为0的记录，而MysqlA中不存在id为1的记录，导致同步操作失败。</p>
<p>想要恢复一致，可以通过业务唯一约束来删除记录或者是根据业务约束把Mysql主键id也一并更新（不过这很困难，一般这种业务是不会直接操作id的）</p>
<p>那么可能会有人有疑问，为什么不像之前那样，用name作为唯一主键呢？</p>
<p>答：业务的需求多种多样，而且如果唯一约束由多个字段组成，使用Mysql自增主键是唯一的选择。</p>
<h2><span id="zong-jie">总结</span><a href="#zong-jie" class="header-anchor">#</a></h2><p>本文探讨了Mysql异步复制模式下的数据不一致问题，容易在什么时候产生，什么时候恢复。总的来说，业务如果只有一个唯一主键，出现不一致的概率更小。如果业务用数据库自增作为主键，同时伴有唯一约束的插入操作（如upsert等），更容易出现长期的不一致。</p>
]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>揭秘MySQL TLS：通过抓包了解真实的加密通信</title>
    <url>/mysql/mysql-default-tls/</url>
    <content><![CDATA[<p>你的mysql客户端和服务端之间开启tls了吗？你的回答可能是No，我没有申请证书，也没有开启mysql客户端，服务端的tls配置。</p>
<p>可是当你抓取了3306 mysql的端口之后，你会发现，抓出来的包里居然有Client Hello、Server Hello这样的典型TLS报文。</p>
<p><img src="/mysql/mysql-default-tls/mysql-tls-pcap.png" alt="mysql-tls-pcap"></p>
<p>其实，Mysql的通信是否加密，是由客户端和服务端共同协商是否开启的，客户端与服务端都处于默认配置下的话，有些类似于StartTls。</p>
<h2><span id="fu-wu-duan-ce">服务端侧</span><a href="#fu-wu-duan-ce" class="header-anchor">#</a></h2><p>在连接建立时，Mysql服务端会返回一个<strong>Server Greeting</strong>，其中包含了一些关于服务端的信息，比如协议版本、Mysql版本等等。在其中有一个flag的集合字段，名为<br><strong>Capabilities Flag</strong>，顾名思义，这就是用来做兼容性，或者说特性开关的flag，大小为2个字节，其中的第12位，代表着<strong>CLIENT_SSL</strong><br>，如果设置为1，那代表着如果客户端具备能力，服务端可以在后面的会话中切换到TLS。可以看到里面还有一些其他的flag，事务、长密码等等相关的兼容性开关。</p>
<p><img src="/mysql/mysql-default-tls/mysql-pcap-capabilities-flag.png" alt="mysql-pcap-capabilities-flag"></p>
<p>我们可以测试一下设置为0的行为，只需要在my.cnf中添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;ssl=0&quot;</span> &gt;&gt; /etc/my.cnf</span><br></pre></td></tr></table></figure>

<p>重启mysql。再度进行抓包，就发现没有tls的报文了，都是在使用明文进行通信了。</p>
<p><img src="/mysql/mysql-default-tls/mysql-plain-pcap.png" alt="mysql-plain-pcap"></p>
<h2><span id="ke-hu-duan-ce">客户端侧</span><a href="#ke-hu-duan-ce" class="header-anchor">#</a></h2><p>这个协商过程也可以在客户端进行控制，客户端对应的参数是sslMode，可以设置为DISABLED、PREFERRED、REQUIRED、VERIFY_CA、VERIFY_IDENTITY，分别代表不使用ssl、优先使用ssl、必须使用ssl、验证CA、验证身份。默认的行为是PREFERRED，example:</p>
<p>比如配置sslMode为DISABLED，那么客户端就不会使用ssl进行通信，而是使用明文。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">r2dbc:mysql://localhost:3306/test?sslMode=DISABLED</span><br></pre></td></tr></table></figure>

<p><img src="/mysql/mysql-default-tls/mysql-client-disable-tls.png" alt="mysql-client-disable-tls"></p>
<h2><span id="zong-jie">总结</span><a href="#zong-jie" class="header-anchor">#</a></h2><table>
<thead>
<tr>
<th>客户端</th>
<th>服务端</th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>DISABLED</td>
<td>ssl&#x3D;0</td>
<td>PLAIN</td>
</tr>
<tr>
<td>DISABLED</td>
<td>ssl&#x3D;1</td>
<td>PLAIN</td>
</tr>
<tr>
<td>PREFERRED</td>
<td>ssl&#x3D;0</td>
<td>PLAIN</td>
</tr>
<tr>
<td>PREFERRED</td>
<td>ssl&#x3D;1</td>
<td>TLS</td>
</tr>
<tr>
<td>REQUIRED</td>
<td>ssl&#x3D;0</td>
<td>Fail</td>
</tr>
<tr>
<td>REQUIRED</td>
<td>ssl&#x3D;1</td>
<td>TLS</td>
</tr>
<tr>
<td>VERIFY_CA</td>
<td>ssl&#x3D;0</td>
<td>Fail</td>
</tr>
<tr>
<td>VERIFY_CA</td>
<td>ssl&#x3D;1 + CA配置</td>
<td>TLS，客户端验证证书</td>
</tr>
<tr>
<td>VERIFY_IDENTITY</td>
<td>ssl&#x3D;0</td>
<td>Fail</td>
</tr>
<tr>
<td>VERIFY_IDENTITY</td>
<td>ssl&#x3D;1 + CA配置</td>
<td>TLS，客户端验证证书和域名</td>
</tr>
</tbody></table>
<p>注：</p>
<ul>
<li>VERIFY_CA：确保服务器证书由受信任的CA签发，但不验证证书的主机名或IP地址。</li>
<li>VERIFY_IDENTITY：不仅验证证书的CA签发，还额外验证证书的主机名或IP地址与服务器的实际地址是否一致。</li>
</ul>
]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql是如何隐藏ps命令行中的密码的</title>
    <url>/mysql/mysql-ps-password/</url>
    <content><![CDATA[<h2><span id="can-kao">参考</span><a href="#can-kao" class="header-anchor">#</a></h2><ul>
<li><a href="http://northernmost.org/blog/how-does-mysql-hide-the-command-line-password-in-ps/index.html">http://northernmost.org/blog/how-does-mysql-hide-the-command-line-password-in-ps/index.html</a></li>
</ul>
<p>之前就在环境上<code>ps -ef</code>看到过<code>xxxxxx</code>的密码，一直没搞明白怎么回事，今天整理了一下，核心内容均来自于上述连接，作了一些额外的测试和查阅资料。</p>
<h2><span id="ce-shi">测试</span><a href="#ce-shi" class="header-anchor">#</a></h2><h3><span id="yun-xing-mysql-shi-li">运行Mysql实例</span><a href="#yun-xing-mysql-shi-li" class="header-anchor">#</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自己做的Mysql8的镜像</span></span><br><span class="line">docker run ttbb/mysql:stand-alone</span><br></pre></td></tr></table></figure>

<h3><span id="shi-yong-mi-ma-lian-jie-mysql-fu-wu-qi">使用密码连接Mysql服务器</span><a href="#shi-yong-mi-ma-lian-jie-mysql-fu-wu-qi" class="header-anchor">#</a></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -u hzj -p Mysql@123 -e <span class="string">&quot;select 1&quot;</span></span><br></pre></td></tr></table></figure>

<h3><span id="ps-ef-cha-kan">ps -ef查看</span><a href="#ps-ef-cha-kan" class="header-anchor">#</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@91bcbd15a82e mysql]# ps -ef</span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 07:34 ?        00:00:00 /usr/local/bin/dumb-init bash -vx /opt/sh/mysql/hzj/scripts/start.sh</span><br><span class="line">root         8     1  0 07:34 ?        00:00:00 bash -vx /opt/sh/mysql/hzj/scripts/start.sh</span><br><span class="line">root        17     1  0 07:34 ?        00:00:00 mysqld --daemonize --user=root</span><br><span class="line">root        62     8  0 07:34 ?        00:00:00 tail -f /dev/null</span><br><span class="line">root        63     0  0 07:34 pts/0    00:00:00 bash</span><br><span class="line">root        98    63  0 07:37 pts/0    00:00:00 mysql -h 127.0.0.1 -u hzj -px xxxxxxx</span><br><span class="line">root        99     0  1 07:37 pts/1    00:00:00 bash</span><br><span class="line">root       122    99  0 07:37 pts/1    00:00:00 ps -ef</span><br></pre></td></tr></table></figure>

<h2><span id="mysql-yin-cang-mi-ma-yuan-li">Mysql隐藏密码原理</span><a href="#mysql-yin-cang-mi-ma-yuan-li" class="header-anchor">#</a></h2><p>改写了<code>args</code>系统参数，demo如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by 张俭 on 2021/4/26.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">pid_t</span> mypid = getpid();</span><br><span class="line">    <span class="keyword">if</span> (argc == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;argc = %d and arguments are:\n&quot;</span>, argc);</span><br><span class="line">    <span class="keyword">for</span> (i; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d = %s\n&quot;</span>, i, argv[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    sleep(<span class="number">30</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Replacing first argument with x:es... Now open another terminal and run: ps p %d\n&quot;</span>, (<span class="type">int</span>)mypid);</span><br><span class="line">    <span class="built_in">memset</span>(argv[<span class="number">1</span>], <span class="string">&#x27;x&#x27;</span>, <span class="built_in">strlen</span>(argv[<span class="number">1</span>]));</span><br><span class="line">    getc(<span class="built_in">stdin</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>编译并运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc password_hide.c</span><br><span class="line">[root@c77dc365cd1a sh]<span class="comment"># ./a.out abcd</span></span><br><span class="line">argc = 2 and arguments are:</span><br><span class="line">0 = ./a.out</span><br><span class="line">1 = abcd</span><br><span class="line">Replacing first argument with x:es... Now open another terminal and run: ps p 55</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>观测结果，开始看的确有明文密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@c77dc365cd1a sh]# ps -ef</span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 07:49 pts/0    00:00:00 bash</span><br><span class="line">root        32     0  0 07:51 pts/1    00:00:00 bash</span><br><span class="line">root        64     1  0 07:56 pts/0    00:00:00 ./a.out abcd</span><br><span class="line">root        66    32  0 07:56 pts/1    00:00:00 ps -ef</span><br></pre></td></tr></table></figure>
<p>经过30秒后，已经被复写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@c77dc365cd1a sh]# ps p 55</span><br><span class="line">  PID TTY      STAT   TIME COMMAND</span><br><span class="line">   55 pts/0    S+     0:00 ./a.out xxxx</span><br></pre></td></tr></table></figure>
<h2><span id="mysql-yuan-ma-di-zhi">Mysql源码地址</span><a href="#mysql-yuan-ma-di-zhi" class="header-anchor">#</a></h2><p>mysql-server&#x2F;client&#x2F;mysql.cc line 2054</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (argument) &#123;</span><br><span class="line">  char *start = argument;</span><br><span class="line">  my_free(opt_password);</span><br><span class="line">  opt_password = my_strdup(PSI_NOT_INSTRUMENTED, argument, MYF(MY_FAE));</span><br><span class="line">  while (*argument) *argument++ = &#x27;x&#x27;;  // Destroy argument</span><br><span class="line">  if (*start) start[1] = 0;</span><br><span class="line">  tty_password = false;</span><br><span class="line">&#125; else</span><br><span class="line">  tty_password = true;</span><br></pre></td></tr></table></figure>

<p>PS: 后面，我还在OSX上用go程序尝试修改参数，估摸go程序的args传入是值拷贝，修改完成之后args没有生效，看来这个黑科技只有c程序能使用呀。</p>
]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx支持SNI转发</title>
    <url>/nginx/nginx-sni/</url>
    <content><![CDATA[<p>SNI是一个TLS的扩展字段，经常用于访问域名跳转到不同的后端地址。</p>
<p>配置方式如下：打开nginx.conf文件，以ttbb&#x2F;nginx:nake镜像为例&#x2F;usr&#x2F;local&#x2F;openresty&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</p>
<p>如下为默认的nginx.conf配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   html;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">        # concurs with nginx&#x27;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在最后面添加上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line"></span><br><span class="line">map $ssl_preread_server_name $name &#123;</span><br><span class="line">    backend.example.com      backend;</span><br><span class="line">    default                  backend2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream backend &#123;</span><br><span class="line">    server 192.168.0.3:12345;</span><br><span class="line">    server 192.168.0.4:12345;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">upstream backend2 &#123;</span><br><span class="line">    server 127.0.0.1:8071;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen      12346;</span><br><span class="line">    proxy_pass  $name;</span><br><span class="line">    ssl_preread on;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个时候，我们已经开启了SNI转发的功能，如果你使用backend.example.com的域名访问服务器，就会转发到backend，如果使用其他域名，就会转发到backend2</p>
<p>测试的时候，让我们在&#x2F;etc&#x2F;hosts里进行设置，添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">127.0.0.1 backend.example.com</span><br></pre></td></tr></table></figure>

<p>然后进行请求</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://backend.example.com:12346</span><br></pre></td></tr></table></figure>

<p>这里注意请求要使用https，http协议或者是tcp可没有SNI的说法</p>
<p><img src="/nginx/nginx-sni/nginx-sni-backend.png" alt="nginx-sni-backend"></p>
<p>发现请求的确实是backend</p>
<p>然后测试请求127.0.0.1:12346</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://127.0.0.1:12346</span><br></pre></td></tr></table></figure>

<p><img src="/nginx/nginx-sni/nginx-sni-127.png" alt="nginx-sni-127"></p>
]]></content>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>opengemini client sdk 设计</title>
    <url>/opengemini/opengemini-sdk-design/</url>
    <content><![CDATA[<h1><span id="bei-jing">背景</span><a href="#bei-jing" class="header-anchor">#</a></h1><p>由于Influxdb 1.X的客户端已经基本处于维护状态，同时openGemini仍在不断发展中，为了能够更好地支持openGemini，如支持对接多个服务端地址、支持对接Apache<br>Arrow Flight协议等，社区决定开发属于openGemini自己的客户端SDK。</p>
<h1><span id="ke-hu-duan-sdk-gui-hua-gong-neng">客户端SDK规划功能</span><a href="#ke-hu-duan-sdk-gui-hua-gong-neng" class="header-anchor">#</a></h1><ul>
<li>支持对接多个服务端地址</li>
<li>支持对接Apache Arrow Flight协议</li>
<li>支持Sql查询、结构化查询、写入、批量写入等，详见下文UML图</li>
<li>默认超时，连接超时10秒，读写超时30秒</li>
</ul>
<p>本文的方法假定编程语言不支持重载，如编程语言支持重载，可以对方法名进行一些优化调整。</p>
<h1><span id="client-constructor-params-design">Client constructor params design</span><a href="#client-constructor-params-design" class="header-anchor">#</a></h1><p>tls相关配置可以参考<a href="../../code/multi-lang-paradigm-tls-config-design">TLS配置参数设计</a></p>
<pre class="mermaid">classDiagram
    class OpenGeminiClient {
        + List~Address~ addresses
        + AuthConfig authConfig // nullable, if null, means no auth
        + BatchConfig batchConfig // nullable, if null, means batch is disabled
        + timeout
        + connectTimeout
        + bool gzipEnabled
        + bool tlsEnabled
        + TlsConfig tlsConfig // language specific
        + void close()
    }

    class Address {
        + String host
        + int Port // in rust, it is u16
    }

    class AuthConfig {
        + AuthType authType // enum None, Password, Token
        + String username
        + String password
        + String token
    }

    class BatchConfig {
        + Duration batchInterval // must be greater than 0
        + int batchSize // must be greater than 0
    }

    OpenGeminiClient "1" *-- "many" Address: contains
    OpenGeminiClient *-- AuthConfig: contains
    OpenGeminiClient *-- BatchConfig: contains</pre>

<h1><span id="database-amp-retentionpolicy-management-design">Database &amp; RetentionPolicy management design</span><a href="#database-amp-retentionpolicy-management-design" class="header-anchor">#</a></h1><pre class="mermaid">classDiagram
    class OpenGeminiClient {
        + void CreateDatabase(String database)
        + void CreateDatabaseWithRp(String database, rpConfig RpConfig)
        + String[] ShowDatabases()
        + void DropDatabase(String database)
        + void CreateRetentionPolicy(database string, rpConfig RpConfig, isDefault bool)
        + RetentionPolicy[] ShowRetentionPolicies(database string)
        + void DropRetentionPolicy(database, retentionPolicy string)
    }
    class RpConfig {
        + String Name
        + String Duration
        + String ShardGroupDuration
        + String IndexDuration
    }</pre>

<h1><span id="write-point-design">Write point design</span><a href="#write-point-design" class="header-anchor">#</a></h1><pre class="mermaid">classDiagram
    class OpenGeminiClient {
        + WritePoint(String database, Point point)
        + WriteBatchPoints(String database, BatchPoints batchPoints)
    }
    class BatchPoints {
        + List~Point~ points
        + AddPoint(Point)
    }

    class Point {
        + String measurement
        + Precision precision // enum, second, millisecond, microsecond, nanosecond, default is nanosecond
        + Time time // language specific
        + Map~String, String~ tags
        + Map~String, Object~ fields
        + AddTag(string, string) // init container if null
        + AddField(string, int) // init container if null
        + AddField(string, string) // init container if null
        + AddField(string, float) // init container if null
        + AddField(string, bool) // init container if null
        + SetTime(timestamp)
        + SetPrecision(type)
        + SetMeasurement(name)
    }

    BatchPoints "1" *-- "many" Point: contains</pre>

<h1><span id="sql-like-query-design">Sql-like query design</span><a href="#sql-like-query-design" class="header-anchor">#</a></h1><pre class="mermaid">classDiagram
    class Query {
        + String database
        + String retentionPolicy
        + String command
    }</pre>

<pre class="mermaid">classDiagram
    class QueryResult {
        + List~SeriesResult~ results
        + String error
    }
    class SeriesResult {
        + List~Series~ series // Series is an uncountable noun.
        + String error
    }
    class Series {
        + String name
        + Map~String, String~ tags
        + List~String~ columns
        + List~List~ values
    }
    QueryResult "1" *-- "0..*" SeriesResult: contains
    SeriesResult "1" *-- "0..*" Series: contains</pre>

<h1><span id="ping-design">Ping design</span><a href="#ping-design" class="header-anchor">#</a></h1><pre class="mermaid">classDiagram
    class OpenGeminiClient {
        + void ping(int index) // index selects one from multiple servers
    }</pre>

<h1><span id="inner-http-client-design">Inner Http client design</span><a href="#inner-http-client-design" class="header-anchor">#</a></h1><p>使用类似InnerHttpClient的设计，将鉴权、负载均衡、重试等逻辑封装在内部，对client提供简单的接口。增强模块化和代码清晰度。</p>
<pre class="mermaid">classDiagram
    class InnerHttpClient {
        + void executeHttpGetByIdx(int idx, ...) // specify server index
        + void executeHttpRequestByIdx(int idx, String method, ...) // specify server index
        + void executeHttpGet(String method, ...) // load balance
        + void executeHttpRequest(String method, ...) // load balance
        - void executeHttpRequestInner(String url, String method, ...) // inner method
    }</pre>

<pre class="mermaid">graph TD
    executeHttpGetByIdx --> executeHttpRequestByIdx
    executeHttpRequestByIdx --> executeHttpRequestInner
    executeHttpGet --> executeHttpRequest
    executeHttpRequest --> executeHttpRequestInner</pre>

<h1><span id="error-handling">Error handling</span><a href="#error-handling" class="header-anchor">#</a></h1><h2><span id="error-message">Error message</span><a href="#error-message" class="header-anchor">#</a></h2><h3><span id="scene1-http-request-failed">Scene1 http request failed</span><a href="#scene1-http-request-failed" class="header-anchor">#</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$operation request failed, error: $error_details</span><br></pre></td></tr></table></figure>

<h3><span id="scene2-http-response-code-is-not-200-300">Scene2 http response code is not 200~300</span><a href="#scene2-http-response-code-is-not-200-300" class="header-anchor">#</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$operation error resp, code: $code, body: $body</span><br></pre></td></tr></table></figure>

<h3><span id="scene3-other-error">Scene3 other error</span><a href="#scene3-other-error" class="header-anchor">#</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$operation failed, error: $error_details</span><br><span class="line"># example:</span><br><span class="line">writePoint failed, unmarshall response body error: json: cannot unmarshal number ...</span><br></pre></td></tr></table></figure>


<script type="module"> import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.esm.min.mjs';	mermaid.initialize({startOnLoad: true, flowchart: {curve: 'linear'}}); </script>]]></content>
      <tags>
        <tag>SDK</tag>
        <tag>opengemini</tag>
      </tags>
  </entry>
  <entry>
    <title>prometheus tsdb索引布局及查询流程</title>
    <url>/prometheus/prometheus-tsdb-index/</url>
    <content><![CDATA[<h1><span id="prometheus-ci-pan-bu-ju">prometheus 磁盘布局</span><a href="#prometheus-ci-pan-bu-ju" class="header-anchor">#</a></h1><p>采集到的数据每两个小时形成一个block。每个block由一个目录组成，并存放在data路径下。该目录包含一个包含该时间窗口的所有时间序列样本的块子目录、一个元数据文件和一个索引文件（将metric_name和label索引到目录下的时间序列）。 chunks 目录中的样本默认组合成一个或多个段文件，每个段文件最大为 512MB。 当通过 API 删除系列时，删除记录存储在单独的 tombstone 文件中（而不是立即从块段中删除数据）。</p>
<p>当前正在写入的块保存在内存中，没有完全持久化。通过WAL日志来防止崩溃丢失数据。预写日志分为数节(segments)保存在wal文件夹中。这些文件包含尚未压缩的原始数据； 因此它们比常规块文件大得多。 Prometheus 将至少保留三个预写日志文件。在高流量下，会保留三个以上的 WAL 文件，以便保留至少两个小时的原始数据。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./data</span><br><span class="line">├── 01BKGV7JBM69T2G1BGBGM6KB12</span><br><span class="line">│   └── meta.json</span><br><span class="line">├── 01BKGTZQ1SYQJTR4PB43C8PD98</span><br><span class="line">│   ├── chunks</span><br><span class="line">│   │   └── 000001</span><br><span class="line">│   ├── tombstones</span><br><span class="line">│   ├── index</span><br><span class="line">│   └── meta.json</span><br><span class="line">├── 01BKGTZQ1HHWHV8FBJXW1Y3W0K</span><br><span class="line">│   └── meta.json</span><br><span class="line">├── 01BKGV7JC0RY8A6MACW02A2PJD</span><br><span class="line">│   ├── chunks</span><br><span class="line">│   │   └── 000001</span><br><span class="line">│   ├── tombstones</span><br><span class="line">│   ├── index</span><br><span class="line">│   └── meta.json</span><br><span class="line">├── chunks_head</span><br><span class="line">│   └── 000001</span><br><span class="line">└── wal</span><br><span class="line">    ├── 000000002</span><br><span class="line">    └── checkpoint.00000001</span><br><span class="line">        └── 00000000</span><br></pre></td></tr></table></figure>

<h2><span id="prometheus-gai-nian">prometheus概念</span><a href="#prometheus-gai-nian" class="header-anchor">#</a></h2><ul>
<li>Label: 标签，string格式的kv组合</li>
<li>series: 时间序列，label的组合</li>
<li>chunk: 时间，value的数据</li>
</ul>
<h2><span id="prometheus-suo-yin-ge-shi">prometheus索引格式</span><a href="#prometheus-suo-yin-ge-shi" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌────────────────────────────┬─────────────────────┐</span><br><span class="line">│ magic(0xBAAAD700) &lt;4b&gt;     │ version(1) &lt;1 byte&gt; │</span><br><span class="line">├────────────────────────────┴─────────────────────┤</span><br><span class="line">│ ┌──────────────────────────────────────────────┐ │</span><br><span class="line">│ │                 Symbol Table                 │ │</span><br><span class="line">│ ├──────────────────────────────────────────────┤ │</span><br><span class="line">│ │                    Series                    │ │</span><br><span class="line">│ ├──────────────────────────────────────────────┤ │</span><br><span class="line">│ │                   Postings 1                 │ │</span><br><span class="line">│ ├──────────────────────────────────────────────┤ │</span><br><span class="line">│ │                      ...                     │ │</span><br><span class="line">│ ├──────────────────────────────────────────────┤ │</span><br><span class="line">│ │                   Postings N                 │ │</span><br><span class="line">│ ├──────────────────────────────────────────────┤ │</span><br><span class="line">│ │             Postings Offset Table            │ │</span><br><span class="line">│ ├──────────────────────────────────────────────┤ │</span><br><span class="line">│ │                      TOC                     │ │</span><br><span class="line">│ └──────────────────────────────────────────────┘ │</span><br><span class="line">└──────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure>

<p>写入索引时，可以在上面列出的主要部分之间添加任意数量的0字节作为填充。顺序扫描文件时，必须跳过部分间的任意0字节。</p>
<p>下面描述的大部分部分都以 len 字段开头。 它总是指定就在尾随 CRC32 校验和之前的字节数。 校验和就计算这些字节的校验和（不包含len字段）</p>
<h3><span id="fu-hao-biao">符号表</span><a href="#fu-hao-biao" class="header-anchor">#</a></h3><p>符号表包含已存储序列的标签对中出现的重复数据删除字符串的排序列表。 它们可以从后续部分中引用，并显着减少总索引大小。</p>
<p>该部分包含一系列字符串entry，每个entry都以字符串的原始字节长度为前缀。 所有字符串均采用 utf-8 编码。 字符串由顺序索引引用。 字符串按字典顺序升序排序。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌────────────────────┬─────────────────────┐</span><br><span class="line">│ len &lt;4b&gt;           │ #symbols &lt;4b&gt;       │</span><br><span class="line">├────────────────────┴─────────────────────┤</span><br><span class="line">│ ┌──────────────────────┬───────────────┐ │</span><br><span class="line">│ │ len(str_1) &lt;uvarint&gt; │ str_1 &lt;bytes&gt; │ │</span><br><span class="line">│ ├──────────────────────┴───────────────┤ │</span><br><span class="line">│ │                . . .                 │ │</span><br><span class="line">│ ├──────────────────────┬───────────────┤ │</span><br><span class="line">│ │ len(str_n) &lt;uvarint&gt; │ str_n &lt;bytes&gt; │ │</span><br><span class="line">│ └──────────────────────┴───────────────┘ │</span><br><span class="line">├──────────────────────────────────────────┤</span><br><span class="line">│ CRC32 &lt;4b&gt;                               │</span><br><span class="line">└──────────────────────────────────────────┘</span><br></pre></td></tr></table></figure>
<h3><span id="xu-lie-series">序列 series</span><a href="#xu-lie-series" class="header-anchor">#</a></h3><p>保存一个具体的时间序列，其中包含系列的label集合和block中的chunks。</p>
<p>每个series都是16字节对齐。series的id为偏移量除以16。series ID 的排序列表也就是series label的字典排序列表。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌───────────────────────────────────────┐</span><br><span class="line">│ ┌───────────────────────────────────┐ │</span><br><span class="line">│ │   series_1                        │ │</span><br><span class="line">│ ├───────────────────────────────────┤ │</span><br><span class="line">│ │                 . . .             │ │</span><br><span class="line">│ ├───────────────────────────────────┤ │</span><br><span class="line">│ │   series_n                        │ │</span><br><span class="line">│ └───────────────────────────────────┘ │</span><br><span class="line">└───────────────────────────────────────┘</span><br></pre></td></tr></table></figure>

<p>每一个series先保存label的数量，然后是包含label键值对的引用。 标签对按字典顺序排序。然后是series涉及的索引块的个数，然后是一系列元数据条目，其中包含块的最小 (mint) 和最大 (maxt) 时间戳以及对其在块文件中位置的引用。<code>mint</code> 是第一个样本的时间，<code>maxt</code> 是块中最后一个样本的时间。 在索引中保存时间范围数据, 允许按照时间范围删除数据时，如果时间范围匹配，不需要直接访问时间数据。</p>
<p>空间大小优化: 第一个块的 <code>mint</code> 被存储，它的 <code>maxt</code> 被存储为一个增量，并且 <code>mint</code> 和 <code>maxt</code> 被编码为后续块的前一个时间的增量。 类似的，第一个chunk的引用被存储，下一个引用被存储为前一个chunk的增量。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──────────────────────────────────────────────────────────────────────────┐</span><br><span class="line">│ len &lt;uvarint&gt;                                                            │</span><br><span class="line">├──────────────────────────────────────────────────────────────────────────┤</span><br><span class="line">│ ┌──────────────────────────────────────────────────────────────────────┐ │</span><br><span class="line">│ │                     labels count &lt;uvarint64&gt;                         │ │</span><br><span class="line">│ ├──────────────────────────────────────────────────────────────────────┤ │</span><br><span class="line">│ │              ┌────────────────────────────────────────────┐          │ │</span><br><span class="line">│ │              │ ref(l_i.name) &lt;uvarint32&gt;                  │          │ │</span><br><span class="line">│ │              ├────────────────────────────────────────────┤          │ │</span><br><span class="line">│ │              │ ref(l_i.value) &lt;uvarint32&gt;                 │          │ │</span><br><span class="line">│ │              └────────────────────────────────────────────┘          │ │</span><br><span class="line">│ │                             ...                                      │ │</span><br><span class="line">│ ├──────────────────────────────────────────────────────────────────────┤ │</span><br><span class="line">│ │                     chunks count &lt;uvarint64&gt;                         │ │</span><br><span class="line">│ ├──────────────────────────────────────────────────────────────────────┤ │</span><br><span class="line">│ │              ┌────────────────────────────────────────────┐          │ │</span><br><span class="line">│ │              │ c_0.mint &lt;varint64&gt;                        │          │ │</span><br><span class="line">│ │              ├────────────────────────────────────────────┤          │ │</span><br><span class="line">│ │              │ c_0.maxt - c_0.mint &lt;uvarint64&gt;            │          │ │</span><br><span class="line">│ │              ├────────────────────────────────────────────┤          │ │</span><br><span class="line">│ │              │ ref(c_0.data) &lt;uvarint64&gt;                  │          │ │</span><br><span class="line">│ │              └────────────────────────────────────────────┘          │ │</span><br><span class="line">│ │              ┌────────────────────────────────────────────┐          │ │</span><br><span class="line">│ │              │ c_i.mint - c_i-1.maxt &lt;uvarint64&gt;          │          │ │</span><br><span class="line">│ │              ├────────────────────────────────────────────┤          │ │</span><br><span class="line">│ │              │ c_i.maxt - c_i.mint &lt;uvarint64&gt;            │          │ │</span><br><span class="line">│ │              ├────────────────────────────────────────────┤          │ │</span><br><span class="line">│ │              │ ref(c_i.data) - ref(c_i-1.data) &lt;varint64&gt; │          │ │</span><br><span class="line">│ │              └────────────────────────────────────────────┘          │ │</span><br><span class="line">│ │                             ...                                      │ │</span><br><span class="line">│ └──────────────────────────────────────────────────────────────────────┘ │</span><br><span class="line">├──────────────────────────────────────────────────────────────────────────┤</span><br><span class="line">│ CRC32 &lt;4b&gt;                                                               │</span><br><span class="line">└──────────────────────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure>

<h3><span id="posting">Posting</span><a href="#posting" class="header-anchor">#</a></h3><p>Posting这一节存放着关于series引用的单调递增列表，简单来说就是存放id和时间序列的对应关系</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌────────────────────┬────────────────────┐</span><br><span class="line">│ len &lt;4b&gt;           │ #entries &lt;4b&gt;      │</span><br><span class="line">├────────────────────┴────────────────────┤</span><br><span class="line">│ ┌─────────────────────────────────────┐ │</span><br><span class="line">│ │ ref(series_1) &lt;4b&gt;                  │ │</span><br><span class="line">│ ├─────────────────────────────────────┤ │</span><br><span class="line">│ │ ...                                 │ │</span><br><span class="line">│ ├─────────────────────────────────────┤ │</span><br><span class="line">│ │ ref(series_n) &lt;4b&gt;                  │ │</span><br><span class="line">│ └─────────────────────────────────────┘ │</span><br><span class="line">├─────────────────────────────────────────┤</span><br><span class="line">│ CRC32 &lt;4b&gt;                              │</span><br><span class="line">└─────────────────────────────────────────┘</span><br></pre></td></tr></table></figure>

<p>Posting sections的顺序由<code>postings offset table</code>决定。</p>
<h3><span id="posting-offset-table">Posting Offset Table</span><a href="#posting-offset-table" class="header-anchor">#</a></h3><p><code>postings offset table</code>包含着一系列<code>posting offset entry</code>，根据label的名称和值排序。每一个<code>posting offset entry</code>存放着label的键值对以及在<code>posting sections</code>中其series列表的偏移量。用来跟踪<code>posting sections</code>。当index文件加载时，它们将部分加载到内存中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌─────────────────────┬──────────────────────┐</span><br><span class="line">│ len &lt;4b&gt;            │ #entries &lt;4b&gt;        │</span><br><span class="line">├─────────────────────┴──────────────────────┤</span><br><span class="line">│ ┌────────────────────────────────────────┐ │</span><br><span class="line">│ │  n = 2 &lt;1b&gt;                            │ │</span><br><span class="line">│ ├──────────────────────┬─────────────────┤ │</span><br><span class="line">│ │ len(name) &lt;uvarint&gt;  │ name &lt;bytes&gt;    │ │</span><br><span class="line">│ ├──────────────────────┼─────────────────┤ │</span><br><span class="line">│ │ len(value) &lt;uvarint&gt; │ value &lt;bytes&gt;   │ │</span><br><span class="line">│ ├──────────────────────┴─────────────────┤ │</span><br><span class="line">│ │  offset &lt;uvarint64&gt;                    │ │</span><br><span class="line">│ └────────────────────────────────────────┘ │</span><br><span class="line">│                    . . .                   │</span><br><span class="line">├────────────────────────────────────────────┤</span><br><span class="line">│  CRC32 &lt;4b&gt;                                │</span><br><span class="line">└────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure>

<h3><span id="toc">TOC</span><a href="#toc" class="header-anchor">#</a></h3><p><code>table of contents</code>是整个索引的入口点，并指向文件中的各个部分。 如果引用为零，则表示相应的部分不存在，查找时应返回空结果。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌─────────────────────────────────────────┐</span><br><span class="line">│ ref(symbols) &lt;8b&gt;                       │</span><br><span class="line">├─────────────────────────────────────────┤</span><br><span class="line">│ ref(series) &lt;8b&gt;                        │</span><br><span class="line">├─────────────────────────────────────────┤</span><br><span class="line">│ ref(label indices start) &lt;8b&gt;           │</span><br><span class="line">├─────────────────────────────────────────┤</span><br><span class="line">│ ref(label offset table) &lt;8b&gt;            │</span><br><span class="line">├─────────────────────────────────────────┤</span><br><span class="line">│ ref(postings start) &lt;8b&gt;                │</span><br><span class="line">├─────────────────────────────────────────┤</span><br><span class="line">│ ref(postings offset table) &lt;8b&gt;         │</span><br><span class="line">├─────────────────────────────────────────┤</span><br><span class="line">│ CRC32 &lt;4b&gt;                              │</span><br><span class="line">└─────────────────────────────────────────┘</span><br></pre></td></tr></table></figure>

<h2><span id="chunks-ci-pan-ge-shi">chunks 磁盘格式</span><a href="#chunks-ci-pan-ge-shi" class="header-anchor">#</a></h2><p>chunks文件创建在<strong>block</strong>中的<code>chunks/</code>目录中。 每个段文件的最大大小为 512MB。<br>文件中的chunk由uint64的索引组织，索引低四位为文件内偏移，高四位为段序列号。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──────────────────────────────┐</span><br><span class="line">│  magic(0x85BD40DD) &lt;4 byte&gt;  │</span><br><span class="line">├──────────────────────────────┤</span><br><span class="line">│    version(1) &lt;1 byte&gt;       │</span><br><span class="line">├──────────────────────────────┤</span><br><span class="line">│    padding(0) &lt;3 byte&gt;       │</span><br><span class="line">├──────────────────────────────┤</span><br><span class="line">│ ┌──────────────────────────┐ │</span><br><span class="line">│ │         Chunk 1          │ │</span><br><span class="line">│ ├──────────────────────────┤ │</span><br><span class="line">│ │          ...             │ │</span><br><span class="line">│ ├──────────────────────────┤ │</span><br><span class="line">│ │         Chunk N          │ │</span><br><span class="line">│ └──────────────────────────┘ │</span><br><span class="line">└──────────────────────────────┘</span><br></pre></td></tr></table></figure>

<h2><span id="chunks-zhong-de-chunk-ge-shi">chunks中的Chunk格式</span><a href="#chunks-zhong-de-chunk-ge-shi" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌───────────────┬───────────────────┬──────────────┬────────────────┐</span><br><span class="line">│ len &lt;uvarint&gt; │ encoding &lt;1 byte&gt; │ data &lt;bytes&gt; │ CRC32 &lt;4 byte&gt; │</span><br><span class="line">└───────────────┴───────────────────┴──────────────┴────────────────┘</span><br></pre></td></tr></table></figure>

<h1><span id="cha-xun-shu-ju">查询数据</span><a href="#cha-xun-shu-ju" class="header-anchor">#</a></h1><h2><span id="code">code</span><a href="#code" class="header-anchor">#</a></h2><p>查询的prometheus方法签名</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">Select(sortSeries <span class="type">bool</span>, hints *SelectHints, matchers ...*labels.Matcher) SeriesSet</span><br></pre></td></tr></table></figure>

<p>支持从block中，remote等各种地方查询获取数据</p>
<p>prometheus会在内存中维护一个数据结构</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Map of LabelName to a list of some LabelValues&#x27;s position in the offset table.</span></span><br><span class="line"><span class="comment">// The first and last values for each name are always present.</span></span><br><span class="line">postings <span class="keyword">map</span>[<span class="type">string</span>][]postingOffset</span><br></pre></td></tr></table></figure>

<p>在内存中，保留每个label name，并且每n个保存label值，降低内存的占用。但是第一个和最后一个值总是保存在内存中。</p>
<h2><span id="cha-xun-shu-ju-liu-cheng">查询数据流程</span><a href="#cha-xun-shu-ju-liu-cheng" class="header-anchor">#</a></h2><p><img src="/prometheus/prometheus-tsdb-index/prometheus-tsdb-index.png" alt="prometheus-tsdb-index"></p>
<h1><span id="can-kao-zi-liao">参考资料</span><a href="#can-kao-zi-liao" class="header-anchor">#</a></h1><ul>
<li><a href="https://prometheus.io/docs/prometheus/latest/storage/">https://prometheus.io/docs/prometheus/latest/storage/</a></li>
<li><a href="https://github.com/prometheus/prometheus/blob/release-2.37/tsdb/docs/format/README.md">https://github.com/prometheus/prometheus/blob/release-2.37/tsdb/docs/format/README.md</a></li>
<li><a href="https://github.com/prometheus/prometheus/blob/release-2.37/tsdb/docs/format/index.md">https://github.com/prometheus/prometheus/blob/release-2.37/tsdb/docs/format/index.md</a></li>
</ul>
]]></content>
      <tags>
        <tag>prometheus</tag>
      </tags>
  </entry>
  <entry>
    <title>Pulsar消息积压topic级别策略老化的两种方案</title>
    <url>/pulsar/pulsar-msg-topic-level-policy-aging/</url>
    <content><![CDATA[<p><code>Pulsar</code>像大多数消息中间件一样,支持按时间和大小对消息积压进行老化。但是默认的策略只能在namespace级别配置。本文将介绍如何在topic级别实现老化策略的两种方案。</p>
<h2><span id="fang-an-yi-kai-qi-topiclevelpolicy-lai-shi-xian">方案一：开启 TopicLevelPolicy 来实现</span><a href="#fang-an-yi-kai-qi-topiclevelpolicy-lai-shi-xian" class="header-anchor">#</a></h2><p>默认的策略配置通过在<code>Zookeeper</code>上配置对应的策略，可以通过<code>./pulsar zookeeper-shell</code>命令来登录zookeeper集群查询。但是如果将这一实现方式扩展到topic级别，将会产生大量的（百万、千万级别）的ZooKeeper节点，这对于<code>ZooKeeper</code>集群来说几乎是不可接受的。因此，Pulsar提供了一种新的实现方式，即通过<code>Topic</code>来存储策略配置，而不是通过<code>ZooKeeper</code>来存储。</p>
<p><code>Pulsar</code>，从2.7.0版本开始，引入了<code>SystemTopic</code>，用于存储<code>Topic</code>的元数据信息，包括<code>Topic</code>的策略配置。主题级策略使用户可以更灵活地管理主题,并不会给 ZooKeeper 带来额外负担。</p>
<p>您可以通过如下配置来开启<code>TopicLevelPolicy</code>：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemTopicEnabled=true</span><br><span class="line">topicLevelPoliciesEnabled=true</span><br></pre></td></tr></table></figure>

<p>然后通过<code>set-backlog-quota</code>命令来设置您想要的老化时间和老化大小</p>
<p>PS: 完整的一些功能，如命令行<code>set-backlog-quota</code>，在3.0.0版本中支持</p>
<h2><span id="fang-an-er-tong-guo-zi-ding-yi-dai-ma-lai-shi-xian">方案二：通过自定义代码来实现</span><a href="#fang-an-er-tong-guo-zi-ding-yi-dai-ma-lai-shi-xian" class="header-anchor">#</a></h2><p><code>Pulsar</code>的<code>TopicLevelPolicy</code>实现需要通过topic存储策略配置，而不是通过<code>ZooKeeper</code>来存储。在实际的极端场景下，<code>Topic</code>中存储的内容可能会丢失（因为未开启<code>Bookkeeper</code>立即落盘或磁盘文件损坏等原因），这将导致策略配置丢失，从而导致策略失效。因此，我们可以通过自定义代码来实现topic级别的策略配置，这样可以避免策略配置丢失的问题。</p>
<p>举个例子，业务可以将策略存放在<code>Mysql</code>中，然后通过<code>Pulsar</code>的<code>Admin API</code>来让策略生效</p>
<h3><span id="zi-ding-yi-dai-ma-shi-xian-backlog-shi-jian-ce-lue">自定义代码实现Backlog时间策略</span><a href="#zi-ding-yi-dai-ma-shi-xian-backlog-shi-jian-ce-lue" class="header-anchor">#</a></h3><pre class="mermaid">sequenceDiagram
    participant C as Client
    participant B as Broker
    loop
        C ->> B: expire-messages-all-subscriptions Request
        B -->> C: expire-messages-all-subscriptions Response
    end</pre>

<h3><span id="zi-ding-yi-dai-ma-shi-xian-backlog-da-xiao-ce-lue">自定义代码实现Backlog大小策略</span><a href="#zi-ding-yi-dai-ma-shi-xian-backlog-da-xiao-ce-lue" class="header-anchor">#</a></h3><pre class="mermaid">sequenceDiagram
    participant C as Client
    participant B as Broker
    loop
        C ->> B: stats-internal Request
        B -->> C: stats-internal Response
        alt messageBacklogSize < maxMessageBacklogSize
        else messageBacklogSize >= maxMessageBacklogSize
            Note over B,C: estimate the backlog position
            C ->> B: get-message-by-id Request
            B -->> C: get-message-by-id
            Note over B,C: get the timestamp of the message
            C ->> B: expire-messages-all-subscriptions Request
            B -->> C: expire-messages-all-subscriptions Response
        end
    end</pre>


<script type="module"> import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.esm.min.mjs';	mermaid.initialize({startOnLoad: true, flowchart: {curve: 'linear'}}); </script>]]></content>
      <tags>
        <tag>Pulsar</tag>
      </tags>
  </entry>
  <entry>
    <title>如果不是公有云的供应商，能提供什么样的Pulsar服务体验</title>
    <url>/pulsar/pulsar-third-vendor/</url>
    <content><![CDATA[<h1><span id="xu-yao-liao-jie-de-gai-nian">需要了解的概念</span><a href="#xu-yao-liao-jie-de-gai-nian" class="header-anchor">#</a></h1><ul>
<li>VPC：用户的私有网段</li>
<li>peering：多个VPC之间打通的方式，可跨用户</li>
</ul>
<h1><span id="qian-yan">前言</span><a href="#qian-yan" class="header-anchor">#</a></h1><p>今天微信推送Pulsar社区有个Hackathon比赛, 开始想的idea就是，实现<code>pulsar</code>在华为云上提供服务。因为是社区的比赛，是以一个三方系统的方式在华为云上提供服务，而非是以华为云的名义提供服务。分析了下可行性和能达到的效果，对比了<code>StreamNative</code>的官网上提供的<code>pulsar</code>服务在阿里云托管的能力，能提供的能力差不多，最多只不过是实现了在华为云托管的能力，没有从0到1的突破。</p>
<p>现在，在公有云上买<code>redis</code>和<code>kafka</code>这类组件已经变得非常普遍，由公有云供应商提供的中间件往往能给你带来良好的体验，相比三方厂家在云上进行托管，我个人认为云厂商的优势主要在以下三点</p>
<h2><span id="wang-luo-da-tong-rong-yi">网络打通容易</span><a href="#wang-luo-da-tong-rong-yi" class="header-anchor">#</a></h2><p>下文说一下不是公有云的供应商能以什么样的方式暴露自己的服务。云厂商可以把中间件的ip地址申请在你的vpc内，对任何应用程序来说，连接都是最方便的。无论是容器化部署、虚拟机部署、和其他vpc peering打通的场景，都可以通信。</p>
<h2><span id="di-lian-de-cheng-ben">低廉的成本</span><a href="#di-lian-de-cheng-ben" class="header-anchor">#</a></h2><p>不考虑人力成本，云厂商自运营的价格要低于三方厂家。</p>
<h2><span id="jian-kong-xi-tong-dui-jie">监控系统对接</span><a href="#jian-kong-xi-tong-dui-jie" class="header-anchor">#</a></h2><p>方便地和云厂商的告警、统计系统对接，接收告警通知和报表等。</p>
<p>其中<strong>网络打通</strong>和<strong>成本</strong>尤为重要，三方厂家好好做监控统计系统，也能给用户较为良好的体验。</p>
<h1><span id="san-fang-han-jia-neng-ti-gong-shi-me-yang-de-pulsar-jie-ru">三方厂家能提供什么样的Pulsar接入</span><a href="#san-fang-han-jia-neng-ti-gong-shi-me-yang-de-pulsar-jie-ru" class="header-anchor">#</a></h1><h2><span id="tong-yi-jie-ru">统一接入</span><a href="#tong-yi-jie-ru" class="header-anchor">#</a></h2><p>三方厂家自己作为公有云上一个用户，无论这个Region上有多少个租户，都用这一个用户提供服务，这也就意味着无法与每个用户进行私网通信。如果在华为云，利用华为云推出的<strong>VPCEP</strong>服务（此处应有链接），倒是可以给每个用户提供私网通信，不过这个是做了DNAT地址转换的，跟做了DNAT转换的中间件连接，是非常麻烦的。（懂的自然懂。如果有人想详细了解，可以留言，我可以写一个文章介绍里面的坑）</p>
<p>如果使用公网，又想避免扩容的时候动态申请EIP，动态申请EIP并不复杂，问题是EIP是有配额限制的，这才是关键。那么就需要一个统一的接入点，就需要部署pulsar proxy。到这一步，是每个用户申请一个EIP的，如果还想继续节省EIP，那么可以统一域名接入，后端通过SNI的方式转发，个别流量大的客户，单独把域名指向单独的集群。</p>
<p><img src="/pulsar/pulsar-third-vendor/pulsar-third-vendor1.png" alt="pulsar-third-vendor1"></p>
<h2><span id="peering-da-tong">Peering打通</span><a href="#peering-da-tong" class="header-anchor">#</a></h2><p>Peering打通可以给用户不错的私网体验，需要用户预留一个网段，网段不需要太大，能容纳pulsar所在的vm就行。采用peering打通一般绝不会选择容器化部署，想要两个容器化的集群互通，对网设的要求很高，暂且忽略Service的存在，这要求用户的vpc网段和pod网段和三方厂商的vpc网段和pod网段都不重叠！而且peering打通，给用户私有，再搭建一个k8s集群，对成本影响比较大。主要有如下两个问题</p>
<h3><span id="zi-dong-hua">自动化</span><a href="#zi-dong-hua" class="header-anchor">#</a></h3><p>和客户peering打通，需要较大的权限，如何自动化，最大程度的减少需要的权限。</p>
<h3><span id="ke-hu-wang-duan-he-qi-ta-wang-duan-you-zuo-liao-peering">客户网段和其他网段又做了peering</span><a href="#ke-hu-wang-duan-he-qi-ta-wang-duan-you-zuo-liao-peering" class="header-anchor">#</a></h3><p><img src="/pulsar/pulsar-third-vendor/pulsar-third-vendor2.png" alt="pulsar-third-vendor2"></p>
<p>这个问题其实还好，就是路由规则配置麻烦</p>
<h1><span id="zong-jie">总结</span><a href="#zong-jie" class="header-anchor">#</a></h1><p>Peering打通对用户来说已经比较方便了，相信做到自动化也没有太大的技术难度，只是时间和人力投入的问题。统一接入因为网络打通的原因，不好使用<code>kop</code>、<code>mop</code>这些高级特性，此外还有不小的公网带宽成本，羊毛出在羊身上，比较大量的用户也会倾向于Peering打通的模式吧。</p>
]]></content>
      <tags>
        <tag>pulsar</tag>
      </tags>
  </entry>
  <entry>
    <title>大型系统中的证书管理</title>
    <url>/security/cert-manager/</url>
    <content><![CDATA[<h1><span id="da-xing-xi-tong-zhong-de-zheng-shu-guan-li">大型系统中的证书管理</span><a href="#da-xing-xi-tong-zhong-de-zheng-shu-guan-li" class="header-anchor">#</a></h1><p>随着安全的要求，现在我们在越来越多的通信中使用TLS加密。下图是一个微服务架构下数据流向的例子</p>
<p><img src="/security/cert-manager/cert-manager1.png" alt="cert-manager1"></p>
<ul>
<li>蓝色部分，即和三方交互时需要TLS加密认证</li>
<li>红色部分，各个微服务、消息中间件等通信需要TLS加密认证</li>
<li>绿色部分，各个微服务和存储层通信也需要TLS加密认证</li>
</ul>
<p>安全上对我们的要求逐步变化为，仅蓝色使用TLS&#x3D;》蓝色和红色使用TLS&#x3D;》全部使用TLS加密</p>
<h2><span id="zheng-shu-guan-li-de-bi-yao-xing">证书管理的必要性</span><a href="#zheng-shu-guan-li-de-bi-yao-xing" class="header-anchor">#</a></h2><p>从安全的角度上来说，我们最好能支持证书的更换和热加载。如果您的业务当前使用加密的场景不多，可能暂时看不到证书管理的意义。但是当你在各个方面使用TLS更加频繁之后，会发现证书管理可带来如下好处：</p>
<ul>
<li>可以通过抽象出场景，通过场景和证书的关联联系，在各个地方通信使用的证书，可以统一更换。</li>
<li>统一提供证书过期告警等功能</li>
<li>统一提供证书的变更通知，通知到各个实例</li>
</ul>
<p>以我在工作中接触到的两个基础PAAS平台，都有证书管理的功能，可见证书管理的必要性。</p>
<p>PS: 开源组件大多都拥有证书配置能力，没有可对接证书管理的能力，但这个能力很难贡献给社区，需要自己开发。</p>
<h2><span id="zheng-shu-guan-li-gai-nian">证书管理概念</span><a href="#zheng-shu-guan-li-gai-nian" class="header-anchor">#</a></h2><p>在TLS会话中，从依赖的证书文件角度来看，可以分为加密流程和验证流程。</p>
<h3><span id="jia-mi-zheng-shu">加密证书</span><a href="#jia-mi-zheng-shu" class="header-anchor">#</a></h3><p>TLS加密流程的证书，包含证书链文件和密钥</p>
<h3><span id="yan-zheng-zheng-shu">验证证书</span><a href="#yan-zheng-zheng-shu" class="header-anchor">#</a></h3><p>TLS验证流程的证书，仅包含证书链文件</p>
<h3><span id="chai-fen-wei-jia-mi-liu-cheng-he-yan-zheng-liu-cheng-de-he-li-xing">拆分为加密流程和验证流程的合理性</span><a href="#chai-fen-wei-jia-mi-liu-cheng-he-yan-zheng-liu-cheng-de-he-li-xing" class="header-anchor">#</a></h3><p>这使得加密流程证书和验证流程证书可以互相独立的替换，更方便在大型场景下复用证书。</p>
<p>让我们来假设如下的场景：</p>
<p><img src="/security/cert-manager/cert-manager2.png" alt="cert-manager2"></p>
<p>客户A、客户B、客户C、客户D的验证流程证书自然不相同，但服务跟客户交互的时候，使用的加密流程证书确实同一份。如果将两个阶段的证书合一，那么在更换证书的时候，就需要更新4份数据，当你有1000名用户的时候，这个数字将会是1000，这对于存储和应用程序来说都是不小的冲击。</p>
<h3><span id="scene">Scene</span><a href="#scene" class="header-anchor">#</a></h3><p>Scene是在一个会话中，代表会话和请求证书、验证证书的绑定关系。Scene和请求证书、验证证书都是1：1的关系。这使得我们不仅仅可以修改证书文件，也可以对TLS会话中使用的证书进行修改。在证书无法复用，且证书绑定了多个场景的时候，针对单个场景修改其绑定的证书。</p>
<p>以上图作为例子，假设客户D有特殊的要求，要求加密流程使用特定的证书或密钥，我们就可以将客户D的场景绑定到客户D独有的加密证书</p>
<h3><span id="duo-ji-qun-guan-li">多集群管理</span><a href="#duo-ji-qun-guan-li" class="header-anchor">#</a></h3><p>如果证书管理需要管理多个集群，那么证书和Scene前面可以加上层级来隔离，如环境、集群等。</p>
<h3><span id="dui-xiao-xing-xi-tong-de-jian-yi">对小型系统的建议</span><a href="#dui-xiao-xing-xi-tong-de-jian-yi" class="header-anchor">#</a></h3><p>如果规模不大，且TLS场景有限，需要考虑一下有无拆分加密证书和验证证书的必要，可以合一，应用程序直接以合一的证书id来关联，而非场景id。虽不方便复用，但大大降低了复杂性。</p>
<h2><span id="zheng-shu-guan-li-de-gong-neng">证书管理的功能</span><a href="#zheng-shu-guan-li-de-gong-neng" class="header-anchor">#</a></h2><p><img src="/security/cert-manager/cert-manager3.png" alt="cert-manager3"></p>
<h2><span id="zheng-shu-guan-li-chang-jing">证书管理场景</span><a href="#zheng-shu-guan-li-chang-jing" class="header-anchor">#</a></h2><h3><span id="she-ding-yi-ge-tls-hui-hua">设定一个TLS会话</span><a href="#she-ding-yi-ge-tls-hui-hua" class="header-anchor">#</a></h3><p><img src="/security/cert-manager/cert-manager4.png" alt="cert-manager4"></p>
<h3><span id="shi-yong-tls-hui-hua">使用TLS会话</span><a href="#shi-yong-tls-hui-hua" class="header-anchor">#</a></h3><p>这要求应用程序持久化场景信息</p>
<p><img src="/security/cert-manager/cert-manager5.png" alt="cert-manager5"></p>
<h2><span id="zu-zhi-jia-gou-xiang-guan">组织架构相关</span><a href="#zu-zhi-jia-gou-xiang-guan" class="header-anchor">#</a></h2><p>大型系统下，证书管理是一个必须的组件，且一定是由团队最底层的组织架构承接。如若不然，那么由底层组织架构维护的组件，因为依赖关系，无法基于证书管理来统一实现证书的更换和过期告警。除非不基于证书管理自己构筑一套能力。</p>
<h2><span id="tldr">TLDR</span><a href="#tldr" class="header-anchor">#</a></h2><p>随着组件和使用加密场景的不断扩大，证书管理是一个必须的组件，通过抽象出场景的概念来复用证书，通过变更通知在微服务模式下快速更换所有微服务实例上的证书，并提供统一的证书过期告警功能来提醒管理员更换证书。</p>
]]></content>
      <tags>
        <tag>cert</tag>
      </tags>
  </entry>
  <entry>
    <title>WireShark 捕获过滤器</title>
    <url>/wireshark/wireshark-capture-filter/</url>
    <content><![CDATA[<h1><span id="ru-he-shi-yong-bu-huo-guo-lu-qi">如何使用捕获过滤器</span><a href="#ru-he-shi-yong-bu-huo-guo-lu-qi" class="header-anchor">#</a></h1><p>点击捕获，选项，然后在所选择的捕获过滤器上输入对应的捕获表达式</p>
<p><img src="/wireshark/wireshark-capture-filter/wireshark-capture-filter1.png" alt="wireshark-capture-filter1"></p>
<p><img src="/wireshark/wireshark-capture-filter/wireshark-capture-filter2.png" alt="wireshark-capture-filter2"></p>
<h1><span id="zhua-bao-guo-lu-qi">抓包过滤器</span><a href="#zhua-bao-guo-lu-qi" class="header-anchor">#</a></h1><ul>
<li>type(类型) 限定符: 比如host，net，port限定符等</li>
<li>dir(方向) 限定符: src dst</li>
<li>Proto(协议类型)限定符: ether ip arp</li>
</ul>
<h2><span id="er-ceng-guo-lu-qi-ju-li">二层过滤器举例</span><a href="#er-ceng-guo-lu-qi-ju-li" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tcp dst port 135 //tcp协议，目标端口为135的数据包</span><br><span class="line">ether host &lt;Ethernet host&gt; //让wireshark只抓取这个地址相关的以太网帧</span><br><span class="line">ether dst &lt;Ethernet host&gt;</span><br><span class="line">ether src &lt;Ethernet src&gt;</span><br><span class="line">ether broadcast //Wireshark只抓取所有以太网广播流量</span><br><span class="line">ether multicast //只抓取多播流量</span><br><span class="line">ether proto &lt;protocol&gt;</span><br><span class="line">vlan &lt;vlan_id&gt;</span><br></pre></td></tr></table></figure>

<h2><span id="san-ceng-guo-lu-qi-ju-li">三层过滤器举例</span><a href="#san-ceng-guo-lu-qi-ju-li" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip #只抓取ipv4流量</span><br><span class="line">ipv6</span><br><span class="line">host 10.0.0.2</span><br><span class="line">dest host &lt;host&gt;</span><br><span class="line">src host &lt;host&gt;</span><br><span class="line">broadcast #ip广播包</span><br><span class="line">multicast #ip多播包</span><br><span class="line">ip proto &lt;protocol code&gt; #ip数据包有多种类型，比如TCP(6), UDP(17) ICMP(1)</span><br></pre></td></tr></table></figure>

<h3><span id="zhi-zhua-qu-yuan-yu-huo-zhe-fa-wang-ipv6-2001-x2f-16-de-shu-ju-bao">只抓取源于或者发往IPv6 2001::&#x2F;16的数据包</span><a href="#zhi-zhua-qu-yuan-yu-huo-zhe-fa-wang-ipv6-2001-x2f-16-de-shu-ju-bao" class="header-anchor">#</a></h3><p>net 2001::&#x2F;16</p>
<h3><span id="zhi-zhua-qu-icmp-liu-liang">只抓取ICMP流量</span><a href="#zhi-zhua-qu-icmp-liu-liang" class="header-anchor">#</a></h3><p>ip proto 1</p>
<h3><span id="zhi-zhua-qu-icmp-echo-request-liu-liang">只抓取ICMP echo request流量</span><a href="#zhi-zhua-qu-icmp-echo-request-liu-liang" class="header-anchor">#</a></h3><p>icmp[icmptype]&#x3D;&#x3D;icmp-echo<br>icmp[icmptype]&#x3D;&#x3D;8</p>
<h3><span id="zhi-zhua-qu-te-ding-chang-du-de-ip-shu-ju-bao">只抓取特定长度的IP数据包</span><a href="#zhi-zhua-qu-te-ding-chang-du-de-ip-shu-ju-bao" class="header-anchor">#</a></h3><p>ip[2:2] &#x3D;&#x3D; <number></number></p>
<h3><span id="zhi-zhua-qu-ju-you-te-ding-ttl-de-ip-shu-ju-bao">只抓取具有特定TTL的IP数据包</span><a href="#zhi-zhua-qu-ju-you-te-ding-ttl-de-ip-shu-ju-bao" class="header-anchor">#</a></h3><p>ip[8] &#x3D;&#x3D; <number></number></p>
<h3><span id="zhua-qu-shu-ju-bao-de-yuan-he-mu-de-ip-di-zhi-xiang-tong">抓取数据包的源和目的IP地址相同</span><a href="#zhua-qu-shu-ju-bao-de-yuan-he-mu-de-ip-di-zhi-xiang-tong" class="header-anchor">#</a></h3><p>ip[12:4] &#x3D;&#x3D;1 ip[16:4]</p>
<h2><span id="si-ceng-zhua-bao-guo-lu-qi-ju-li">四层抓包过滤器举例</span><a href="#si-ceng-zhua-bao-guo-lu-qi-ju-li" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">port &lt;port&gt;</span><br><span class="line">dst port &lt;port&gt;</span><br><span class="line">src port &lt;port&gt;</span><br><span class="line">tcp portrange &lt;p1&gt;-&lt;p2&gt;</span><br></pre></td></tr></table></figure>

<h3><span id="zhi-zhua-qu-tcp-zhong-syn-huo-zhe-fin-de-shu-ju-bao">只抓取TCP中SYN或者FIN的数据包</span><a href="#zhi-zhua-qu-tcp-zhong-syn-huo-zhe-fin-de-shu-ju-bao" class="header-anchor">#</a></h3><p>tcp [tcpflags] &amp; (tcp-syn | tcp-fin) !&#x3D; 0</p>
<h3><span id="zhi-zhua-suo-you-rst-biao-ji-wei-zhi-wei-1-de-tcp-shu-ju-bao">只抓所有RST标记位置为1的TCP数据包</span><a href="#zhi-zhua-suo-you-rst-biao-ji-wei-zhi-wei-1-de-tcp-shu-ju-bao" class="header-anchor">#</a></h3><p>tcp[tcpflags] &amp; (tcp-rst) !&#x3D; 0</p>
<h3><span id="tcp-tou-bu-de-chang-yong-biao-ji-wei">tcp头部的常用标记位</span><a href="#tcp-tou-bu-de-chang-yong-biao-ji-wei" class="header-anchor">#</a></h3><ul>
<li>SYN: 用来表示打开连接</li>
<li>FIN: 用来表示拆除连接</li>
<li>ACK: 用来确认收到的数据</li>
<li>RST: 用来表示立刻拆除连接</li>
<li>PSH: 用来表示应将数据提交给末端应用程序处理</li>
</ul>
<h3><span id="zhua-qu-suo-you-biao-ji-wei-du-wei-zhi-1-de-tcp-liu-liang">抓取所有标记位都未置1的TCP流量</span><a href="#zhua-qu-suo-you-biao-ji-wei-du-wei-zhi-1-de-tcp-liu-liang" class="header-anchor">#</a></h3><p>该报文可能用于端口探测,即如果<br>tcp[13] &amp; 0x00 &#x3D; 0</p>
<h3><span id="she-zhi-liao-urg-wei-de-tcp-shu-ju-bao">设置了URG位的TCP数据包</span><a href="#she-zhi-liao-urg-wei-de-tcp-shu-ju-bao" class="header-anchor">#</a></h3><p>URG位,表示该数据包十分紧急,不进入缓冲区,直接送给进程<br>tcp[13] &amp; 32 &#x3D;&#x3D; 32</p>
<h3><span id="she-zhi-liao-ack-wei-de-tcp-shu-ju-bao">设置了ACK位的TCP数据包</span><a href="#she-zhi-liao-ack-wei-de-tcp-shu-ju-bao" class="header-anchor">#</a></h3><p>tcp[13] &amp; 16 &#x3D;&#x3D; 16</p>
<h3><span id="she-zhi-liao-psh-wei-de-tcp-shu-ju-bao">设置了PSH位的TCP数据包</span><a href="#she-zhi-liao-psh-wei-de-tcp-shu-ju-bao" class="header-anchor">#</a></h3><p>PSH代表这个消息要从缓冲区立刻发送给应用程序<br>tcp[13] &amp; 8 &#x3D;&#x3D; 8</p>
<h3><span id="she-zhi-liao-rst-wei-de-tcp-shu-ju-bao">设置了RST位的TCP数据包</span><a href="#she-zhi-liao-rst-wei-de-tcp-shu-ju-bao" class="header-anchor">#</a></h3><p>tcp[13] &amp; 4 &#x3D;&#x3D; 4</p>
<h3><span id="she-zhi-liao-syn-wei-de-tcp-shu-ju-bao">设置了SYN位的TCP数据包</span><a href="#she-zhi-liao-syn-wei-de-tcp-shu-ju-bao" class="header-anchor">#</a></h3><p>tcp[13] &amp; 2 &#x3D;&#x3D; 2</p>
<h3><span id="she-zhi-liao-fin-wei-de-tcp-shu-ju-bao">设置了FIN位的TCP数据包</span><a href="#she-zhi-liao-fin-wei-de-tcp-shu-ju-bao" class="header-anchor">#</a></h3><p>tcp[13] &amp; 1 &#x3D;&#x3D; 1</p>
<h3><span id="tcp-syn-ack-shu-ju-bao">TCP SYN-ACK数据包</span><a href="#tcp-syn-ack-shu-ju-bao" class="header-anchor">#</a></h3><p>tcp[13] &#x3D;&#x3D; 18</p>
<h3><span id="zhua-qu-mu-de-duan-kou-fan-wei-de-shu-ju-bao">抓取目的端口范围的数据包</span><a href="#zhua-qu-mu-de-duan-kou-fan-wei-de-shu-ju-bao" class="header-anchor">#</a></h3><p>tcp portrange 2000-2500</p>
<p>###tcpdump捕获过滤器</p>
<p>常见命令介绍</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tcpdump -w hzj.pcap -s0 -iany port 1028</span><br></pre></td></tr></table></figure>

<p>上面的命令代表<br>-w hzj.pcap 存储在hzj.pcap这个文件中<br>-s 0 代表抓取字节数不限制,在大多数linux系统下,默认捕获每个帧的前96个字节</p>
<h3><span id="tcpdump-bu-huo-yi-ding-fan-wei-de-duan-kou-9200-9400">tcpdump捕获一定范围的端口(9200-9400)</span><a href="#tcpdump-bu-huo-yi-ding-fan-wei-de-duan-kou-9200-9400" class="header-anchor">#</a></h3><p>tcpdump portrange 9200-9400</p>
<h3><span id="tcpdump-r-ke-yi-yue-du-bu-huo-de-wen-jian-jian-yi-kao-bei-dao-wireshark-zhong-fen-xi">tcpdump -r 可以阅读捕获的文件(建议拷贝到wireshark中分析)</span><a href="#tcpdump-r-ke-yi-yue-du-bu-huo-de-wen-jian-jian-yi-kao-bei-dao-wireshark-zhong-fen-xi" class="header-anchor">#</a></h3>]]></content>
      <tags>
        <tag>wireshark</tag>
      </tags>
  </entry>
  <entry>
    <title>WireShark 显示过滤器</title>
    <url>/wireshark/wireshark-display-filter/</url>
    <content><![CDATA[<h1><span id="ru-he-shi-yong-xian-shi-guo-lu-qi">如何使用显示过滤器</span><a href="#ru-he-shi-yong-xian-shi-guo-lu-qi" class="header-anchor">#</a></h1><p><img src="/wireshark/wireshark-display-filter/wireshark-display-filter1.png" alt="wireshark-display-filter1"><br>或者按住 CTRL + F，输入显示过滤器<br><img src="/wireshark/wireshark-display-filter/wireshark-display-filter2.png" alt="wireshark-display-filter2"></p>
<h2><span id="er-ceng-xian-shi-guo-lu-qi-ju-li">二层显示过滤器举例</span><a href="#er-ceng-xian-shi-guo-lu-qi-ju-li" class="header-anchor">#</a></h2><h3><span id="chang-du-xiao-yu-128-zi-jie-de-shu-ju-bao">长度小于128字节的数据包</span><a href="#chang-du-xiao-yu-128-zi-jie-de-shu-ju-bao" class="header-anchor">#</a></h3><p>frame.len&lt;&#x3D;128</p>
<h3><span id="pai-chu-arp-liu-liang">排除ARP流量</span><a href="#pai-chu-arp-liu-liang" class="header-anchor">#</a></h3><p>!arp</p>
<h2><span id="san-ceng-xian-shi-guo-lu-qi-ju-li">三层显示过滤器举例</span><a href="#san-ceng-xian-shi-guo-lu-qi-ju-li" class="header-anchor">#</a></h2><h3><span id="zhi-xian-shi-192-168-0-1-ip-xiang-guan-shu-ju-bao">只显示192.168.0.1 IP相关数据包</span><a href="#zhi-xian-shi-192-168-0-1-ip-xiang-guan-shu-ju-bao" class="header-anchor">#</a></h3><p>ip.addr&#x3D;&#x3D;192.168.0.1</p>
<h2><span id="si-ceng-xian-shi-guo-lu-qi-ju-li">四层显示过滤器举例</span><a href="#si-ceng-xian-shi-guo-lu-qi-ju-li" class="header-anchor">#</a></h2><h3><span id="pai-chu-rdp-liu-liang">排除RDP流量</span><a href="#pai-chu-rdp-liu-liang" class="header-anchor">#</a></h3><p>!tcp.port&#x3D;&#x3D;3389</p>
<h3><span id="ju-you-syn-biao-zhi-de-tcp-shu-ju-bao">具有SYN标志的TCP数据包</span><a href="#ju-you-syn-biao-zhi-de-tcp-shu-ju-bao" class="header-anchor">#</a></h3><p>tcp.flags.syn&#x3D;&#x3D;1</p>
<h3><span id="ju-you-rst-biao-zhi-de-tcp-shu-ju-bao">具有RST标志的TCP数据包</span><a href="#ju-you-rst-biao-zhi-de-tcp-shu-ju-bao" class="header-anchor">#</a></h3><p>tcp.flags.rst&#x3D;&#x3D;1</p>
<h3><span id="tcp-que-ren-shi-jian-jiao-jiu">TCP确认时间较久</span><a href="#tcp-que-ren-shi-jian-jiao-jiu" class="header-anchor">#</a></h3><p>tcp.analysis.ack_rtt &gt; 0.2 and tcp.len &#x3D;&#x3D; 0<br>###启用TCP Relative Sequence Number的情况<br>如何启用?<br>Edit -&gt; Preferences -&gt; Protocols -&gt; TCP Relative Sequence Numbers</p>
<h3><span id="wo-shou-bei-dui-fang-ju-jue-de-bao">握手被对方拒绝的包</span><a href="#wo-shou-bei-dui-fang-ju-jue-de-bao" class="header-anchor">#</a></h3><p>tcp.flags.reset &#x3D;&#x3D; 1 &amp;&amp; tcp.seq &#x3D;&#x3D; 1</p>
<h3><span id="ke-hu-duan-chong-chuan">客户端重传</span><a href="#ke-hu-duan-chong-chuan" class="header-anchor">#</a></h3><p>tcp.flags.syn &#x3D;&#x3D; 1 &amp;&amp; tcp.analysis.retransmission</p>
<h3><span id="tcp-bao-han">Tcp包含</span><a href="#tcp-bao-han" class="header-anchor">#</a></h3><p>tcp contains {str}</p>
<h2><span id="ying-yong-ceng-xian-shi-guo-lu-qi-ju-li">应用层显示过滤器举例</span><a href="#ying-yong-ceng-xian-shi-guo-lu-qi-ju-li" class="header-anchor">#</a></h2><h3><span id="suo-you-http-liu-liang">所有http流量</span><a href="#suo-you-http-liu-liang" class="header-anchor">#</a></h3><p>http</p>
<h3><span id="wen-ben-guan-li-liu-liang">文本管理流量</span><a href="#wen-ben-guan-li-liu-liang" class="header-anchor">#</a></h3><p>tcp.port &#x3D;&#x3D; 23 || tcp.port &#x3D;&#x3D; 21</p>
<h3><span id="wen-ben-email-liu-liang">文本email流量</span><a href="#wen-ben-email-liu-liang" class="header-anchor">#</a></h3><p>email || pop || imap</p>
<h3><span id="zhi-xian-shi-fang-wen-mou-zhi-ding-zhu-ji-ming-de-http-xie-yi-shu-ju-bao">只显示访问某指定主机名的HTTP协议数据包</span><a href="#zhi-xian-shi-fang-wen-mou-zhi-ding-zhu-ji-ming-de-http-xie-yi-shu-ju-bao" class="header-anchor">#</a></h3><p>http.host &#x3D;&#x3D; &lt;”hostname”&gt;</p>
<h3><span id="zhi-xian-shi-bao-han-http-get-fang-fa-de-http-xie-yi-shu-ju-bao">只显示包含HTTP GET方法的HTTP协议数据包</span><a href="#zhi-xian-shi-bao-han-http-get-fang-fa-de-http-xie-yi-shu-ju-bao" class="header-anchor">#</a></h3><p>http.request.method &#x3D;&#x3D; ‘GET’</p>
<h3><span id="zhi-xian-shi-http-ke-hu-duan-fa-qi-de-bao-han-zhi-ding-uri-qing-qiu-de-http-xie-yi-shu-ju-bao">只显示HTTP 客户端发起的包含指定URI请求的HTTP协议数据包</span><a href="#zhi-xian-shi-http-ke-hu-duan-fa-qi-de-bao-han-zhi-ding-uri-qing-qiu-de-http-xie-yi-shu-ju-bao" class="header-anchor">#</a></h3><p>http.request.uri &#x3D;&#x3D; &lt;”Full request URI”&gt;</p>
<h3><span id="zhi-xian-shi-bao-han-zip-wen-jian-de-shu-ju-bao">只显示包含ZIP文件的数据包</span><a href="#zhi-xian-shi-bao-han-zip-wen-jian-de-shu-ju-bao" class="header-anchor">#</a></h3><p>http matches “.zip” &amp;&amp; http.request.method &#x3D;&#x3D; ‘GET’</p>
]]></content>
      <tags>
        <tag>wireshark</tag>
      </tags>
  </entry>
  <entry>
    <title>WireShark 安装及基本操作</title>
    <url>/wireshark/wireshark-install-basic-op/</url>
    <content><![CDATA[<h1><span id="wireshark-an-zhuang">WireShark安装</span><a href="#wireshark-an-zhuang" class="header-anchor">#</a></h1><p>wireshark在windows和mac上的安装方式都比较简单,下面是Linux下的安装方式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-add-repository ppa:wireshark-dev/stable</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install wireshark</span><br><span class="line">#以root权限启动</span><br><span class="line">sudo wireshark</span><br></pre></td></tr></table></figure>

<h1><span id="wireshark-de-ming-zi-jie-xi">WireShark的名字解析</span><a href="#wireshark-de-ming-zi-jie-xi" class="header-anchor">#</a></h1><p><img src="/wireshark/wireshark-install-basic-op/wireshark-name-resolve.png" alt="wireshark-name-resolve"></p>
<ul>
<li>L2层的名字解析，对Mac地址进行解析，返回机器名</li>
<li>L3层 ip解析为域名</li>
<li>L4层 端口号解析为协议端口号</li>
</ul>
<h1><span id="wireshark-zhua-dao-de-bao-geng-gai-shi-jian-ge-shi">Wireshark抓到的包更改时间格式</span><a href="#wireshark-zhua-dao-de-bao-geng-gai-shi-jian-ge-shi" class="header-anchor">#</a></h1><p><img src="/wireshark/wireshark-install-basic-op/wireshark-time-format.png" alt="wireshark-time-format"></p>
<h1><span id="cha-kan-endpoint">查看EndPoint</span><a href="#cha-kan-endpoint" class="header-anchor">#</a></h1><p>点击Statistics-&gt;EndPoints，可以查看每一个捕获文件里的每个端点</p>
<p><img src="/wireshark/wireshark-install-basic-op/wireshark-endpoint.png" alt="wireshark-endpoint"></p>
<h1><span id="cha-kan-wang-luo-hui-hua">查看网络会话</span><a href="#cha-kan-wang-luo-hui-hua" class="header-anchor">#</a></h1><p>Statistics-&gt;Conversations. 查看地址A和地址B，以及每个设备发送或收到的数据包和字节数</p>
<p><img src="/wireshark/wireshark-install-basic-op/wireshark-conversation.png" alt="wireshark-conversation"></p>
<h1><span id="ji-yu-xie-yi-fen-ceng-jie-gou-de-tong-ji-shu-ju">基于协议分层结构的统计数据</span><a href="#ji-yu-xie-yi-fen-ceng-jie-gou-de-tong-ji-shu-ju" class="header-anchor">#</a></h1><p>Statistics-&gt;Protocol Hierarchy</p>
<p><img src="/wireshark/wireshark-install-basic-op/wireshark-protocol-hierarchy.png" alt="wireshark-protocol-hierarchy"></p>
<h1><span id="gen-sui-liu-gong-neng">跟随流功能</span><a href="#gen-sui-liu-gong-neng" class="header-anchor">#</a></h1><p>右键选中一个数据包，然后右键，follow。比如我在这里跟随一个tcp流</p>
<p><img src="/wireshark/wireshark-install-basic-op/wireshark-tcp-stream.png" alt="wireshark-tcp-stream"></p>
<p>&#x2F;&#x2F;这里也可以使用decode as解码功能，但是没有例子，暂不附图</p>
<h1><span id="cha-kan-io-tu">查看IO图</span><a href="#cha-kan-io-tu" class="header-anchor">#</a></h1><p>Statistics-&gt;IO Graphs</p>
<p><img src="/wireshark/wireshark-install-basic-op/wireshark-io-graph.png" alt="wireshark-io-graph"></p>
<h1><span id="shuang-xiang-shi-jian-tu">双向时间图</span><a href="#shuang-xiang-shi-jian-tu" class="header-anchor">#</a></h1><p>Statistics-&gt;TCP Stream Graph -&gt; Round Trip Time Graph<br><img src="/wireshark/wireshark-install-basic-op/wireshark-rtt-graph.png" alt="wireshark-rtt-graph"></p>
<h1><span id="shu-ju-liu-tu">数据流图</span><a href="#shu-ju-liu-tu" class="header-anchor">#</a></h1><p>Statistics-&gt;Flow Graph<br><img src="/wireshark/wireshark-install-basic-op/wireshark-flow-graph.png" alt="wireshark-flow-graph"></p>
<h1><span id="zhuan-jia-xin-xi">专家信息</span><a href="#zhuan-jia-xin-xi" class="header-anchor">#</a></h1><p>Analyze-&gt;Expert Info Composite<br><img src="/wireshark/wireshark-install-basic-op/wireshark-expert-info.png" alt="wireshark-expert-info"></p>
<h2><span id="hong-fa-de-zhuan-jia-xin-xi">触发的专家信息</span><a href="#hong-fa-de-zhuan-jia-xin-xi" class="header-anchor">#</a></h2><h3><span id="dui-hua-xiao-xi">对话消息</span><a href="#dui-hua-xiao-xi" class="header-anchor">#</a></h3><h3><span id="chuang-kou-geng-xin-you-jie-shou-zhe-fa-song-yong-lai-tong-zhi-fa-song-zhe-tcp-jie-shou-chuang-kou-de-da-xiao-yi-bei-gai-bian">窗口更新 由接收者发送，用来通知发送者TCP接收窗口的大小已被改变</span><a href="#chuang-kou-geng-xin-you-jie-shou-zhe-fa-song-yong-lai-tong-zhi-fa-song-zhe-tcp-jie-shou-chuang-kou-de-da-xiao-yi-bei-gai-bian" class="header-anchor">#</a></h3><h2><span id="zhu-yi-xiao-xi">注意消息</span><a href="#zhu-yi-xiao-xi" class="header-anchor">#</a></h2><h3><span id="tcp-chong-chuan-shu-shu-ju-bao-diu-shi-de-jie-guo-fa-sheng-zai-shou-dao-chong-fu-de-ack-huo-zhe-shu-ju-bao-de-chong-chuan-shu-ji-shi-qi-chao-shi-de-shi-hou">TCP重传输 数据包丢失的结果，发生在收到重复的ACK，或者数据包的重传输计时器超时的时候</span><a href="#tcp-chong-chuan-shu-shu-ju-bao-diu-shi-de-jie-guo-fa-sheng-zai-shou-dao-chong-fu-de-ack-huo-zhe-shu-ju-bao-de-chong-chuan-shu-ji-shi-qi-chao-shi-de-shi-hou" class="header-anchor">#</a></h3><h3><span id="chong-fu-ack-dang-yi-tai-zhu-ji-mei-you-shou-dao-xia-yi-ge-qi-wang-xu-lie-de-shu-ju-bao-shi-ta-hui-sheng-cheng-zui-jin-shou-dao-yi-ci-shu-ju-de-chong-fu-ack">重复ACK 当一台主机没有收到下一个期望序列的数据包时，它会生成最近收到一次数据的重复ACK</span><a href="#chong-fu-ack-dang-yi-tai-zhu-ji-mei-you-shou-dao-xia-yi-ge-qi-wang-xu-lie-de-shu-ju-bao-shi-ta-hui-sheng-cheng-zui-jin-shou-dao-yi-ci-shu-ju-de-chong-fu-ack" class="header-anchor">#</a></h3><h3><span id="ling-chuang-kou-tan-cha-ack-yong-lai-xiang-ying-ling-chuang-kou-tan-cha-shu-ju-bao">零窗口探查ACK 用来响应零窗口探查数据包</span><a href="#ling-chuang-kou-tan-cha-ack-yong-lai-xiang-ying-ling-chuang-kou-tan-cha-shu-ju-bao" class="header-anchor">#</a></h3><h3><span id="chuang-kou-yi-man-yong-lai-tong-zhi-chuan-shu-zhu-ji-ji-qi-jie-shou-zhe-de-tcp-jie-shou-chuang-kou-yi-man">窗口已满 用来通知传输主机及其接收者的TCP接收窗口已满</span><a href="#chuang-kou-yi-man-yong-lai-tong-zhi-chuan-shu-zhu-ji-ji-qi-jie-shou-zhe-de-tcp-jie-shou-chuang-kou-yi-man" class="header-anchor">#</a></h3><h2><span id="jing-gao-xiao-xi">警告消息</span><a href="#jing-gao-xiao-xi" class="header-anchor">#</a></h2><h3><span id="shang-yi-duan-diu-shi-zhi-ming-shu-ju-bao-diu-shi-fa-sheng-zai-dang-shu-ju-liu-zhong-yi-ge-qi-wang-de-xu-lie-hao-bei-tiao-guo-shi">上一段丢失 指明数据包丢失,发生在当数据流中一个期望的序列号被跳过时。</span><a href="#shang-yi-duan-diu-shi-zhi-ming-shu-ju-bao-diu-shi-fa-sheng-zai-dang-shu-ju-liu-zhong-yi-ge-qi-wang-de-xu-lie-hao-bei-tiao-guo-shi" class="header-anchor">#</a></h3><h3><span id="shou-dao-diu-shi-shu-ju-bao-de-ack-fa-sheng-zai-dang-yi-ge-shu-ju-bao-yi-jing-que-ren-diu-shi-dan-shou-dao-liao-qi-ack-shu-ju-bao-shi">收到丢失数据包的ACK 发生在当一个数据包已经确认丢失但受到了其ACK数据包时</span><a href="#shou-dao-diu-shi-shu-ju-bao-de-ack-fa-sheng-zai-dang-yi-ge-shu-ju-bao-yi-jing-que-ren-diu-shi-dan-shou-dao-liao-qi-ack-shu-ju-bao-shi" class="header-anchor">#</a></h3><h3><span id="bao-huo-dang-yi-ge-lian-jie-de-bao-huo-shu-ju-bao-chu-xian-shi-hong-fa">保活 当一个连接的保活数据包出现时触发</span><a href="#bao-huo-dang-yi-ge-lian-jie-de-bao-huo-shu-ju-bao-chu-xian-shi-hong-fa" class="header-anchor">#</a></h3><h3><span id="ling-chuang-kou-dang-jie-shou-fang-yi-jing-da-dao-tcp-jie-shou-chuang-kou-da-xiao-shi-fa-chu-yi-ge-ling-chuang-kou-tong-zhi-yao-qiu-fa-song-fang-ting-zhi-chuan-shu-shu-ju">零窗口 当接收方已经达到TCP接收窗口大小时，发出一个零窗口通知，要求发送方停止传输数据</span><a href="#ling-chuang-kou-dang-jie-shou-fang-yi-jing-da-dao-tcp-jie-shou-chuang-kou-da-xiao-shi-fa-chu-yi-ge-ling-chuang-kou-tong-zhi-yao-qiu-fa-song-fang-ting-zhi-chuan-shu-shu-ju" class="header-anchor">#</a></h3><h3><span id="luan-xu-dang-shu-ju-bao-bei-luan-xu-jie-shou-shi-hui-li-yong-xu-lie-hao-jin-xing-jian-ce">乱序 当数据包被乱序接收时，会利用序列号进行检测</span><a href="#luan-xu-dang-shu-ju-bao-bei-luan-xu-jie-shou-shi-hui-li-yong-xu-lie-hao-jin-xing-jian-ce" class="header-anchor">#</a></h3><h3><span id="kuai-su-chong-chuan-shu-yi-ci-chong-chuan-hui-zai-shou-dao-yi-ge-chong-fu-ack-de-20ms-nei-jin-xing">快速重传输 一次重传会在收到一个重复ACK的20ms内进行</span><a href="#kuai-su-chong-chuan-shu-yi-ci-chong-chuan-hui-zai-shou-dao-yi-ge-chong-fu-ack-de-20ms-nei-jin-xing" class="header-anchor">#</a></h3><h2><span id="wireshark-xing-neng">WireShark性能</span><a href="#wireshark-xing-neng" class="header-anchor">#</a></h2><h3><span id="statistics-gt-summary-cha-kan-ping-jun-su-du">Statistics -&gt; Summary 查看平均速度</span><a href="#statistics-gt-summary-cha-kan-ping-jun-su-du" class="header-anchor">#</a></h3><h3><span id="analyze-gt-expert-infos">Analyze -&gt; Expert Infos</span><a href="#analyze-gt-expert-infos" class="header-anchor">#</a></h3><h3><span id="statistics-gt-tcp-streamgraph-gt-tcp-sequence-graph-stenens">Statistics -&gt; TCP StreamGraph -&gt; TCP Sequence Graph(Stenens)</span><a href="#statistics-gt-tcp-streamgraph-gt-tcp-sequence-graph-stenens" class="header-anchor">#</a></h3><h3><span id="tcp-previous-segment-not-captured">TCP Previous segment not captured</span><a href="#tcp-previous-segment-not-captured" class="header-anchor">#</a></h3><p>在TCP传输过程中,同一台主机发出的数据段应该是连续的,即后一个包的Seq号等于前一个包的Seq + Len. 如果在网络包中没有找到,就会出现这个错误</p>
<h3><span id="tcp-acked-unseen-segment">TCP ACKed unseen segment</span><a href="#tcp-acked-unseen-segment" class="header-anchor">#</a></h3><p>Wireshark发现被Ack的那个包没被wireshark捕获</p>
<h3><span id="tcp-out-of-order">TCP Out-of-Order</span><a href="#tcp-out-of-order" class="header-anchor">#</a></h3><p>在TCP传输过程中,同一台主机发出的数据段应该是连续的,即后一个包的Seq号等于前一个包的Seq +<br>Len.当Wireshark发现后一个包的Seq号小于前一个包的Seq+Len 就乱序le</p>
<h3><span id="tcp-dup-ack">TCP Dup ACK</span><a href="#tcp-dup-ack" class="header-anchor">#</a></h3><p>当乱序或者丢包的时候,接收方会收到Seq号比期望值大的包,每收到一个这种包就会Ack一次期望的Seq值</p>
<h3><span id="tcp-fast-retransmission">TCP Fast Retransmission</span><a href="#tcp-fast-retransmission" class="header-anchor">#</a></h3><p>当发送方收到3个或以上TCP Dup ACK,就意识到之前发的包可能丢了,触发快速重传</p>
<h3><span id="tcp-retransmission">TCP Retransmission</span><a href="#tcp-retransmission" class="header-anchor">#</a></h3><p>没有触发tcp超时重传,超时重传</p>
<h3><span id="tcp-zerowindow">TCP zerowindow</span><a href="#tcp-zerowindow" class="header-anchor">#</a></h3><p>缓存区已满,不能再接收数据了</p>
<h3><span id="tcp-window-full">TCP window FUll</span><a href="#tcp-window-full" class="header-anchor">#</a></h3><p>Wireshark检测到,发送方发送的数据会把接收方的接收窗口耗尽</p>
]]></content>
      <tags>
        <tag>wireshark</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache ZooKeeper在华为云IoT服务产品部的使用</title>
    <url>/zookeeper/zookeeper-huaweicloud-usage/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#qian-yan">前言</a><ul>
<li><a href="#apache-zookeeper-jian-jie">Apache ZooKeeper 简介</a></li>
<li><a href="#apache-zookeeper-he-xin-gai-nian">Apache ZooKeeper 核心概念</a><ul>
<li><a href="#znode">ZNode</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#apache-zookeeper-zai-hua-wei-yun-iot-fu-wu-chan-pin-bu-de-shi-yong">Apache ZooKeeper在华为云IoT服务产品部的使用</a><ul>
<li><a href="#zhi-cheng-xi-tong-nei-guan-jian-zu-jian">支撑系统内关键组件</a></li>
<li><a href="#yan-ge-fen-bu-shi-suo">严格分布式锁</a></li>
<li><a href="#fen-bu-shi-huan-cun-tong-zhi">分布式缓存通知</a></li>
<li><a href="#fen-bu-shi-id-sheng-cheng-qi">分布式Id生成器</a><ul>
<li><a href="#zhi-jie-shi-yong-zookeeper-de-you-xu-jie-dian">直接使用ZooKeeper的有序节点</a></li>
<li><a href="#shi-yong-zookeeper-sheng-cheng-ji-qi-hao">使用ZooKeeper生成机器号</a></li>
</ul>
</li>
<li><a href="#wei-fu-wu-zhu-ce-zhong-xin">微服务注册中心</a></li>
<li><a href="#shu-ju-ku-lian-jie-jun-heng">数据库连接均衡</a></li>
</ul>
</li>
<li><a href="#apache-zookeeper-zai-hua-wei-yun-iot-chan-pin-bu-de-bu-shu-yun-wei">Apache ZooKeeper在华为云IoT产品部的部署&#x2F;运维</a><ul>
<li><a href="#fu-wu-duan-bu-shu-fang-shi">服务端部署方式</a></li>
<li><a href="#ke-hu-duan-lian-jie-fang-shi">客户端连接方式</a></li>
<li><a href="#chong-yao-jian-kong-zhi-biao">重要监控指标</a></li>
</ul>
</li>
<li><a href="#apache-zookeeper-zai-hua-wei-yun-iot-chan-pin-bu-de-wen-ti">Apache ZooKeeper在华为云IoT产品部的问题</a><ul>
<li><a href="#readiness-he-li-she-zhi">readiness合理设置</a></li>
<li><a href="#jute-maxbuffer-chao-guo-shang-xian">jute.maxbuffer超过上限</a></li>
<li><a href="#zookeeper-de-prometheus-quan-0-jian-ting">zookeeper的Prometheus全0监听</a></li>
<li><a href="#ke-hu-duan-ban-ben-hao-guo-di-yu-ming-wu-fa-ji-shi-shua-xin">客户端版本号过低，域名无法及时刷新</a></li>
</ul>
</li>
<li><a href="#zong-jie">总结</a></li>
</ul>
<!-- tocstop -->

</div>

<h1><span id="qian-yan">前言</span><a href="#qian-yan" class="header-anchor">#</a></h1><p>华为云IoT服务产品部致力于提供极简接入、智能化、安全可信等全栈全场景服务和开发、集成、托管、运营等一站式工具服务，助力合作伙伴&#x2F;客户轻松、快速地构建5G、AI万物互联的场景化物联网解决方案。</p>
<p>架构方面，华为云IoT服务产品部采用云原生微服务架构，ZooKeeper组件在华为云IoT服务产品部的架构中扮演着重要的角色，本文将介绍华为云IoT服务产品部在ZooKeeper的使用。</p>
<h2><span id="apache-zookeeper-jian-jie">Apache ZooKeeper 简介</span><a href="#apache-zookeeper-jian-jie" class="header-anchor">#</a></h2><p>Apache ZooKeeper是一个分布式、开源的分布式协调服务，由Apache Hadoop的子项目发展而来。作为一个分布式原语的基石服务，几乎所有分布式功能都可以借助ZooKeeper来实现，例如：应用的主备选举，分布式锁，分布式任务分配，缓存通知，甚至是消息队列、配置中心等。</p>
<p>抛开应用场景，讨论某个组件是否适合，并没有绝对正确的答案。尽管Apache ZooKeeper作为消息队列、配置中心时，性能不用想就知道很差。但是，倘若系统里面只有ZooKeeper，应用场景性能要求又不高，那使用ZooKeeper不失为一个好的选择。但ZooKeeper 客户端的编码难度较高，对开发人员的技术水平要求较高，尽量使用一些成熟开源的ZooKeeper客户端、框架，如：Curator、Spring Cloud ZooKeeper等。</p>
<h2><span id="apache-zookeeper-he-xin-gai-nian">Apache ZooKeeper 核心概念</span><a href="#apache-zookeeper-he-xin-gai-nian" class="header-anchor">#</a></h2><h3><span id="znode">ZNode</span><a href="#znode" class="header-anchor">#</a></h3><p>ZNode是ZooKeeper的数据节点，ZooKeeper的数据模型是树形结构，每个ZNode都可以存储数据，同时可以有多个子节点，每个ZNode都有一个路径标识，类似于文件系统的路径，例如：&#x2F;iot-service&#x2F;iot-device&#x2F;iot-device-1。</p>
<h1><span id="apache-zookeeper-zai-hua-wei-yun-iot-fu-wu-chan-pin-bu-de-shi-yong">Apache ZooKeeper在华为云IoT服务产品部的使用</span><a href="#apache-zookeeper-zai-hua-wei-yun-iot-fu-wu-chan-pin-bu-de-shi-yong" class="header-anchor">#</a></h1><p><img src="/zookeeper/zookeeper-huaweicloud-usage/zookeeper-huaweicloud-usage.png" alt="zookeeper-huaweicloud-usage"></p>
<h2><span id="zhi-cheng-xi-tong-nei-guan-jian-zu-jian">支撑系统内关键组件</span><a href="#zhi-cheng-xi-tong-nei-guan-jian-zu-jian" class="header-anchor">#</a></h2><p>很多开源组件都依赖ZooKeeper，如<code>Flink</code>、<code>Ignite</code>、<code>Pulsar</code>等，通过自建和优化ZooKeeper环境，我们能够为这些高级组件提供更加可靠和高效的服务支持，确保服务的平稳运行。</p>
<h2><span id="yan-ge-fen-bu-shi-suo">严格分布式锁</span><a href="#yan-ge-fen-bu-shi-suo" class="header-anchor">#</a></h2><p>分布式锁是非常常见的需求，相比集群Redis、主备Mysql等，ZooKeeper更容易实现理论上的严格分布式锁。</p>
<h2><span id="fen-bu-shi-huan-cun-tong-zhi">分布式缓存通知</span><a href="#fen-bu-shi-huan-cun-tong-zhi" class="header-anchor">#</a></h2><p>ZooKeeper的分布式缓存通知能够帮助我们实现分布式缓存的一致性，例如：我们可以在ZooKeeper上注册一个节点，然后在其他节点上监听这个节点，当这个节点发生变化时，其他节点就能够收到通知，然后更新本地缓存。</p>
<p>这种方式的缺点是，ZooKeeper的性能不高，不适合频繁变更的场景，但是，对于一些不经常变更的配置，这种方式是非常适合的。如果系统中存在消息队列，那么可以使用消息队列来实现分布式缓存通知，这种方式的性能会更好、扩展性更强。</p>
<h2><span id="fen-bu-shi-id-sheng-cheng-qi">分布式Id生成器</span><a href="#fen-bu-shi-id-sheng-cheng-qi" class="header-anchor">#</a></h2><h3><span id="zhi-jie-shi-yong-zookeeper-de-you-xu-jie-dian">直接使用ZooKeeper的有序节点</span><a href="#zhi-jie-shi-yong-zookeeper-de-you-xu-jie-dian" class="header-anchor">#</a></h3><p>应用程序可以直接使用ZooKeeper的有序节点来生成分布式Id，但是，这种方式的缺点是，ZooKeeper的性能不高，不适合频繁生成的场景。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.zookeeper.CreateMode;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooDefs;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.data.Stat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZkDirectIdGenerator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ZooKeeper zooKeeper;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;/zk-direct-id&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">PATH_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;/id-&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ZkDirectIdGenerator</span><span class="params">(String connectionString, <span class="type">int</span> sessionTimeout)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="built_in">this</span>.zooKeeper = <span class="keyword">new</span> <span class="title class_">ZooKeeper</span>(connectionString, sessionTimeout, event -&gt; &#123;&#125;);</span><br><span class="line">        initializePath();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initializePath</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Stat</span> <span class="variable">stat</span> <span class="operator">=</span> zooKeeper.exists(path, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (stat == <span class="literal">null</span>) &#123;</span><br><span class="line">            zooKeeper.create(path, <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Optional&lt;String&gt; <span class="title function_">generateId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">fullPath</span> <span class="operator">=</span> zooKeeper.create(path + PATH_PREFIX, <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL);</span><br><span class="line">            <span class="keyword">return</span> Optional.of(extractId(fullPath));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;create znode failed, exception is &quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span> Optional.empty();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">extractId</span><span class="params">(String fullPath)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fullPath.substring(fullPath.lastIndexOf(PATH_PREFIX) + PATH_PREFIX.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3><span id="shi-yong-zookeeper-sheng-cheng-ji-qi-hao">使用ZooKeeper生成机器号</span><a href="#shi-yong-zookeeper-sheng-cheng-ji-qi-hao" class="header-anchor">#</a></h3><p>应用程序可以使用ZooKeeper生成机器号，然后使用机器号+时间戳+序列号来生成分布式Id。来解决ZooKeeper有序节点性能不高的问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.CreateMode;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooDefs;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicReference;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ZkIdGenerator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;/zk-id&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">atomicInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicReference&lt;String&gt; machinePrefix = <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;&gt;(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] AUX_ARRAY = &#123;<span class="string">&quot;&quot;</span>, <span class="string">&quot;0&quot;</span>, <span class="string">&quot;00&quot;</span>, <span class="string">&quot;000&quot;</span>, <span class="string">&quot;0000&quot;</span>, <span class="string">&quot;00000&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过zk获取不一样的机器号，机器号取有序节点最后三位</span></span><br><span class="line"><span class="comment">     * id格式：</span></span><br><span class="line"><span class="comment">     * 机器号 + 日期 + 小时 + 分钟 + 秒 + 5位递增号码</span></span><br><span class="line"><span class="comment">     * 一秒可分近10w个id</span></span><br><span class="line"><span class="comment">     * 需要对齐可以在每一位补零</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Optional&lt;String&gt; <span class="title function_">genId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (machinePrefix.get().isEmpty()) &#123;</span><br><span class="line">            acquireMachinePrefix();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (machinePrefix.get().isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// get id failed</span></span><br><span class="line">            <span class="keyword">return</span> Optional.empty();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="type">int</span> <span class="variable">aux</span> <span class="operator">=</span> atomicInteger.getAndAccumulate(<span class="number">1</span>, ((left, right) -&gt; &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> left + right;</span><br><span class="line">            <span class="keyword">return</span> val &gt; <span class="number">99999</span> ? <span class="number">1</span> : val;</span><br><span class="line">        &#125;));</span><br><span class="line">        <span class="type">String</span> <span class="variable">time</span> <span class="operator">=</span> conv2Str(now.getDayOfYear(), <span class="number">3</span>) + conv2Str(now.getHour(), <span class="number">2</span>) + conv2Str(now.getMinute(), <span class="number">2</span>) + conv2Str(now.getSecond(), <span class="number">2</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> conv2Str(aux, <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">return</span> Optional.of(machinePrefix.get() + time + suffix);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">acquireMachinePrefix</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!machinePrefix.get().isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ZooKeeper</span> <span class="variable">zooKeeper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ZooKeeper</span>(ZooKeeperConstant.SERVERS, <span class="number">30_000</span>, <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> zooKeeper.create(path, <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL);</span><br><span class="line">            <span class="keyword">if</span> (s.length() &gt; <span class="number">3</span>) &#123;</span><br><span class="line">                machinePrefix.compareAndSet(<span class="string">&quot;&quot;</span>, s.substring(s.length() - <span class="number">3</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;connect to zookeeper failed, exception is &quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">conv2Str</span><span class="params">(<span class="type">int</span> value, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (length &gt; <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;length should be less than 5&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> String.valueOf(value);</span><br><span class="line">        <span class="keyword">return</span> AUX_ARRAY[length - str.length()] + str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2><span id="wei-fu-wu-zhu-ce-zhong-xin">微服务注册中心</span><a href="#wei-fu-wu-zhu-ce-zhong-xin" class="header-anchor">#</a></h2><p>相比其他微服务引擎，如阿里云的<code>MSE</code>、<code>Nacos</code>等，已有的Zookeeper集群作为微服务的注册中心，既能满足微服务数量较少时的功能需求，并且更加节约成本</p>
<h2><span id="shu-ju-ku-lian-jie-jun-heng">数据库连接均衡</span><a href="#shu-ju-ku-lian-jie-jun-heng" class="header-anchor">#</a></h2><p>在此前的架构中，我们采用了一种随机策略来分配微服务与数据库的连接地址。下图展示了这种随机分配可能导致的场景。考虑两个微服务：微服务B和微服务C。尽管微服务C的实例较多，但其对数据库的操作相对较少。相比之下，微服务B在运行期间对数据库的操作更为频繁。这种连接方式可能导致数据库Data2节点的连接数和CPU使用率持续居高，从而成为系统的瓶颈。</p>
<p><img src="/zookeeper/zookeeper-huaweicloud-usage/zookeeper-database-before.png" alt="zookeeper-database-before.png"></p>
<p>启发于<strong>Kafka</strong>中的<code>partition</code>分配算法，我们提出了一种新的连接策略。例如，如果微服务B1连接到了Data1和Data2节点，那么微服务B2将连接到Data3和Data4节点。如果存在B3实例，它将再次连接到Data1和Data2节点。对于微服务C1，其连接将从Data1和Data2节点开始。然而，由于微服务的数量与数据库实例数量的两倍（每个微服务建立两个连接）并非总是能整除，这可能导致Data1和Data2节点的负载不均衡。</p>
<p>为了解决这一问题，我们进一步优化了策略：第一个微服务实例在选择数据库节点时，将从一个随机起点开始。这种方法旨在确保Data1和Data2节点的负载均衡。具体的分配策略如下图所示。</p>
<p><img src="/zookeeper/zookeeper-huaweicloud-usage/zookeeper-database-after.png" alt="zookeeper-database-after.png"></p>
<h1><span id="apache-zookeeper-zai-hua-wei-yun-iot-chan-pin-bu-de-bu-shu-x2f-yun-wei">Apache ZooKeeper在华为云IoT产品部的部署&#x2F;运维</span><a href="#apache-zookeeper-zai-hua-wei-yun-iot-chan-pin-bu-de-bu-shu-x2f-yun-wei" class="header-anchor">#</a></h1><h2><span id="fu-wu-duan-bu-shu-fang-shi">服务端部署方式</span><a href="#fu-wu-duan-bu-shu-fang-shi" class="header-anchor">#</a></h2><p>我们所有微服务和中间件均采用容器化部署，选择3节点（没有learner）规格。使用<strong>statefulset</strong>和<strong>PVC</strong>的模式部署。为什么使用<strong>statefulset</strong>进行部署？<strong>statefulset</strong>非常适合用于像<code>Zookeeper</code>这样有持久化存储需求的服务，每个Pod可以和对应的存储资源绑定，保证数据的持久化，同时也简化了部署，如果想使用<strong>deploy</strong>的部署模式，需要规划、固定每个pod的虚拟机部署。</p>
<p><code>Zookeeper</code>本身对云硬盘的要求并不高，普通IO，几十G存储就已经能够支撑<code>Zookeeper</code>平稳运行了。<code>Zookeeper</code>本身运行的资源，使用量不是很大，在我们的场景，规格主要取决于Pulsar的topic数量，如果<code>Pulsar</code>的topic不多，那么0.5核、2G内存已经能保证<code>Zookeeper</code>平稳运行了。</p>
<h2><span id="ke-hu-duan-lian-jie-fang-shi">客户端连接方式</span><a href="#ke-hu-duan-lian-jie-fang-shi" class="header-anchor">#</a></h2><p>借助coredns，客户端使用域名的方式连接<code>Zookeeper</code>，这样可以避免<code>Zookeeper</code>的IP地址变更导致客户端连接失败的问题，如zookeeper-0.zookeeper:2181,zookeeper-1.zookeeper:2181,zookeeper-2.zookeeper:2181</p>
<h2><span id="chong-yao-jian-kong-zhi-biao">重要监控指标</span><a href="#chong-yao-jian-kong-zhi-biao" class="header-anchor">#</a></h2><ul>
<li><p>readlantency、updatelantency</p>
<p>zk的读写延迟</p>
</li>
<li><p>approximate_data_size</p>
<p>zk中数据的平均大小估计</p>
</li>
<li><p>outstanding_requests</p>
<p>等待<code>Zookeeper</code>处理的请求数</p>
</li>
<li><p>znode_count</p>
<p><code>Zookeeper</code>当前的<code>znode</code>总数</p>
</li>
<li><p>num_alive_connections</p>
<p><code>Zookeeper</code>当前活跃的连接数</p>
</li>
</ul>
<h1><span id="apache-zookeeper-zai-hua-wei-yun-iot-chan-pin-bu-de-wen-ti">Apache ZooKeeper在华为云IoT产品部的问题</span><a href="#apache-zookeeper-zai-hua-wei-yun-iot-chan-pin-bu-de-wen-ti" class="header-anchor">#</a></h1><h2><span id="readiness-he-li-she-zhi">readiness合理设置</span><a href="#readiness-he-li-she-zhi" class="header-anchor">#</a></h2><p>这是碰到的最有趣的问题，<strong>readiness</strong>接口是<strong>k8s</strong>判断pod是否正常的依据，那么对于<strong>Zookeeper</strong>集群来说，最合理的就是，当这个<strong>Zookeeper</strong>节点加入集群，获得了属于自己的<strong>Leader</strong>或<strong>Follower</strong>状态，就算pod正常。可是，当初次部署的时候，只有一个节点可用，该节点一个实例无法完成选举流程，导致无法部署。</p>
<p>综上，我们把<strong>readiness</strong>的策略修改为：</p>
<p><img src="/zookeeper/zookeeper-huaweicloud-usage/zookeeper-readiness-strategy.png" alt="zookeeper-readiness-strategy.png"></p>
<p>PS：为了让<strong>readiness</strong>检查不通过时，<strong>Zookeeper</strong>集群也能选主成功，需要配置<strong>publishNotReadyAddresses</strong>为true，示例如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">zookeeper</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">zookeeper</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">sessionAffinity:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">publishNotReadyAddresses:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">2181</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">client</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">2888</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">peer</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">3888</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">leader</span></span><br></pre></td></tr></table></figure>

<h2><span id="jute-maxbuffer-chao-guo-shang-xian">jute.maxbuffer超过上限</span><a href="#jute-maxbuffer-chao-guo-shang-xian" class="header-anchor">#</a></h2><p>jute.maxbuffer，这个是znode中存储数据大小的上限，在客户端和服务端都需要配置，根据自己在znode上存储的数据合理配置</p>
<h2><span id="zookeeper-de-prometheus-quan-0-jian-ting">zookeeper的Prometheus全0监听</span><a href="#zookeeper-de-prometheus-quan-0-jian-ting" class="header-anchor">#</a></h2><p>不满足网络监听最小可见原则。修改策略，添加一个可配置参数来配置监听的IP <code>metricsProvider.httpHost</code>，PR已合入，见 <a href="https://github.com/apache/zookeeper/pull/1574/files">https://github.com/apache/zookeeper/pull/1574/files</a></p>
<h2><span id="ke-hu-duan-ban-ben-hao-guo-di-yu-ming-wu-fa-ji-shi-shua-xin">客户端版本号过低，域名无法及时刷新</span><a href="#ke-hu-duan-ban-ben-hao-guo-di-yu-ming-wu-fa-ji-shi-shua-xin" class="header-anchor">#</a></h2><p>客户端使用域名进行连接，但在客户端版本号过低的情况下，客户端并不会刷新新的ip，还是会用旧的ip尝试连接。升级客户端版本号到curator-4.3.0以上、zookeeper-3.6.2以上版本后解决。</p>
<h1><span id="zong-jie">总结</span><a href="#zong-jie" class="header-anchor">#</a></h1><p>本文详细介绍了华为云IoT服务产品部如何使用Apache ZooKeeper来优化其云原生微服务架构。ZooKeeper作为分布式协调服务，在华为云IoT服务中发挥了重要作用，用于主备选举、分布式锁、任务分配和缓存通知等。文中还讨论了ZooKeeper在分布式ID生成、微服务注册中心、数据库连接均衡等方面的应用。此外，文章还覆盖了ZooKeeper在华为云IoT产品部的部署、运维策略和所遇到的挑战，包括容器化部署、监控指标和配置问题。</p>
]]></content>
      <tags>
        <tag>ZooKeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>Go Http SDK设计</title>
    <url>/code/go/go-http-sdk-design/</url>
    <content><![CDATA[<p>根据Go项目的需求和特性，可以为Go的Http SDK项目选择以下命名方式：</p>
<ul>
<li><code>xxx-client-go</code>：如果这个项目只有Http SDK，没有其他协议的SDK，推荐使用这个命名方式。</li>
<li><code>xxx-http-client-go</code>：当存在其他协议的SDK时，可以使用这个命名方式，以区分不同协议的SDK。</li>
<li><code>xxx-admin-go</code>：当项目使用其他协议作为数据通道，使用HTTP协议作为管理通道时，可以使用这个命名方式。</li>
</ul>
<p>由于Go语言的调用方式是<code>包名.结构体名.方法名</code>，所以在设计SDK时，需要考虑包名、结构体名、方法名的设计。</p>
<p>以xxx业务为例，假设业务名为<code>xxx</code>，推荐包名也为<code>xxx</code>，结构体名为<code>Client</code>。</p>
<p>目录布局可以是这样子的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxx-client-go/</span><br><span class="line">|-- xxx/</span><br><span class="line">|   |-- client.go</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>SDK</tag>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Go 项目结构组织</title>
    <url>/code/go/go-project-structure/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#web-hou-duan-xiang-mu-jie-gou-zu-zhi">Web后端项目结构组织</a><ul>
<li><a href="#fang-an-yi-duo-ye-wu-mo-kuai-tong-guo-wen-jian-ming-qu-fen-bu-fen-zi-bao">方案一：多业务模块通过文件名区分，不分子包</a></li>
<li><a href="#fang-an-er-duo-ye-wu-mo-kuai-tong-guo-bao-ming-qu-fen-dan-bu-chai-fen-model-he-service">方案二：多业务模块通过包名区分，但不拆分model和service</a></li>
<li><a href="#fang-an-san-duo-ye-wu-mo-kuai-tong-guo-bao-ming-qu-fen-bing-zai-xia-ceng-chai-fen-model-he-service">方案三：多业务模块通过包名区分，并在下层拆分model和service</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

</div>

<h2><span id="web-hou-duan-xiang-mu-jie-gou-zu-zhi">Web后端项目结构组织</span><a href="#web-hou-duan-xiang-mu-jie-gou-zu-zhi" class="header-anchor">#</a></h2><p>要点：</p>
<ul>
<li>使用<code>model</code>、<code>service</code>，而不是<code>modles</code>、<code>services</code>。差别不大，节约一个字母，更加简洁。</li>
<li>如果是企业内部的微服务，基本不会、极少把部分的功能以library的形式开放出去，internal目录在这个时候就略显鸡肋，可以省略。</li>
</ul>
<p>备注:</p>
<ul>
<li>xxx、yyy代表大块的业务区分：如用户、订单、支付</li>
<li>aaa、bbb代表小块的业务区分：如(用户的)登录、注册、查询</li>
</ul>
<h3><span id="fang-an-yi-duo-ye-wu-mo-kuai-tong-guo-wen-jian-ming-qu-fen-bu-fen-zi-bao">方案一：多业务模块通过文件名区分，不分子包</span><a href="#fang-an-yi-duo-ye-wu-mo-kuai-tong-guo-wen-jian-ming-qu-fen-bu-fen-zi-bao" class="header-anchor">#</a></h3><p>适用于小型项目</p>
<p>注：handler、model、service要留意方法、结构体、接口的命名，避免冲突</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">example/</span><br><span class="line">|-- cmd/</span><br><span class="line">|   |-- example-server/</span><br><span class="line">|       |-- example-server.go (start gin app, manage handler, middleware)</span><br><span class="line">|-- pkg/</span><br><span class="line">|   |-- handler/</span><br><span class="line">|       |-- aaa_handler.go</span><br><span class="line">|       |-- bbb_handler.go</span><br><span class="line">|   |-- middleware/</span><br><span class="line">|       |-- aaa_middleware.go</span><br><span class="line">|       |-- bbb_middleware.go</span><br><span class="line">|   |-- model/</span><br><span class="line">|       |-- aaa_model.go</span><br><span class="line">|       |-- bbb_model.go</span><br><span class="line">|   |-- service/</span><br><span class="line">|       |-- aaa_service.go</span><br><span class="line">|       |-- bbb_service.go</span><br><span class="line">|   |-- ignite/</span><br><span class="line">|       |-- ignite.go</span><br><span class="line">|       |-- ignite_test.go</span><br><span class="line">|   |-- influx/</span><br><span class="line">|       |-- influx.go</span><br><span class="line">|       |-- influx_test.go</span><br><span class="line">|-- docker-build/</span><br><span class="line">|   |-- scripts/</span><br><span class="line">|       |-- start.sh</span><br><span class="line">|-- Dockerfile</span><br></pre></td></tr></table></figure>

<h3><span id="fang-an-er-duo-ye-wu-mo-kuai-tong-guo-bao-ming-qu-fen-dan-bu-chai-fen-model-he-service">方案二：多业务模块通过包名区分，但不拆分model和service</span><a href="#fang-an-er-duo-ye-wu-mo-kuai-tong-guo-bao-ming-qu-fen-dan-bu-chai-fen-model-he-service" class="header-anchor">#</a></h3><p>方案二更适用于由多个小模块组合而成的项目，每个小模块不会太大，复用度较高。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">example/</span><br><span class="line">|-- cmd/</span><br><span class="line">|   |-- example-server/</span><br><span class="line">|       |-- example-server.go (start gin app, manage handler, middleware)</span><br><span class="line">|-- pkg/</span><br><span class="line">|   |-- handler/</span><br><span class="line">|       |-- xxx/</span><br><span class="line">|           |-- xxx_aaa_handler.go</span><br><span class="line">|           |-- xxx_bbb_handler.go</span><br><span class="line">|       |-- yyy/</span><br><span class="line">|           |-- yyy_aaa_handler.go</span><br><span class="line">|           |-- yyy_bbb_handler.go</span><br><span class="line">|   |-- middleware/</span><br><span class="line">|       |-- xxx/</span><br><span class="line">|           |-- xxx_aaa_middleware.go</span><br><span class="line">|       |-- yyy/</span><br><span class="line">|           |-- yyy_bbb_middleware.go</span><br><span class="line">|   |-- xxx/</span><br><span class="line">|       |-- xxx_aaa_model.go</span><br><span class="line">|       |-- xxx_aaa_service.go</span><br><span class="line">|   |-- yyy/</span><br><span class="line">|       |-- yyy_bbb_model.go</span><br><span class="line">|       |-- yyy_bbb_service.go</span><br><span class="line">|   |-- ignite/</span><br><span class="line">|       |-- ignite.go</span><br><span class="line">|       |-- ignite_test.go</span><br><span class="line">|   |-- influx/</span><br><span class="line">|       |-- influx.go</span><br><span class="line">|       |-- influx_test.go</span><br><span class="line">|-- docker-build/</span><br><span class="line">|   |-- scripts/</span><br><span class="line">|       |-- start.sh</span><br><span class="line">|-- Dockerfile</span><br></pre></td></tr></table></figure>

<h3><span id="fang-an-san-duo-ye-wu-mo-kuai-tong-guo-bao-ming-qu-fen-bing-zai-xia-ceng-chai-fen-model-he-service">方案三：多业务模块通过包名区分，并在下层拆分model和service</span><a href="#fang-an-san-duo-ye-wu-mo-kuai-tong-guo-bao-ming-qu-fen-bing-zai-xia-ceng-chai-fen-model-he-service" class="header-anchor">#</a></h3><p>方案三更适用于由多个大模块组合而成的项目，每个大模块都很大，复用度较低，较少的互相调用。</p>
<p>方案三在service依赖多个service的情况下，会发生命名冲突。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">example/</span><br><span class="line">|-- cmd/</span><br><span class="line">|   |-- example-server/</span><br><span class="line">|       |-- example-server.go (start gin app, manage handler, middleware)</span><br><span class="line">|-- pkg/</span><br><span class="line">|   |-- handler/</span><br><span class="line">|       |-- xxx/</span><br><span class="line">|           |-- xxx_aaa_handler.go</span><br><span class="line">|       |-- yyy/</span><br><span class="line">|           |-- yyy_bbb_handler.go</span><br><span class="line">|   |-- middleware/</span><br><span class="line">|       |-- xxx/</span><br><span class="line">|           |-- xxx_aaa_middleware.go</span><br><span class="line">|       |-- yyy/</span><br><span class="line">|           |-- yyy_bbb_middleware.go</span><br><span class="line">|   |-- xxx/</span><br><span class="line">|       |-- model/</span><br><span class="line">|           |-- xxx_aaa_model.go</span><br><span class="line">|       |-- service/</span><br><span class="line">|           |-- xxx_aaa_service.go</span><br><span class="line">|   |-- yyy/</span><br><span class="line">|       |-- model/</span><br><span class="line">|           |-- yyy_bbb_model.go</span><br><span class="line">|       |-- service/</span><br><span class="line">|           |-- yyy_bbb_service.go</span><br><span class="line">|   |-- ignite/</span><br><span class="line">|       |-- ignite.go</span><br><span class="line">|       |-- ignite_test.go</span><br><span class="line">|   |-- influx/</span><br><span class="line">|       |-- influx.go</span><br><span class="line">|       |-- influx_test.go</span><br><span class="line">|-- docker-build/</span><br><span class="line">|   |-- scripts/</span><br><span class="line">|       |-- start.sh</span><br><span class="line">|-- Dockerfile</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>java进行数据库操作的并发控制</title>
    <url>/code/java/find-save-concurrent/</url>
    <content><![CDATA[<p>在现代应用编码中，从数据库里面find出来，进行一些业务逻辑操作，最后再save回去。即：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> personRepo.findById(id);</span><br><span class="line">person.setAge(<span class="number">18</span>);</span><br><span class="line">personRepo.save(person);</span><br></pre></td></tr></table></figure>

<p>但是这样的业务操作，如果一个线程修改年龄，另一个线程修改昵称，最后save回去，可能会导致年龄&#x2F;昵称某一个的修改被覆盖。</p>
<pre class="mermaid">sequenceDiagram
    participant A as Thread A
    participant B as Thread B
    participant DB as Database

    A->>DB: find person by id
    Note over A: person.setAge(18)
    B->>DB: find person by id
    Note over B: person.setNickname("NewName")

    A->>DB: save person
    B->>DB: save person

    Note over DB: Potential Overwrite Issue</pre>

<p>常见的解决方案有两种</p>
<h1><span id="zhi-xing-qian-tian-jia-bei-guan-suo">执行前添加悲观锁</span><a href="#zhi-xing-qian-tian-jia-bei-guan-suo" class="header-anchor">#</a></h1><p>通过分布式锁等方式，保证同一时间只有一个线程能够对数据进行修改。</p>
<h1><span id="le-guan-suo-si-lu-shi-xian">乐观锁思路实现</span><a href="#le-guan-suo-si-lu-shi-xian" class="header-anchor">#</a></h1><p>版本控制是另一种流行的处理并发问题的方法。它通过在每次更新记录时递增版本号来确保数据的一致性。</p>
<p>这在JPA中，可以通过在field上添加<code>@Version</code>注解来实现，但这也就要求①数据库中必须有version字段，②对于查找后更新类操作，必须使用JPA的save方法来进行更新。</p>
<p>当然也可以通过<code>update_time</code>来模拟乐观锁实现，这可能需要你在更新的时候添加<code>update_time</code>的条件，并且，<code>update_time</code>在极端场景下，理论正确性没那么严谨。</p>
<script type="module"> import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.esm.min.mjs';	mermaid.initialize({startOnLoad: true, flowchart: {curve: 'linear'}}); </script>]]></content>
      <tags>
        <tag>database</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Http SDK设计</title>
    <url>/code/java/java-http-sdk-design/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#java-http-sdk-she-ji">Java Http SDK设计</a><ul>
<li><a href="#maven-mo-kuai-she-ji">maven模块设计</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

</div>

<h1><span id="java-http-sdk-she-ji">Java Http SDK设计</span><a href="#java-http-sdk-she-ji" class="header-anchor">#</a></h1><p>根据Java项目的需求和特性，可以为Java的Http SDK项目选择以下命名方式：</p>
<ul>
<li><code>xxx-client-java</code>：如果这个项目只有Http SDK，没有其他协议的SDK，推荐使用这个命名方式。</li>
<li><code>xxx-http-client-java</code>：当存在其他协议的SDK时，可以使用这个命名方式，以区分不同协议的SDK。</li>
<li><code>xxx-admin-java</code>：当项目使用其他协议作为数据通道，使用HTTP协议作为管理通道时，可以使用这个命名方式。</li>
</ul>
<h2><span id="maven-mo-kuai-she-ji">maven模块设计</span><a href="#maven-mo-kuai-she-ji" class="header-anchor">#</a></h2><p>maven module命名可以叫xxx-client或者xxx-http-client，这通常取决于你的项目是否有其他协议的client，如果没有，那么推荐直接使用xxx-client。</p>
<p>假设包名前缀为com.xxx，module视图如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xxx-client-java(maven artifactId: xxx-client-parent)/</span><br><span class="line">|-- xxx-client-api(接口定义，包名com.xxx.client.api，jdk8+)</span><br><span class="line">|-- xxx-client-common/core(核心实现，包名com.xxx.client.common，jdk8+)</span><br><span class="line">|-- xxx-client-jdk(基于jdk http client的实现，包名com.xxx.client.jdk，jdk17+)</span><br><span class="line">|-- xxx-client-okhttp(基于okhttp的实现，包名com.xxx.client.okhttp，jdk8+)</span><br><span class="line">|-- xxx-client-reactor(基于reactor-netty的实现，包名com.xxx.client.reactor，jdk8+)</span><br></pre></td></tr></table></figure>

<p>依赖关系图:</p>
<pre class="mermaid">graph TD
api[xxx-client-api]
common[xxx-client-common]
jdk[xxx-client-jdk]
okhttp[xxx-client-okhttp]
reactor[xxx-client-reactor]

common --> api

jdk --> common
okhttp --> common
reactor --> common</pre>


<script type="module"> import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.esm.min.mjs';	mermaid.initialize({startOnLoad: true, flowchart: {curve: 'linear'}}); </script>]]></content>
      <tags>
        <tag>Java</tag>
        <tag>SDK</tag>
      </tags>
  </entry>
  <entry>
    <title>java日志打印心得</title>
    <url>/code/java/java-log/</url>
    <content><![CDATA[<p>对于一个组件来说，日志打印常见的有三种选择：</p>
<ol>
<li>不打印日志，只提供回调函数。将打印日志还是忽略的权利交给组件的使用者</li>
<li>可以由使用者设置一些参数，但组件自己管理整个日志的生命周期</li>
<li>适配生态内的日志框架，组件打印日志，但将输出的控制权控制反转给使用者</li>
</ol>
<p>java生态slf4j已经成为事实上的标准，像Apache Ignite在最开始的时候也将日志作为自己的Spi定义，是向着2来发展的，但在Ignite3版本也去掉。Go生态由于去没有这样的标准，很多library只能选择2，导致引入了一个go library，它的日志会怎么出来，对于使用者来说是一个未知数。</p>
<p>java生态的基本原则如下：</p>
<ol>
<li>library，不会独立部署的组件，只引入<code>slf4j-api</code>，不引入具体的实现，可以在单元测试里面引入某个实现，用于测试打印日志。</li>
<li>简单的sdk不打印日志，复杂的sdk可以打印一些关键日志，但QPS级别的日志不要打印，不要替用户做选择。</li>
</ol>
<blockquote>
<p>如果在一个高度一致的团队内，可以无视上面两条</p>
</blockquote>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>log</tag>
      </tags>
  </entry>
  <entry>
    <title>java maven lint推荐配置</title>
    <url>/code/java/java-maven-lint/</url>
    <content><![CDATA[<h1><span id="maven-checkstyle">maven checkstyle</span><a href="#maven-checkstyle" class="header-anchor">#</a></h1><h2><span id="tian-jia-maven-plugin-yi-lai">添加maven plugin依赖</span><a href="#tian-jia-maven-plugin-yi-lai" class="header-anchor">#</a></h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-checkstyle-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configLocation</span>&gt;</span>config/checkstyle.xml<span class="tag">&lt;/<span class="name">configLocation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">suppressionsLocation</span>&gt;</span>config/suppressions.xml<span class="tag">&lt;/<span class="name">suppressionsLocation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">includeTestSourceDirectory</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeTestSourceDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span>**/proto/*<span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>configLocation 存放checkstyle的规则配置文件，附录有样例内容</li>
<li>SuppressionsLocation 存放屏蔽规则配置文件，附录有样例内容</li>
<li>includeTestSourceDirectory 是否检测测试文件夹，建议配置为true</li>
</ul>
<p><img src="/code/java/java-maven-lint/maven-lint-checkstyle-config.png" alt="maven-lint-checkstyle-config"></p>
<h2><span id="jie-shu">结束</span><a href="#jie-shu" class="header-anchor">#</a></h2><p>最后就可以通过<code>mvn checkstyle:check</code>来检查您的工程啦。如果有违反了checkstyle的地方，命令行会提示出错的地方和违反的规则，如下图所示</p>
<p><img src="/code/java/java-maven-lint/maven-lint-checkstyle-fail1.png" alt="maven-lint-checkstyle-fail1"></p>
<p><img src="/code/java/java-maven-lint/maven-lint-checkstyle-fail2.png" alt="maven-lint-checkstyle-fail2"></p>
<h2><span id="fu-lu">附录</span><a href="#fu-lu" class="header-anchor">#</a></h2><h3><span id="gui-ze-pei-zhi-wen-jian-ju-li">规则配置文件举例</span><a href="#gui-ze-pei-zhi-wen-jian-ju-li" class="header-anchor">#</a></h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">module</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;-//Puppy Crawl//DTD Check Configuration 1.3//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://checkstyle.org/dtds/configuration_1_3.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- This is a checkstyle configuration file. For descriptions of</span></span><br><span class="line"><span class="comment">what the following rules do, please see the checkstyle configuration</span></span><br><span class="line"><span class="comment">page at http://checkstyle.sourceforge.net/config.html --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;Checker&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;FileTabCharacter&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Checks that there are no tab characters in the file. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- All Java AST specific tests live under TreeWalker module. --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;TreeWalker&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;SuppressionCommentFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;offCommentFormat&quot;</span> <span class="attr">value</span>=<span class="string">&quot;CHECKSTYLE.OFF\: ([\w\|]+)&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;onCommentFormat&quot;</span> <span class="attr">value</span>=<span class="string">&quot;CHECKSTYLE.ON\: ([\w\|]+)&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkFormat&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;SuppressWarningsHolder&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        IMPORT CHECKS</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;RedundantImport&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Checks for redundant import statements. --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;severity&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">&quot;import.redundancy&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">value</span>=<span class="string">&quot;Redundant import &#123;0&#125;.&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;AvoidStarImport&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;severity&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;RedundantModifier&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Checks for redundant modifiers on various symbol definitions.</span></span><br><span class="line"><span class="comment">              See: http://checkstyle.sourceforge.net/config_modifier.html#RedundantModifier</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;tokens&quot;</span> <span class="attr">value</span>=<span class="string">&quot;METHOD_DEF, VARIABLE_DEF, ANNOTATION_FIELD_DEF, INTERFACE_DEF, CLASS_DEF, ENUM_DEF&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            IllegalImport cannot blacklist classes, and c.g.api.client.util is used for some shaded</span></span><br><span class="line"><span class="comment">            code and some useful code. So we need to fall back to Regexp.</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;RegexpSinglelineJava&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;format&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com\.google\.api\.client\.util\.(ByteStreams|Charsets|Collections2|Joiner|Lists|Maps|Objects|Preconditions|Sets|Strings|Throwables)&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">             Require static importing from Preconditions.</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;RegexpSinglelineJava&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;format&quot;</span> <span class="attr">value</span>=<span class="string">&quot;^import com.google.common.base.Preconditions;$&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Static import functions from Guava Preconditions&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;UnusedImports&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;severity&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;processJavadoc&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">&quot;import.unused&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">value</span>=<span class="string">&quot;Unused import: &#123;0&#125;.&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        JAVADOC CHECKS</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Checks for Javadoc comments.                     --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- See http://checkstyle.sf.net/config_javadoc.html --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;JavadocMethod&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;scope&quot;</span> <span class="attr">value</span>=<span class="string">&quot;protected&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;severity&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;allowMissingParamTags&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;allowMissingReturnTag&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Check that paragraph tags are used correctly in Javadoc. --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        &lt;module name=&quot;JavadocParagraph&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;JavadocType&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;scope&quot;</span> <span class="attr">value</span>=<span class="string">&quot;protected&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;severity&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;allowMissingParamTags&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;JavadocStyle&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;severity&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkHtml&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        NAMING CHECKS</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Item 38 - Adhere to generally accepted naming conventions --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;PackageName&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Validates identifiers for package names against the</span></span><br><span class="line"><span class="comment">              supplied expression. --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Here the default checkstyle rule restricts package name parts to</span></span><br><span class="line"><span class="comment">              seven characters, this is not in line with common practice at Google.</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;format&quot;</span> <span class="attr">value</span>=<span class="string">&quot;^[a-z]+(\.[a-z][a-z0-9]&#123;1,&#125;)*$&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;severity&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;TypeNameCheck&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Validates static, final fields against the</span></span><br><span class="line"><span class="comment">            expression &quot;^[A-Z][a-zA-Z0-9]*$&quot;. --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">metadata</span> <span class="attr">name</span>=<span class="string">&quot;altname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;TypeName&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;severity&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;ConstantNameCheck&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Validates non-private, static, final fields against the supplied</span></span><br><span class="line"><span class="comment">            public/package final fields &quot;^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$&quot;. --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">metadata</span> <span class="attr">name</span>=<span class="string">&quot;altname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ConstantName&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;applyToPublic&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;applyToProtected&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;applyToPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;applyToPrivate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;format&quot;</span> <span class="attr">value</span>=<span class="string">&quot;^([A-Z][A-Za-z0-9_]*|FLAG_.*)$&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">message</span> <span class="attr">key</span>=<span class="string">&quot;name.invalidPattern&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">value</span>=<span class="string">&quot;Variable &#x27;&#x27;&#123;0&#125;&#x27;&#x27; should be in ALL_CAPS (if it is a constant) or be private (otherwise).&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;severity&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;StaticVariableNameCheck&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Validates static, non-final fields against the supplied</span></span><br><span class="line"><span class="comment">            expression &quot;^[a-z][a-zA-Z0-9]*_?$&quot;. --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">metadata</span> <span class="attr">name</span>=<span class="string">&quot;altname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;StaticVariableName&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;applyToPublic&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;applyToProtected&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;applyToPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;applyToPrivate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;format&quot;</span> <span class="attr">value</span>=<span class="string">&quot;^[a-z][a-zA-Z0-9]*_?$&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;severity&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;MemberNameCheck&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Validates non-static members against the supplied expression. --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">metadata</span> <span class="attr">name</span>=<span class="string">&quot;altname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;MemberName&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;applyToPublic&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;applyToProtected&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;applyToPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;applyToPrivate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;format&quot;</span> <span class="attr">value</span>=<span class="string">&quot;^[a-z][a-zA-Z0-9]*$&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;severity&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;MethodNameCheck&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Validates identifiers for method names. --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">metadata</span> <span class="attr">name</span>=<span class="string">&quot;altname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;MethodName&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;format&quot;</span> <span class="attr">value</span>=<span class="string">&quot;(^[a-z][a-zA-Z0-9]*(_[a-zA-Z0-9]+)*$|Void)&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;severity&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;ParameterName&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Validates identifiers for method parameters against the</span></span><br><span class="line"><span class="comment">              expression &quot;^[a-z][a-zA-Z0-9]*$&quot;. --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;severity&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;LocalFinalVariableName&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Validates identifiers for local final variables against the</span></span><br><span class="line"><span class="comment">              expression &quot;^[a-z][a-zA-Z0-9]*$&quot;. --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;severity&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;LocalVariableName&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Validates identifiers for local variables against the</span></span><br><span class="line"><span class="comment">              expression &quot;^[a-z][a-zA-Z0-9]*$&quot;. --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;severity&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Type parameters must be either one of the four blessed letters</span></span><br><span class="line"><span class="comment">        T, K, V, W, X or else be capital-case terminated with a T,</span></span><br><span class="line"><span class="comment">        such as MyGenericParameterT --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;ClassTypeParameterName&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;format&quot;</span> <span class="attr">value</span>=<span class="string">&quot;^(((T|K|V|W|X|R)[0-9]*)|([A-Z][a-z][a-zA-Z]*))$&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;severity&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;MethodTypeParameterName&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;format&quot;</span> <span class="attr">value</span>=<span class="string">&quot;^(((T|K|V|W|X|R)[0-9]*)|([A-Z][a-z][a-zA-Z]*T))$&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;severity&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;InterfaceTypeParameterName&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;format&quot;</span> <span class="attr">value</span>=<span class="string">&quot;^(((T|K|V|W|X|R)[0-9]*)|([A-Z][a-z][a-zA-Z]*T))$&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;severity&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;LeftCurly&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Checks for placement of the left curly brace (&#x27;&#123;&#x27;). --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;severity&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;RightCurly&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on</span></span><br><span class="line"><span class="comment">            the same line. e.g., the following example is fine:</span></span><br><span class="line"><span class="comment">            &lt;pre&gt;</span></span><br><span class="line"><span class="comment">              if &#123;</span></span><br><span class="line"><span class="comment">                ...</span></span><br><span class="line"><span class="comment">              &#125; else</span></span><br><span class="line"><span class="comment">            &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- This next example is not fine:</span></span><br><span class="line"><span class="comment">            &lt;pre&gt;</span></span><br><span class="line"><span class="comment">              if &#123;</span></span><br><span class="line"><span class="comment">                ...</span></span><br><span class="line"><span class="comment">              &#125;</span></span><br><span class="line"><span class="comment">              else</span></span><br><span class="line"><span class="comment">            &lt;/pre&gt;</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;option&quot;</span> <span class="attr">value</span>=<span class="string">&quot;same&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;severity&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Checks for braces around if and else blocks --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;NeedBraces&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;severity&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;tokens&quot;</span> <span class="attr">value</span>=<span class="string">&quot;LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;UpperEll&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Checks that long constants are defined with an upper ell.--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;severity&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;FallThrough&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Warn about falling through to the next case statement.  Similar to</span></span><br><span class="line"><span class="comment">            javac -Xlint:fallthrough, but the check is suppressed if a single-line comment</span></span><br><span class="line"><span class="comment">            on the last non-blank line preceding the fallen-into case contains &#x27;fall through&#x27; (or</span></span><br><span class="line"><span class="comment">            some other variants that we don&#x27;t publicized to promote consistency).</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;reliefPattern&quot;</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">value</span>=<span class="string">&quot;fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;severity&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Checks for over-complicated boolean expressions. --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;SimplifyBooleanExpression&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- Detects empty statements (standalone &quot;;&quot; semicolon). --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;EmptyStatement&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        WHITESPACE CHECKS</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;WhitespaceAround&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Checks that various tokens are surrounded by whitespace.</span></span><br><span class="line"><span class="comment">                 This includes most binary operators and keywords followed</span></span><br><span class="line"><span class="comment">                 by regular or curly braces.</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;tokens&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ASSIGN, BAND, BAND_ASSIGN, BOR,</span></span></span><br><span class="line"><span class="string"><span class="tag">        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,</span></span></span><br><span class="line"><span class="string"><span class="tag">        EQUAL, GE, GT, LAND, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,</span></span></span><br><span class="line"><span class="string"><span class="tag">        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,</span></span></span><br><span class="line"><span class="string"><span class="tag">        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,</span></span></span><br><span class="line"><span class="string"><span class="tag">        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,</span></span></span><br><span class="line"><span class="string"><span class="tag">        SL, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;severity&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;WhitespaceAfter&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Checks that commas, semicolons and typecasts are followed by</span></span><br><span class="line"><span class="comment">                 whitespace.</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;tokens&quot;</span> <span class="attr">value</span>=<span class="string">&quot;COMMA, SEMI, TYPECAST&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;NoWhitespaceAfter&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Checks that there is no whitespace after various unary operators.</span></span><br><span class="line"><span class="comment">                 Linebreaks are allowed.</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;tokens&quot;</span> <span class="attr">value</span>=<span class="string">&quot;BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,</span></span></span><br><span class="line"><span class="string"><span class="tag">        UNARY_PLUS&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;allowLineBreaks&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;severity&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;NoWhitespaceBefore&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Checks that there is no whitespace before various unary operators.</span></span><br><span class="line"><span class="comment">                 Linebreaks are allowed.</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;tokens&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SEMI, DOT, POST_DEC, POST_INC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;allowLineBreaks&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;severity&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;OperatorWrap&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Checks that operators like + and ? appear at newlines rather than</span></span><br><span class="line"><span class="comment">                 at the end of the previous line.</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;option&quot;</span> <span class="attr">value</span>=<span class="string">&quot;NL&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;tokens&quot;</span> <span class="attr">value</span>=<span class="string">&quot;BAND, BOR, BSR, BXOR, DIV, EQUAL,</span></span></span><br><span class="line"><span class="string"><span class="tag">        GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD,</span></span></span><br><span class="line"><span class="string"><span class="tag">        NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR &quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;OperatorWrap&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Checks that assignment operators are at the end of the line. --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;option&quot;</span> <span class="attr">value</span>=<span class="string">&quot;eol&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;tokens&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ASSIGN&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;ParenPad&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Checks that there is no whitespace before close parens or after</span></span><br><span class="line"><span class="comment">                 open parens.</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;severity&quot;</span> <span class="attr">value</span>=<span class="string">&quot;error&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span> <span class="attr">name</span>=<span class="string">&quot;ModifierOrder&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2><span id="ping-bi-gui-ze-pei-zhi-wen-jian-ju-li">屏蔽规则配置文件举例</span><a href="#ping-bi-gui-ze-pei-zhi-wen-jian-ju-li" class="header-anchor">#</a></h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">suppressions</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;-//Puppy Crawl//DTD Suppressions 1.1//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://checkstyle.org/dtds/configuration_1_3.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">suppressions</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- suppress all checks in the generated directories --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">suppress</span> <span class="attr">checks</span>=<span class="string">&quot;.*&quot;</span> <span class="attr">files</span>=<span class="string">&quot;.+[\\/]generated[\\/].+\.java&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">suppress</span> <span class="attr">checks</span>=<span class="string">&quot;.*&quot;</span> <span class="attr">files</span>=<span class="string">&quot;.+[\\/]generated-sources[\\/].+\.java&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">suppress</span> <span class="attr">checks</span>=<span class="string">&quot;.*&quot;</span> <span class="attr">files</span>=<span class="string">&quot;.+[\\/]generated-test-sources[\\/].+\.java&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">suppressions</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1><span id="maven-dependency-check">maven dependency-check</span><a href="#maven-dependency-check" class="header-anchor">#</a></h1><h2><span id="yin-ru-dependnecy-check-cha-jian">引入dependnecy-check插件</span><a href="#yin-ru-dependnecy-check-cha-jian" class="header-anchor">#</a></h2><p>项目中原有的依赖是这样的</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.41.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.owasp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dependency-check-maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dependency-check-maven.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">suppressionFiles</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">suppressionFile</span>&gt;</span>src/owasp-dependency-check-suppressions.xml<span class="tag">&lt;/<span class="name">suppressionFile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">suppressionFiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">failBuildOnCVSS</span>&gt;</span>7<span class="tag">&lt;/<span class="name">failBuildOnCVSS</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">msbuildAnalyzerEnabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">msbuildAnalyzerEnabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nodeAnalyzerEnabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">nodeAnalyzerEnabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">yarnAuditAnalyzerEnabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">yarnAuditAnalyzerEnabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pyDistributionAnalyzerEnabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">pyDistributionAnalyzerEnabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pyPackageAnalyzerEnabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">pyPackageAnalyzerEnabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pipAnalyzerEnabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">pipAnalyzerEnabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pipfileAnalyzerEnabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">pipfileAnalyzerEnabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">retireJsAnalyzerEnabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">retireJsAnalyzerEnabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">msbuildAnalyzerEnabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">msbuildAnalyzerEnabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mixAuditAnalyzerEnabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">mixAuditAnalyzerEnabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">nugetconfAnalyzerEnabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">nugetconfAnalyzerEnabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">assemblyAnalyzerEnabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">assemblyAnalyzerEnabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">skipSystemScope</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipSystemScope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>aggregate<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后可以通过<code>mvn clean install verify -DskipTests</code>来检测。这个demo下，会输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ERROR] One or more dependencies were identified with vulnerabilities that have a CVSS score greater than or equal to &#x27;7.0&#x27;: </span><br><span class="line">[ERROR] </span><br><span class="line">[ERROR] netty-all-4.1.41.Final.jar: CVE-2019-16869(7.5), CVE-2021-37136(7.5), CVE-2020-11612(7.5), CVE-2021-37137(7.5), CVE-2019-20445(9.1), CVE-2019-20444(9.1), CVE-2020-7238(7.5)</span><br><span class="line">[ERROR] </span><br><span class="line">[ERROR] See the dependency-check report for more details.</span><br></pre></td></tr></table></figure>

<p>实际使用时，由于dependency-check检查相对耗时，一般通过单独的profile来控制开关</p>
<h2><span id="ping-bi-cve-lou-dong">屏蔽CVE漏洞</span><a href="#ping-bi-cve-lou-dong" class="header-anchor">#</a></h2><p>如果出现<code>dependency-check</code>误报或者是评估该漏洞不涉及，可以通过<code>supression file</code>来屏蔽</p>
<h3><span id="ping-bi-dan-yi-cve-lou-dong">屏蔽单一CVE漏洞</span><a href="#ping-bi-dan-yi-cve-lou-dong" class="header-anchor">#</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;suppress&gt;</span><br><span class="line">  &lt;notes&gt;&lt;![CDATA[</span><br><span class="line"> file name: zookeeper-prometheus-metrics-3.8.0.jar</span><br><span class="line"> ]]&gt;&lt;/notes&gt;</span><br><span class="line">  &lt;sha1&gt;849e8ece2845cb0185d721233906d487a7f1e4cf&lt;/sha1&gt;</span><br><span class="line">  &lt;cve&gt;CVE-2021-29425&lt;/cve&gt;</span><br><span class="line">&lt;/suppress&gt;</span><br></pre></td></tr></table></figure>

<h3><span id="tong-guo-wen-jian-zheng-ze-lai-ping-bi-cve-lou-dong">通过文件正则来屏蔽CVE漏洞</span><a href="#tong-guo-wen-jian-zheng-ze-lai-ping-bi-cve-lou-dong" class="header-anchor">#</a></h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;suppress&gt;</span><br><span class="line">    &lt;notes&gt;CVE-2011-1797 FP, see https://github.com/jeremylong/DependencyCheck/issues/4154&lt;/notes&gt;</span><br><span class="line">    &lt;filePath regex=&quot;true&quot;&gt;.*netty-tcnative-boringssl-static.*\.jar&lt;/filePath&gt;</span><br><span class="line">    &lt;cve&gt;CVE-2011-1797g&lt;/cve&gt;</span><br><span class="line">&lt;/suppress&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java指标统计方案及代码</title>
    <url>/code/java/java-metrics-statistic/</url>
    <content><![CDATA[<h1><span id="java-gen-ju-xian-cheng-tong-ji-cpu">java 根据线程统计CPU</span><a href="#java-gen-ju-xian-cheng-tong-ji-cpu" class="header-anchor">#</a></h1><h2><span id="she-ji-si-lu">设计思路</span><a href="#she-ji-si-lu" class="header-anchor">#</a></h2><p>java的ThreadMXBean可以获取每个线程CPU执行的nanoTime，那么可以以这个为基础，除以中间系统经过的纳秒数，就获得了该线程的<code>CPU</code>占比</p>
<h2><span id="bian-ma">编码</span><a href="#bian-ma" class="header-anchor">#</a></h2><p>首先，我们定义一个结构体，用来存放一个线程上次统计时的纳秒数和当时的系统纳秒数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadMetricsAux</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> usedNanoTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> lastNanoTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadMetricsAux</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ThreadMetricsAux</span><span class="params">(<span class="type">long</span> usedNanoTime, <span class="type">long</span> lastNanoTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.usedNanoTime = usedNanoTime;</span><br><span class="line">        <span class="built_in">this</span>.lastNanoTime = lastNanoTime;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们在SpringBoot中定义一个定时任务，它将定时地统计计算每个线程的CPU信息，并输出到<code>MeterRegistry</code>，当你调用<code>SpringActuator</code>的接口时，你将能获取到这个指标。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.common.util.concurrent.AtomicDouble;</span><br><span class="line"><span class="keyword">import</span> io.micrometer.core.instrument.Meter;</span><br><span class="line"><span class="keyword">import</span> io.micrometer.core.instrument.MeterRegistry;</span><br><span class="line"><span class="keyword">import</span> io.micrometer.core.instrument.Tags;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.management.ManagementFactory;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.ThreadInfo;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.ThreadMXBean;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadMetricService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MeterRegistry meterRegistry;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ThreadMXBean</span> <span class="variable">threadBean</span> <span class="operator">=</span> ManagementFactory.getThreadMXBean();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;Long, ThreadMetricsAux&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;Meter.Id, AtomicDouble&gt; dynamicGauges = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * one minutes</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">schedule</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">long</span>[] allThreadIds = threadBean.getAllThreadIds();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">long</span> threadId : allThreadIds) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">ThreadInfo</span> <span class="variable">threadInfo</span> <span class="operator">=</span> threadBean.getThreadInfo(threadId);</span><br><span class="line">            <span class="keyword">if</span> (threadInfo == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">long</span> <span class="variable">threadNanoTime</span> <span class="operator">=</span> getThreadCPUTime(threadId);</span><br><span class="line">            <span class="keyword">if</span> (threadNanoTime == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果threadNanoTime为0，则识别为异常数据，不处理，并清理历史数据</span></span><br><span class="line">                map.remove(threadId);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">long</span> <span class="variable">nanoTime</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">            <span class="type">ThreadMetricsAux</span> <span class="variable">oldMetrics</span> <span class="operator">=</span> map.get(threadId);</span><br><span class="line">            <span class="comment">// 判断是否有历史的metrics信息</span></span><br><span class="line">            <span class="keyword">if</span> (oldMetrics != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果有，则计算CPU信息并上报</span></span><br><span class="line">                <span class="type">double</span> <span class="variable">percent</span> <span class="operator">=</span> (<span class="type">double</span>) (threadNanoTime - oldMetrics.getUsedNanoTime()) / (<span class="type">double</span>) (nanoTime - oldMetrics.getLastNanoTime());</span><br><span class="line">                handleDynamicGauge(<span class="string">&quot;jvm.threads.cpu&quot;</span>, <span class="string">&quot;threadName&quot;</span>, threadInfo.getThreadName(), percent);</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(threadId, <span class="keyword">new</span> <span class="title class_">ThreadMetricsAux</span>(threadNanoTime, nanoTime));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// meter Gauge相关代码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">handleDynamicGauge</span><span class="params">(String meterName, String labelKey, String labelValue, <span class="type">double</span> snapshot)</span> &#123;</span><br><span class="line">        Meter.<span class="type">Id</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Meter</span>.Id(meterName, Tags.of(labelKey, labelValue), <span class="literal">null</span>, <span class="literal">null</span>, Meter.Type.GAUGE);</span><br><span class="line"></span><br><span class="line">        dynamicGauges.compute(id, (key, current) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (current == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">AtomicDouble</span> <span class="variable">initialValue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicDouble</span>(snapshot);</span><br><span class="line">                meterRegistry.gauge(key.getName(), key.getTags(), initialValue);</span><br><span class="line">                <span class="keyword">return</span> initialValue;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                current.set(snapshot);</span><br><span class="line">                <span class="keyword">return</span> current;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="title function_">getThreadCPUTime</span><span class="params">(<span class="type">long</span> threadId)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> threadBean.getThreadCpuTime(threadId);</span><br><span class="line">        <span class="comment">/* thread of the specified ID is not alive or does not exist */</span></span><br><span class="line">        <span class="keyword">return</span> time == -<span class="number">1</span> ? <span class="number">0</span> : time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2><span id="qi-ta-pei-zhi">其他配置</span><a href="#qi-ta-pei-zhi" class="header-anchor">#</a></h2><h3><span id="yi-lai-pei-zhi">依赖配置</span><a href="#yi-lai-pei-zhi" class="header-anchor">#</a></h3><p><code>pom</code>文件中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.micrometer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micrometer-registry-prometheus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3><span id="prometheus-jie-kou-pei-zhi">Prometheus接口配置</span><a href="#prometheus-jie-kou-pei-zhi" class="header-anchor">#</a></h3><p><code>application.yaml</code>中</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">health,info,prometheus</span></span><br></pre></td></tr></table></figure>

<h2><span id="xiao-guo">效果</span><a href="#xiao-guo" class="header-anchor">#</a></h2><p>通过<code>curl</code>命令调用<code>curl localhost:20001/actuator/prometheus|grep cpu</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jvm_threads_cpu&#123;threadName=&quot;RMI Scheduler(0)&quot;,&#125; 0.0</span><br><span class="line">jvm_threads_cpu&#123;threadName=&quot;http-nio-20001-exec-10&quot;,&#125; 0.0</span><br><span class="line">jvm_threads_cpu&#123;threadName=&quot;Signal Dispatcher&quot;,&#125; 0.0</span><br><span class="line">jvm_threads_cpu&#123;threadName=&quot;Common-Cleaner&quot;,&#125; 3.1664628758074733E-7</span><br><span class="line">jvm_threads_cpu&#123;threadName=&quot;http-nio-20001-Poller&quot;,&#125; 7.772143763853949E-5</span><br><span class="line">jvm_threads_cpu&#123;threadName=&quot;http-nio-20001-Acceptor&quot;,&#125; 8.586978352515361E-5</span><br><span class="line">jvm_threads_cpu&#123;threadName=&quot;DestroyJavaVM&quot;,&#125; 0.0</span><br><span class="line">jvm_threads_cpu&#123;threadName=&quot;Monitor Ctrl-Break&quot;,&#125; 0.0</span><br><span class="line">jvm_threads_cpu&#123;threadName=&quot;AsyncHttpClient-timer-8-1&quot;,&#125; 2.524386571545477E-4</span><br><span class="line">jvm_threads_cpu&#123;threadName=&quot;Attach Listener&quot;,&#125; 0.0</span><br><span class="line">jvm_threads_cpu&#123;threadName=&quot;scheduling-1&quot;,&#125; 1.2269694160981585E-4</span><br><span class="line">jvm_threads_cpu&#123;threadName=&quot;container-0&quot;,&#125; 1.999795692406262E-6</span><br><span class="line">jvm_threads_cpu&#123;threadName=&quot;http-nio-20001-exec-9&quot;,&#125; 0.0</span><br><span class="line">jvm_threads_cpu&#123;threadName=&quot;http-nio-20001-exec-7&quot;,&#125; 0.0</span><br><span class="line">jvm_threads_cpu&#123;threadName=&quot;http-nio-20001-exec-8&quot;,&#125; 0.0</span><br><span class="line">jvm_threads_cpu&#123;threadName=&quot;http-nio-20001-exec-5&quot;,&#125; 0.0</span><br><span class="line">jvm_threads_cpu&#123;threadName=&quot;Notification Thread&quot;,&#125; 0.0</span><br><span class="line">jvm_threads_cpu&#123;threadName=&quot;http-nio-20001-exec-6&quot;,&#125; 0.0</span><br><span class="line">jvm_threads_cpu&#123;threadName=&quot;http-nio-20001-exec-3&quot;,&#125; 0.0</span><br><span class="line">jvm_threads_cpu&#123;threadName=&quot;http-nio-20001-exec-4&quot;,&#125; 0.0</span><br><span class="line">jvm_threads_cpu&#123;threadName=&quot;Reference Handler&quot;,&#125; 0.0</span><br><span class="line">jvm_threads_cpu&#123;threadName=&quot;http-nio-20001-exec-1&quot;,&#125; 0.0012674719289349648</span><br><span class="line">jvm_threads_cpu&#123;threadName=&quot;http-nio-20001-exec-2&quot;,&#125; 6.542541277148053E-5</span><br><span class="line">jvm_threads_cpu&#123;threadName=&quot;RMI TCP Connection(idle)&quot;,&#125; 1.3998786340454562E-6</span><br><span class="line">jvm_threads_cpu&#123;threadName=&quot;Finalizer&quot;,&#125; 0.0</span><br><span class="line">jvm_threads_cpu&#123;threadName=&quot;Catalina-utility-2&quot;,&#125; 7.920883054498174E-5</span><br><span class="line">jvm_threads_cpu&#123;threadName=&quot;RMI TCP Accept-0&quot;,&#125; 0.0</span><br><span class="line">jvm_threads_cpu&#123;threadName=&quot;Catalina-utility-1&quot;,&#125; 6.80101662787773E-5</span><br></pre></td></tr></table></figure>

<h1><span id="java-ji-suan-ci-pan-shi-yong-lu">Java计算磁盘使用率</span><a href="#java-ji-suan-ci-pan-shi-yong-lu" class="header-anchor">#</a></h1><p><a href="https://support.huaweicloud.com/bestpractice-bms/bms_bp_2009.html">https://support.huaweicloud.com/bestpractice-bms/bms_bp_2009.html</a></p>
<p>华为云文档上的材料值得学习。</p>
<p>翻阅资料</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.kernel.org/doc/Documentation/ABI/testing/procfs-diskstats</span><br><span class="line"></span><br><span class="line">13 - time spent doing I/Os (ms)</span><br></pre></td></tr></table></figure>

<p>这就意味着如果我想统计一个磁盘在一定周期内的利用率，只需要对这两个数字做差，除以统计的间隔，即就是这段时间内磁盘的利用率</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat /proc/diskstats</span><br><span class="line"> 253       0 vda 24046 771 2042174 180187 20689748 21411881 527517532 18028256 0 14610513 18201352</span><br><span class="line"> 253       1 vda1 23959 771 2038022 180153 20683957 21411881 527517532 18028066 0 14610312 18201129</span><br></pre></td></tr></table></figure>

<p>样例代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.github.shoothzj.demo.metrics;</span><br><span class="line"></span><br><span class="line">import com.github.shoothzj.demo.base.module.ShellResult;</span><br><span class="line">import com.github.shoothzj.demo.base.util.LogUtil;</span><br><span class="line">import com.github.shoothzj.demo.base.util.ShellUtil;</span><br><span class="line">import com.github.shoothzj.demo.base.util.StringUtil;</span><br><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line">import java.util.concurrent.ScheduledExecutorService;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author hezhangjian</span><br><span class="line"> */</span><br><span class="line">@Slf4j</span><br><span class="line">public class DiskUtilizationMetrics &#123;</span><br><span class="line"></span><br><span class="line">    private static final ScheduledExecutorService scheduledExecutor = Executors.newSingleThreadScheduledExecutor();</span><br><span class="line"></span><br><span class="line">    private static long lastTime = -1;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        LogUtil.configureLog();</span><br><span class="line">        String diskName = &quot;vda1&quot;;</span><br><span class="line">        scheduledExecutor.scheduleAtFixedRate(() -&gt; metrics(diskName), 0, 10, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void metrics(String diskName) &#123;</span><br><span class="line">        //假设统计vda磁盘</span><br><span class="line">        String[] cmd = &#123;</span><br><span class="line">                &quot;/bin/bash&quot;,</span><br><span class="line">                &quot;-c&quot;,</span><br><span class="line">                &quot;cat /proc/diskstats |grep &quot; + diskName + &quot;|awk &#x27;&#123;print $13&#125;&#x27;&quot;</span><br><span class="line">        &#125;;</span><br><span class="line">        ShellResult shellResult = ShellUtil.executeCmd(cmd);</span><br><span class="line">        String timeStr = shellResult.getInputContent().substring(0, shellResult.getInputContent().length() - 1);</span><br><span class="line">        long time = Long.parseLong(timeStr);</span><br><span class="line">        if (lastTime == -1) &#123;</span><br><span class="line">            log.info(&quot;first time cal, usage time is [&#123;&#125;]&quot;, time);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            double usage = (time - lastTime) / (double) 10_000;</span><br><span class="line">            log.info(&quot;usage time is [&#123;&#125;]&quot;, usage);</span><br><span class="line">        &#125;</span><br><span class="line">        lastTime = time;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1><span id="da-yin-cpu-shi-yong">打印CPU使用</span><a href="#da-yin-cpu-shi-yong" class="header-anchor">#</a></h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printCpuUsage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> com.sun.management.<span class="type">OperatingSystemMXBean</span> <span class="variable">platformMXBean</span> <span class="operator">=</span> ManagementFactory.getPlatformMXBean(com.sun.management.OperatingSystemMXBean.class);</span><br><span class="line">        <span class="type">double</span> <span class="variable">cpuLoad</span> <span class="operator">=</span> platformMXBean.getProcessCpuLoad();</span><br><span class="line">        System.out.println(cpuLoad);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1><span id="da-yin-xian-cheng-dui-zhan">打印线程堆栈</span><a href="#da-yin-xian-cheng-dui-zhan" class="header-anchor">#</a></h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printThreadDump</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">StringBuilder</span> <span class="variable">dump</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ThreadMXBean</span> <span class="variable">threadMXBean</span> <span class="operator">=</span> ManagementFactory.getThreadMXBean();</span><br><span class="line">        <span class="comment">// 100代表线程堆栈的层级</span></span><br><span class="line">        <span class="keyword">final</span> ThreadInfo[] threadInfos = threadMXBean.getThreadInfo(threadMXBean.getAllThreadIds(), <span class="number">100</span>);</span><br><span class="line">        <span class="keyword">for</span> (ThreadInfo threadInfo : threadInfos) &#123;</span><br><span class="line">            dump.append(<span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">            dump.append(threadInfo.getThreadName());</span><br><span class="line">            dump.append(<span class="string">&quot;\&quot; &quot;</span>);</span><br><span class="line">            <span class="keyword">final</span> Thread.<span class="type">State</span> <span class="variable">state</span> <span class="operator">=</span> threadInfo.getThreadState();</span><br><span class="line">            dump.append(<span class="string">&quot;\n   java.lang.Thread.State: &quot;</span>);</span><br><span class="line">            dump.append(state);</span><br><span class="line">            <span class="keyword">final</span> StackTraceElement[] stackTraceElements = threadInfo.getStackTrace();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">final</span> StackTraceElement stackTraceElement : stackTraceElements) &#123;</span><br><span class="line">                dump.append(<span class="string">&quot;\n        at &quot;</span>);</span><br><span class="line">                dump.append(stackTraceElement);</span><br><span class="line">            &#125;</span><br><span class="line">            dump.append(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(dump);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1><span id="da-yin-nei-cun-tong-ji-xin-xi">打印内存统计信息</span><a href="#da-yin-nei-cun-tong-ji-xin-xi" class="header-anchor">#</a></h1><p>引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jerolba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmnemohistosyne<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printClassHisto</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">Histogramer</span> <span class="variable">histogramer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Histogramer</span>();</span><br><span class="line">       <span class="type">MemoryHistogram</span> <span class="variable">histogram</span> <span class="operator">=</span> histogramer.createHistogram();</span><br><span class="line"></span><br><span class="line">       <span class="type">HistogramEntry</span> <span class="variable">arrayList</span> <span class="operator">=</span> histogram.get(<span class="string">&quot;java.util.ArrayList&quot;</span>);</span><br><span class="line">       System.out.println(arrayList.getInstances());</span><br><span class="line">       System.out.println(arrayList.getSize());</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (HistogramEntry entry : histogram) &#123;</span><br><span class="line">           System.out.println(entry);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h1><span id="da-yin-si-suo">打印死锁</span><a href="#da-yin-si-suo" class="header-anchor">#</a></h1><p>javadoc中指出，这是一个开销较大的操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printDeadLock</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">final</span> <span class="type">ThreadMXBean</span> <span class="variable">threadMXBean</span> <span class="operator">=</span> ManagementFactory.getThreadMXBean();</span><br><span class="line">       <span class="keyword">final</span> <span class="type">long</span>[] deadlockedThreads = threadMXBean.findDeadlockedThreads();</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">long</span> deadlockedThread : deadlockedThreads) &#123;</span><br><span class="line">           <span class="keyword">final</span> <span class="type">ThreadInfo</span> <span class="variable">threadInfo</span> <span class="operator">=</span> threadMXBean.getThreadInfo(deadlockedThread);</span><br><span class="line">           System.out.println(threadInfo + <span class="string">&quot;deadLocked&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA Ping命令心跳探测 InetAddress isReachable分析</title>
    <url>/code/java/java-ping/</url>
    <content><![CDATA[<h1><span id="ye-wu-xu-qiu-fen-xi-yu-jie-jue-fang-an">业务需求分析与解决方案</span><a href="#ye-wu-xu-qiu-fen-xi-yu-jie-jue-fang-an" class="header-anchor">#</a></h1><p>在业务场景中，当需要利用ping命令对主机进行心跳探测时，直接在代码中fork进程执行ping命令虽然可行，但这种方法开销较大，并且处理流程易出错，与使用标准库相比缺乏优雅性。因此，本文探讨了使用Java的InetAddress类的isReachable方法作为替代方案。</p>
<p>根据资料指出，Java的InetAddress类在root用户权限下通过执行ping命令进行探测，在非root用户权限下则通过访问TCP端口7进行探测。为验证这一点，本文撰写了相应的demo代码并进行了测试（详见：<a href="https://github.com/shoothzj/heart-beat">GitHub - heart-beat</a>）。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line">import java.net.InetAddress;</span><br><span class="line"></span><br><span class="line">@Slf4j</span><br><span class="line">public class PingTestMain &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        String testIp = System.getProperty(&quot;TestIp&quot;);</span><br><span class="line">        InetAddress inetAddress = InetAddress.getByName(testIp);</span><br><span class="line">        boolean addressReachable = inetAddress.isReachable(500);</span><br><span class="line">        log.info(&quot;address is reachable is &#123;&#125;&quot;, addressReachable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1><span id="ce-shi-shi-yan">测试实验</span><a href="#ce-shi-shi-yan" class="header-anchor">#</a></h1><h2><span id="root-yong-hu-xia-zhi-xing-cheng-xu">root用户下执行程序</span><a href="#root-yong-hu-xia-zhi-xing-cheng-xu" class="header-anchor">#</a></h2><p><img src="/code/java/java-ping/java-ping-root-success.png" alt="java-ping-root-success.png"></p>
<p>java程序打印结果也是true</p>
<h2><span id="zai-pu-tong-yong-hu-quan-xian-xia-de-ce-shi">在普通用户权限下的测试</span><a href="#zai-pu-tong-yong-hu-quan-xian-xia-de-ce-shi" class="header-anchor">#</a></h2><p><img src="/code/java/java-ping/java-ping-user-fail.png" alt="java-ping-user-fail.png"></p>
<p>此时可以看到,我们的客户端程序向目标tcp7端口发送了一个报文,虽然java程序打印结果为true,但是因为收到了RST包导致的.在当今的网络安全要求下,7端口往往不会开放</p>
<h2><span id="zai-mu-biao-wang-luo-ping-bi-tcp-duan-kou-7-de-qing-kuang-xia-zhi-xing-cheng-xu">在目标网络屏蔽TCP端口7的情况下执行程序</span><a href="#zai-mu-biao-wang-luo-ping-bi-tcp-duan-kou-7-de-qing-kuang-xia-zhi-xing-cheng-xu" class="header-anchor">#</a></h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --dport 7 -j DROP</span><br></pre></td></tr></table></figure>

<p>发送的报文没有收到RST包,此时java程序返回false.不是我们预期的结果</p>
<h2><span id="pu-tong-yong-hu-quan-xian-xia-xi-dai-te-quan-de-ce-shi">普通用户权限下携带特权的测试</span><a href="#pu-tong-yong-hu-quan-xian-xia-xi-dai-te-quan-de-ce-shi" class="header-anchor">#</a></h2><p>进一步的研究发现，Java程序发送ping命令需要创建raw socket，这要求程序具有root权限或cap_net_raw权限。赋予Java程序创建raw socket的权限后重新测试，发现程序能够正确发送ping命令，达到预期效果。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setcap cap_net_raw+ep /usr/java/jdk-13.0.1/bin/java</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>发现如下报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java: error while loading shared libraries: libjli.so: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure>
<p>使用<a href="https://askubuntu.com/questions/334365/how-to-add-a-directory-to-linker-command-line-in-linux%E8%A7%84%E9%81%BF%E6%B7%BB%E5%8A%A0so%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90">https://askubuntu.com/questions/334365/how-to-add-a-directory-to-linker-command-line-in-linux规避添加so文件权限</a></p>
<p>随后抓包,发现还是发送了ping命令,达到了我们预期的效果</p>
<h1><span id="zong-jie">总结</span><a href="#zong-jie" class="header-anchor">#</a></h1><p>本文通过一系列测试得出结论，root用户权限下的Java程序会使用ping命令进行探测。若普通用户不具备相应权限，则会尝试探测TCP端口7，但在安全组未开启该端口的情况下会导致预期结果不一致。推荐赋予java程序特权,使得InetAddress类能够使用ping命令进行探测</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 项目结构组织</title>
    <url>/code/java/java-project-structure/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#jian-dan-de-library">简单的library</a></li>
<li><a href="#fu-za-de-springboot-xiang-mu-fu-ze-duo-ge-ye-wu-mo-kuai">复杂的SpringBoot项目，负责多个业务模块</a><ul>
<li><a href="#fang-an-yi-duo-ye-wu-mo-kuai-tong-guo-zi-bao-lai-qu-fen-bu-fen-zi-module">方案一：多业务模块通过子包来区分，不分子module</a></li>
<li><a href="#fang-an-er-gen-ju-ye-wu-mo-kuai-chai-fen-zi-module">方案二：根据业务模块拆分子module</a></li>
</ul>
</li>
</ul>
<!-- tocstop -->

</div>

<h2><span id="jian-dan-de-library">简单的library</span><a href="#jian-dan-de-library" class="header-anchor">#</a></h2><p>对于简单的library来说，我更推荐将所有的文件都放在同一个package下面，如简单的client封装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package:com.xxx.yyy/</span><br><span class="line">|-- XxClient</span><br><span class="line">|-- XxDTO</span><br><span class="line">|-- XxException</span><br><span class="line">|-- XxUtil</span><br></pre></td></tr></table></figure>

<h2><span id="fu-za-de-springboot-xiang-mu-fu-ze-duo-ge-ye-wu-mo-kuai">复杂的SpringBoot项目，负责多个业务模块</span><a href="#fu-za-de-springboot-xiang-mu-fu-ze-duo-ge-ye-wu-mo-kuai" class="header-anchor">#</a></h2><p>备注:</p>
<ul>
<li>xxx、yyy代表大块的业务区分：如用户、订单、支付</li>
<li>aaa、bbb代表小块的业务区分：如(用户的)登录、注册、查询</li>
</ul>
<h3><span id="fang-an-yi-duo-ye-wu-mo-kuai-tong-guo-zi-bao-lai-qu-fen-bu-fen-zi-module">方案一：多业务模块通过子包来区分，不分子module</span><a href="#fang-an-yi-duo-ye-wu-mo-kuai-tong-guo-zi-bao-lai-qu-fen-bu-fen-zi-module" class="header-anchor">#</a></h3><p>module视图:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">example(maven artifactId: example-parent)/</span><br><span class="line">|-- example-service(业务逻辑)</span><br><span class="line">|-- example-spring-ignite(依赖spring，常见为中间件client，适配spring模块用于方便单元测试)</span><br><span class="line">|-- example-spring-ignite-test(依赖spring，不依赖test-common，spring模块单元测试用)</span><br><span class="line">|-- example-starter(启动类)</span><br><span class="line">|-- example-test-common(不依赖example-common)</span><br><span class="line">|-- example-util(不依赖Spring框架，可选模块，为service与其他spring集成组件共用)</span><br></pre></td></tr></table></figure>

<p>依赖关系图:</p>
<pre class="mermaid">graph TD
service[example-service]
springIgnite[example-spring-ignite]
springIgniteTest[example-spring-ignite-test]
starter[example-starter]
testCommon[example-test-common]
util[example-util]

starter --> service

service --> springIgnite
service --> util
service -.-> testCommon

testCommon --> springIgniteTest

springIgniteTest --> springIgnite

springIgnite --> util</pre>

<p>service包内视图:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">io.shoothzj.example/</span><br><span class="line">|-- service/</span><br><span class="line">|   |-- common/</span><br><span class="line">|   |-- module/</span><br><span class="line">|   |   |-- aaaModule</span><br><span class="line">|   |   |-- bbbModule</span><br><span class="line">|   |-- mapper/</span><br><span class="line">|   |   |-- aaaMapper</span><br><span class="line">|   |   |-- bbbMapper</span><br><span class="line">|   |-- repo/</span><br><span class="line">|   |   |-- aaaRepo</span><br><span class="line">|   |   |-- bbbRepo</span><br><span class="line">|   |-- service/</span><br><span class="line">|   |   |-- aaaService</span><br><span class="line">|   |   |-- bbbService</span><br></pre></td></tr></table></figure>

<h3><span id="fang-an-er-gen-ju-ye-wu-mo-kuai-chai-fen-zi-module">方案二：根据业务模块拆分子module</span><a href="#fang-an-er-gen-ju-ye-wu-mo-kuai-chai-fen-zi-module" class="header-anchor">#</a></h3><p>适用于大型项目，每个业务模块都比较大。</p>
<p>module视图：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">example(maven artifactId: example-parent)/</span><br><span class="line">|-- example-common(可依赖spring模块)</span><br><span class="line">|-- example-rest-xxx(xxx功能模块的rest接口)</span><br><span class="line">|-- example-rest-yyy(yyy功能模块的rest接口)</span><br><span class="line">|-- example-service-xxx(xxx功能的业务逻辑)</span><br><span class="line">|-- example-service-yyy(yyy功能的业务逻辑)</span><br><span class="line">|-- example-spring-ignite(依赖spring，常见为中间件client，适配spring模块用于方便单元测试)</span><br><span class="line">|-- example-spring-ignite-test(依赖spring，不依赖test-common，spring模块单元测试用)</span><br><span class="line">|-- example-starter(启动类)</span><br><span class="line">|-- example-test-common(不依赖example-common)</span><br><span class="line">|-- example-util(不依赖example-common，可选模块，为service、common与其他spring集成组件共用)</span><br></pre></td></tr></table></figure>

<p>依赖关系图:</p>
<pre class="mermaid">graph TD
common[example-common]
rest-xxx[example-rest-xxx]
rest-yyy[example-rest-yyy]
service-xxx[example-service-xxx]
service-yyy[example-service-yyy]
springIgnite[example-spring-ignite]
springIgniteTest[example-spring-ignite-test]
starter[example-starter]
testCommon[example-test-common]
util[example-util]

starter --> rest-xxx
starter --> rest-yyy

rest-xxx --> common
rest-xxx --> service-xxx

rest-yyy --> common
rest-yyy --> service-yyy

service-xxx --> common
service-xxx --> springIgnite

service-yyy --> common
service-yyy --> util

common -.-> testCommon

testCommon --> springIgniteTest

springIgniteTest --> springIgnite

springIgnite --> util</pre>

<p>关于service模块引不引用rest模块的DTO，我的想法：</p>
<p>如果确实service模块和rest模块DTO差距比较大，可以拆分做转换，如果差距很小&#x2F;没有差距，可以复用同一个DTO，放在service模块或者更底层的依赖。</p>
<p>service-xxx包内视图:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">io.shoothzj.example.service/</span><br><span class="line">|-- xxx/</span><br><span class="line">|   |-- common/</span><br><span class="line">|   |-- module/</span><br><span class="line">|   |   |-- aaaModule</span><br><span class="line">|   |   |-- bbbModule</span><br><span class="line">|   |-- mapper/</span><br><span class="line">|   |   |-- aaaMapper</span><br><span class="line">|   |   |-- bbbMapper</span><br><span class="line">|   |-- repo/</span><br><span class="line">|   |   |-- aaaRepo</span><br><span class="line">|   |   |-- bbbRepo</span><br><span class="line">|   |-- service/</span><br><span class="line">|   |   |-- aaaService</span><br><span class="line">|   |   |-- bbbService</span><br></pre></td></tr></table></figure>


<script type="module"> import mermaid from 'https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.esm.min.mjs';	mermaid.initialize({startOnLoad: true, flowchart: {curve: 'linear'}}); </script>]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java依赖不同版本冲突解决方案之shade包</title>
    <url>/code/java/java-shade-package/</url>
    <content><![CDATA[<p>我们在很多场景下会碰到java包冲突的问题：</p>
<ul>
<li>代码由第三方开发，无法对包名或依赖做管控</li>
<li>跑在同一个进程里的代码，更新步调不一致。比如底层sdk，jvm agent。这些组件更新频率较低</li>
</ul>
<p>最出名的解决路数还是类加载机制，诸如flink，osgi都给我们提供了很多方案，这些方案都非常重型。在代码可信任的情况下，其中有一个很轻量级的解决方案就是maven-shade包。</p>
<p>举个例子，比方说我想在java agent中打印日志，但是又不希望和业务代码中的log4j等冲突，agent里依赖的pom文件是这样子的:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-slf4j-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-jcl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.13.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里我们log4j,slf4j可能用的版本太高或者太低，我们就可以通过打shade包的方式修改log4j和slf4j的包名,避免和业务冲突</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactSet</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>org.slf4j:slf4j-api<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>org.apache.logging.log4j:log4j-api<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>org.apache.logging.log4j:log4j-core<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>org.apache.logging.log4j:log4j-slf4j-impl<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>org.apache.logging.log4j:log4j-jcl<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">artifactSet</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">filters</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">artifact</span>&gt;</span>*:*<span class="tag">&lt;/<span class="name">artifact</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.SF<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.DSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>META-INF/*.RSA<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">filters</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">relocations</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">relocation</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">shadedPattern</span>&gt;</span>com.github.shoothzj.org.slf4j<span class="tag">&lt;/<span class="name">shadedPattern</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">relocation</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">relocation</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>org.apache.logging<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">shadedPattern</span>&gt;</span>com.github.shoothzj.org.apache.logging<span class="tag">&lt;/<span class="name">shadedPattern</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">relocation</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">relocations</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>通过上面的配置，artifactSet选择要修改的pom依赖，通过relocation修改包名，达到不冲突的效果。<strong>mvn clean package</strong> 后查看效果</p>
<p><img src="/code/java/java-shade-package/java-shade-package-result.png" alt="java-shade-package-result"></p>
<p>可以发现，包名已经被修改完成,达到了避免冲突的目的。</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java时间相关类转换</title>
    <url>/code/java/java-time-convert/</url>
    <content><![CDATA[<p><img src="/code/java/java-time-convert/java-time-convert.png" alt="java-time-convert"></p>
]]></content>
  </entry>
  <entry>
    <title>WebFlux最佳实践</title>
    <url>/code/java/java-webflux-best-practice/</url>
    <content><![CDATA[<p>WebFlux是Spring 5引入的新的响应式编程框架，它提供了一种基于反应式流的编程模型，可以用于构建高性能、高吞吐量的Web应用程序。</p>
<h1><span id="fang-zhi-da-liang-qing-qiu-dui-ji">防止大量请求堆积</span><a href="#fang-zhi-da-liang-qing-qiu-dui-ji" class="header-anchor">#</a></h1><h2><span id="xian-zhi-tong-yi-shi-jian-de-bing-fa-chu-li-ge-shu">限制同一时间的并发处理个数</span><a href="#xian-zhi-tong-yi-shi-jian-de-bing-fa-chu-li-ge-shu" class="header-anchor">#</a></h2><p>由于WebFlux可以处理大量的请求，如果后端处理较慢（如写db较慢等），可能会导致大量的请求堆积，可以通过限制同一时间的并发处理个数来防止请求堆积。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.WebFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.WebFilterChain;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcurrencyLimitingFilter</span> <span class="keyword">implements</span> <span class="title class_">WebFilter</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Semaphore semaphore;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConcurrencyLimitingFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.semaphore = <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, WebFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (semaphore.tryAcquire()) &#123;</span><br><span class="line">            <span class="keyword">return</span> chain.filter(exchange)</span><br><span class="line">                    .doFinally(sig -&gt; semaphore.release());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            exchange.getResponse().setStatusCode(HttpStatus.TOO_MANY_REQUESTS);</span><br><span class="line">            <span class="keyword">return</span> exchange.getResponse().setComplete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2><span id="pei-zhi-chao-shi-shi-jian">配置超时时间</span><a href="#pei-zhi-chao-shi-shi-jian" class="header-anchor">#</a></h2><p>网络编程中，任何操作都应该有超时时间。WebFlux允许大量的请求进入，如果不设置超时时间，可能会导致大量的请求排队处理（可能客户端早已放弃），可以通过统一Filter来设置最大超时时间。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ResponseStatusException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.ServerWebExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.WebFilter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.server.WebFilterChain;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeoutException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebRequestTimeoutFilter</span> <span class="keyword">implements</span> <span class="title class_">WebFilter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Void&gt; <span class="title function_">filter</span><span class="params">(ServerWebExchange exchange, WebFilterChain chain)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> chain.filter(exchange)</span><br><span class="line">                .timeout(Duration.ofSeconds(<span class="number">10</span>))</span><br><span class="line">                .onErrorResume(TimeoutException.class, e -&gt; &#123;</span><br><span class="line">                    log.error(<span class="string">&quot;Request timeout&quot;</span>, e);</span><br><span class="line">                    <span class="keyword">return</span> Mono.error(<span class="keyword">new</span> <span class="title class_">ResponseStatusException</span>(HttpStatus.GATEWAY_TIMEOUT, <span class="string">&quot;Request timeout&quot;</span>));</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>WebFlux</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次诡异的Java时间戳变化问题</title>
    <url>/code/java/java-weird-timestamp-change/</url>
    <content><![CDATA[<h1><span id="wen-ti-xian-xiang">问题现象</span><a href="#wen-ti-xian-xiang" class="header-anchor">#</a></h1><p>在一个使用Spring R2dbc与Mysql8.x的项目中，当创建 一个REST资源，进行创建，返回的毫秒精度时间戳，和下一瞬间查询的时间戳不一致。sql及代码大概如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    created_time DATETIME(<span class="number">3</span>),</span><br><span class="line">    updated_time DATETIME(<span class="number">3</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>实体类定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PersonEntity</span> &#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@CreatedDate</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createdTime;</span><br><span class="line">    <span class="meta">@LastModifiedDate</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updatedTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里使用了<code>@CreatedDate</code>、<code>@LastModifiedDate</code>注解，并在Application类上配置了<code>@EnableR2dbcAuditing</code>注解用于在Repo操作实体的时候，自动更新时间戳。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PersonRepo</span> <span class="keyword">extends</span> <span class="title class_">ReactiveCrudRepository</span>&lt;PersonEntity, Long&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建代码类比如下，大概就是使用r2dbc操作数据，并将r2dbc返回的实体用于转换毫秒时间戳</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">return createPersonReq</span><br><span class="line">               .flatMap(req -&gt; &#123;</span><br><span class="line">                   PersonPo personPo = new PersonPo();</span><br><span class="line">                   personPo.setAge(18);</span><br><span class="line">                   personPo.setName(req.getName());</span><br><span class="line">                   return personRepo.save(personPo);</span><br><span class="line">               &#125;)</span><br><span class="line">               .map(person -&gt; &#123;</span><br><span class="line">                   PersonResp personResp = new PersonResp();</span><br><span class="line">                   personResp.setName(person.getName());</span><br><span class="line">                   personResp.setCreatedTime(TimeUtil.format(person.getCreatedTime()));</span><br><span class="line">                   return new ResponseEntity&lt;&gt;(personResp, null, HttpStatus.CREATED);</span><br><span class="line">               &#125;);</span><br></pre></td></tr></table></figure>

<p>然而创建的时候返回的时间戳和查询的时间戳不一致，现象举例：<br>创建的时候返回：<code>2024-05-08T08:11:47.333Z</code>，<br>查询的时候却返回：<code>2024-05-08T08:11:47.334Z</code>，</p>
<p>走读代码，发现代码基本上万无一失，那么问题出在哪里呢？</p>
<p>通过仔细观察时间戳的区别，发现时间戳的变化都在最后一位，且相差为一，醒悟到这估计是由于内存中纳秒时间戳精度在转化为数据库毫秒时间戳的时候，部分库的行为是截断，部分库的行为是四舍五入，导致了这个问题。</p>
<p>最终通过写demo，docker抓包复现了这个问题，如下图所示，mysql server会将接收的时间戳进行四舍五入，而java常见的format工具类都是截断，导致了这一不一致。同时，这也体现了，r2dbc返回的entity可能并不是实际存入数据的内容，而是”原始”的entity。</p>
<p><img src="/code/java/java-weird-timestamp-change/r2dbc-weird-timestamp-change.jpeg" alt="r2dbc-weird-timestamp-change.jpeg"></p>
<h1><span id="r2dbc-yu-mysql-de-shi-jian-jing-du-shi-diao-wen-ti">r2dbc与mysql的时间精度失调问题</span><a href="#r2dbc-yu-mysql-de-shi-jian-jing-du-shi-diao-wen-ti" class="header-anchor">#</a></h1><p>在这个问题里面，存在三个时间精度：</p>
<ul>
<li>内存中的时间精度</li>
<li>r2dbc发给mysql的时间精度，有趣的是，r2dbc发给mysql的时间精度，并不是sql中列定义的精度，而是mysql server所能支持的最高精度即微秒精度。</li>
<li>mysql实际存储的时间精度</li>
</ul>
<p>r2dbc返回的entity可能并不是实际存入数据的内容，而是经过r2dbc处理之后，发送到数据库之前的entity。问题的关键就在r2dbc并不根据列定义的精度处理数据，而是根据mysql server支持的最高精度处理数据。</p>
<p>解决问题的方式有几种：</p>
<ul>
<li>将mysql列定义到微秒级别精度，优选方案</li>
<li>在进入r2dbc之前，将时间戳截断到mysql列定义的精度</li>
<li>在r2dbc返回的entity中，将时间戳截断到mysql支持的精度。这其实对开发者的心智负担较重，返回的entity并不是实际存储的，使用前要做进位，限制也比较大。</li>
</ul>
<p>在进入r2dbc之前，将时间戳截断到数据库表定义的精度，也有两种方式</p>
<ul>
<li>不使用<code>@CreatedDate</code>、<code>@LastModifiedDate</code>注解，而是在应用程序中手动设置时间戳</li>
<li>继续使用<code>@CreatedDate</code>、<code>@LastModifiedDate</code>注解，通过拦截器统一进位</li>
</ul>
<p>通过拦截器的代码如下，定义基类，不然每个实体类都要书写拦截器。一般来说，一个项目里，时间戳的精度都应该统一，所以可以定义一个统一的拦截器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.annotation.CreatedDate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.annotation.LastModifiedDate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AuditableEntity</span> &#123;</span><br><span class="line">    <span class="meta">@CreatedDate</span></span><br><span class="line">    <span class="keyword">protected</span> LocalDateTime createdTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LastModifiedDate</span></span><br><span class="line">    <span class="keyword">protected</span> LocalDateTime updatedTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> LocalDateTime <span class="title function_">getCreatedTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> createdTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCreatedTime</span><span class="params">(LocalDateTime createdTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.createdTime = createdTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> LocalDateTime <span class="title function_">getUpdatedTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> updatedTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUpdatedTime</span><span class="params">(LocalDateTime updatedTime)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.updatedTime = updatedTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.reactivestreams.Publisher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.r2dbc.mapping.OutboundRow;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.r2dbc.mapping.event.BeforeSaveCallback;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.relational.core.mapping.event.BeforeConvertCallback;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.relational.core.sql.SqlIdentifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.ChronoUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuditableEntityCallback</span> <span class="keyword">implements</span> <span class="title class_">BeforeSaveCallback</span>&lt;AuditableEntity&gt;, BeforeConvertCallback&lt;AuditableEntity&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Publisher&lt;AuditableEntity&gt; <span class="title function_">onBeforeSave</span><span class="params">(AuditableEntity entity, OutboundRow row, SqlIdentifier table)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before save &quot;</span> + entity.getCreatedTime());</span><br><span class="line">        entity.setCreatedTime(roundToMilliseconds(entity.getCreatedTime()));</span><br><span class="line">        entity.setUpdatedTime(roundToMilliseconds(entity.getUpdatedTime()));</span><br><span class="line">        System.out.println(<span class="string">&quot;before save &quot;</span> + entity.getCreatedTime());</span><br><span class="line">        <span class="keyword">return</span> Mono.just(entity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> AuditableEntity <span class="title function_">onBeforeConvert</span><span class="params">(AuditableEntity entity)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before convert &quot;</span> + entity.getCreatedTime());</span><br><span class="line">        entity.setCreatedTime(roundToMilliseconds(entity.getCreatedTime()));</span><br><span class="line">        entity.setUpdatedTime(roundToMilliseconds(entity.getUpdatedTime()));</span><br><span class="line">        System.out.println(<span class="string">&quot;before convert &quot;</span> + entity.getCreatedTime());</span><br><span class="line">        <span class="keyword">return</span> entity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LocalDateTime <span class="title function_">roundToMilliseconds</span><span class="params">(LocalDateTime dateTime)</span> &#123;</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">localDateTime</span> <span class="operator">=</span> dateTime.truncatedTo(ChronoUnit.MILLIS);</span><br><span class="line">        <span class="type">int</span> <span class="variable">dateTimeNano</span> <span class="operator">=</span> dateTime.getNano() % <span class="number">1000_000</span>;</span><br><span class="line">        <span class="keyword">if</span> (dateTimeNano &gt;= <span class="number">500_000</span>) &#123;</span><br><span class="line">            localDateTime = localDateTime.plusNanos(<span class="number">1_000_000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> localDateTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1><span id="jpa-you-mei-you-wen-ti-ni">jpa有没有问题呢？</span><a href="#jpa-you-mei-you-wen-ti-ni" class="header-anchor">#</a></h1><p>出于好奇，我也做了jpa的尝试，jpa也是一样的行为</p>
<p><img src="/code/java/java-weird-timestamp-change/jpa-weird-timestamp-change.png" alt="jpa-weird-timestamp-change.jpeg"></p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>mysql</tag>
        <tag>r2dbc</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring记录数据库操作时间的几种方式</title>
    <url>/code/java/spring-database-audit-time/</url>
    <content><![CDATA[<p>Spring记录数据库操作时间的几种方式</p>
<h1><span id="spring-jpa">Spring Jpa</span><a href="#spring-jpa" class="header-anchor">#</a></h1><p>@EnableJpaAuditing注解开启Jpa的审计功能，然后在实体类上使用@CreatedDate和@LastModifiedDate注解即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Column(name = &quot;create_time&quot;)</span></span><br><span class="line"><span class="meta">@CreatedDate</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column(name = &quot;update_time&quot;)</span></span><br><span class="line"><span class="meta">@LastModifiedDate</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime updateTime;</span><br></pre></td></tr></table></figure>

<h1><span id="spring-r2dbc">Spring R2dbc</span><a href="#spring-r2dbc" class="header-anchor">#</a></h1><p>Spring R2dbc可以使用@CreatedDate和@LastModifiedDate注解来实现。但是需要在Application上开启<code>@EnableR2dbcAuditing</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Column(&quot;created_time&quot;)</span></span><br><span class="line"><span class="meta">@CreatedDate</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime createdTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Column(&quot;updated_time&quot;)</span></span><br><span class="line"><span class="meta">@LastModifiedDate</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime updatedTime;</span><br></pre></td></tr></table></figure>

<h1><span id="ying-yong-cheng-xu-xiu-gai">应用程序修改</span><a href="#ying-yong-cheng-xu-xiu-gai" class="header-anchor">#</a></h1><p>应用程序修改就比较简单，简单设置一下即可,以PersonPo类为例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">PersonPo</span> <span class="variable">personPo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PersonPo</span>();</span><br><span class="line">personPo.setCreateTime(LocalDateTime.now());</span><br><span class="line">personPo.setUpdateTime(LocalDateTime.now());</span><br></pre></td></tr></table></figure>

<h1><span id="mysql-chang-jing-xia-li-yong-timestamp-neng-li">Mysql场景下利用TIMESTAMP能力</span><a href="#mysql-chang-jing-xia-li-yong-timestamp-neng-li" class="header-anchor">#</a></h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> person (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    <span class="operator">/</span><span class="operator">/</span> ... 其他字段 ...</span><br><span class="line">    create_time <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">    update_time <span class="type">TIMESTAMP</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Http SDK设计</title>
    <url>/code/python/python-http-sdk-design/</url>
    <content><![CDATA[<p>根据Python项目的需求和特性，可以为Python的Http SDK项目选择以下命名方式：</p>
<ul>
<li><code>xxx-client-python</code>：如果这个项目只有Http SDK，没有其他协议的SDK，推荐使用这个命名方式。</li>
<li><code>xxx-http-client-python</code>：当存在其他协议的SDK时，可以使用这个命名方式，以区分不同协议的SDK。</li>
<li><code>xxx-admin-python</code>：当项目使用其他协议作为数据通道，使用HTTP协议作为管理通道时，可以使用这个命名方式。</li>
</ul>
<p>由于Python的调用方式通常是<code>模块名.类名.方法名</code>。</p>
]]></content>
      <tags>
        <tag>SDK</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript Http SDK设计</title>
    <url>/code/typescript/typescript-http-sdk-design/</url>
    <content><![CDATA[<p>TypeScript的调用方式通常是</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ClassName</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;moduleName&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> object = <span class="keyword">new</span> <span class="title class_">ClassName</span>();</span><br></pre></td></tr></table></figure>

<p>根据TypeScript项目的需求和特性，可以为TypeScript的Http SDK项目选择以下命名方式：</p>
<ul>
<li><code>xxx-client-ts</code>：如果这个项目只有Http SDK，没有其他协议的SDK，推荐使用这个命名方式。在npm可以注册为”xxx”。</li>
<li><code>xxx-http-client-ts</code>：当存在其他协议的SDK时，可以使用这个命名方式，以区分不同协议的SDK。</li>
<li><code>xxx-admin-ts</code>：当项目使用其他协议作为数据通道，使用HTTP协议作为管理通道时，可以使用这个命名方式。</li>
</ul>
]]></content>
      <tags>
        <tag>SDK</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Ignite Java客户端最佳实践</title>
    <url>/code/java/ignite/ignite-java-client-best-practice/</url>
    <content><![CDATA[<div class="toc">

<!-- toc -->

<ul>
<li><a href="#ignite-java-ke-hu-duan-zui-jia-shi-jian">Ignite Java 客户端最佳实践</a><ul>
<li><a href="#bei-jing">背景</a></li>
<li><a href="#ke-hu-duan-xiang-guan">客户端相关</a><ul>
<li><a href="#clientconfiguration-timeout">ClientConfiguration timeout</a></li>
</ul>
</li>
<li><a href="#sql-xiang-guan">SQL相关</a><ul>
<li><a href="#sqlfieldsquery-timeout">SqlFieldsQuery timeout</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<!-- tocstop -->

</div>

<h1><span id="ignite-java-ke-hu-duan-zui-jia-shi-jian">Ignite Java 客户端最佳实践</span><a href="#ignite-java-ke-hu-duan-zui-jia-shi-jian" class="header-anchor">#</a></h1><h2><span id="bei-jing">背景</span><a href="#bei-jing" class="header-anchor">#</a></h2><p>本文总结了在使用Apache Ignite（Ignite2.0）的Java客户端时，需要注意的一些问题，以及一些最佳实践。值得一提的是 Ignite的Java客户端有一些跟直觉上不太一样的地方，需要注意下。</p>
<h2><span id="ke-hu-duan-xiang-guan">客户端相关</span><a href="#ke-hu-duan-xiang-guan" class="header-anchor">#</a></h2><p>Ignite客户端有两处跟直觉上相差较大：</p>
<ul>
<li>Ignite客户端连接没有默认超时时间，如果连接不上，有概率会导致创建客户端一直阻塞，所以一定要设置timeout参数</li>
<li>Ignite客户端默认不会重连，更不用说无限重连了。并且Ignite客户端重连的实现方式是预先计算出所有重连的时间戳，然后在这些时间戳到达时重连，由于要预先计算出重连的时间戳存入数组，这也就意味着不能无限重连。如果您的应用程序需要无限重连（在云原生环境下，这是非常常见的场景），那么您需要自己实现重连逻辑。</li>
</ul>
<p>ClientConfiguration里的重要参数</p>
<h3><span id="clientconfiguration-timeout">ClientConfiguration timeout</span><a href="#clientconfiguration-timeout" class="header-anchor">#</a></h3><p>控制连接超时的参数，单位是毫秒。必须设置！如果不设置，有概率会导致创建客户端一直阻塞。</p>
<h2><span id="sql-xiang-guan">SQL相关</span><a href="#sql-xiang-guan" class="header-anchor">#</a></h2><p>SQL查询典型用法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">SqlFieldsQuery</span> <span class="variable">query</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlFieldsQuery</span>(<span class="string">&quot;SELECT 42&quot;</span>).setTimeout(<span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">FieldsQueryCursor&lt;List&lt;?&gt;&gt; cursor = igniteClient.query(query))</span><br><span class="line">List&lt;List&lt;?&gt;&gt; result = cursor.getAll();</span><br></pre></td></tr></table></figure>

<p>注意：Ignite query出来的cursor如果自己通过iterator遍历则必须要close，否则会导致内存泄漏。</p>
<p>Query相关参数</p>
<h3><span id="sqlfieldsquery-timeout">SqlFieldsQuery timeout</span><a href="#sqlfieldsquery-timeout" class="header-anchor">#</a></h3><p>SqlQuery的超时时间，必须设置。默认是0，表示永不超时。如果不设置，有概率会导致查询一直阻塞。</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Ignite</tag>
      </tags>
  </entry>
  <entry>
    <title>利用Lombok的@RequiredArgsConstructor简化Spring构造函数</title>
    <url>/code/java/lombok/lombok-required-args-constructor-spring/</url>
    <content><![CDATA[<p>从Spring的新版本开始，推荐使用构造函数的注入方式，通过构造函数注入有很多优点，诸如不变性等等。同时在构造函数上，也不需要添加<code>@Autowire</code><br>注解就可以完成注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Before</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ABC</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> A a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> B b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> C c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ABC</span><span class="params">(<span class="meta">@Autowire</span> A a, <span class="meta">@Autowire</span> B b, <span class="meta">@Autowire</span> C c)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.a = a;</span><br><span class="line">        <span class="built_in">this</span>.b = b;</span><br><span class="line">        <span class="built_in">this</span>.c = c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// After</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ABC</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> A a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> B b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> C c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ABC</span><span class="params">(A a, B b, C c)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.a = a;</span><br><span class="line">        <span class="built_in">this</span>.b = b;</span><br><span class="line">        <span class="built_in">this</span>.c = c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是，这种注入方式会导致变动代码的时候，需要同时修改field以及构造函数，在项目早期发展时期，这种变动显得有一些枯燥，再加上已经不需要<code>@Autowire</code><br>注解。这时，我们可以用Lombok的@RequiredArgsConstructor来简化这个流程。</p>
<p>Lombok的<code>@RequiredArgsConstructor</code>会包含这些参数：</p>
<ul>
<li>所有未初始化的 final 字段</li>
<li>被标记为 @NonNull 但在声明时未初始化的字段。</li>
</ul>
<p>对于那些被标记为 @NonNull<br>的字段，还会生成一个显式的空检查（不过在Spring框架里这个没什么作用）。通过应用<code>@RequiredArgsConstructor</code><br>，代码可以简化为如下模样，同时添加新的字段也不需要修改多行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ABC</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> A a;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> B b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> C c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
        <tag>Lombok</tag>
      </tags>
  </entry>
</search>
